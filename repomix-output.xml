This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
.github/ISSUE_TEMPLATE/bug_report.md
.github/ISSUE_TEMPLATE/feature_request.md
.github/pull_request_template_improved.md
.github/pull_request_template.md
.github/workflows/ci.yml
.github/workflows/claude.yml
.github/workflows/README.md
.github/workflows/sentry-release.yml
.gitignore
.lighthouserc.json
.npmrc
.prettierignore
.prettierrc
~/.config/goose/config.toml
~/.config/goose/goose.yaml
~/start-goose.sh
CLAUDE.md
copy-coverage.sh
docs/ARCHITECTURE.md
docs/CLAUDE_GITHUB_ACTIONS_SETUP.md
docs/QUICK_REFERENCE.md
docs/README.md
docs/SENTRY_SETUP.md
docs/SUPABASE_INTEGRATION.md
docs/TAILWIND_CSS_QUICK_REFERENCE.md
eslint.config.ts
package.json
pnpm-workspace.yaml
postcss.config.ts
README.md
scripts/create-release.js
src/app.css
src/app.d.ts
src/app.html
src/hooks.client.ts
src/hooks.server.ts
src/lib/components/auth/LoginForm.svelte
src/lib/components/auth/LoginForm.test.ts
src/lib/components/auth/ProfileForm.svelte
src/lib/components/auth/ResetPasswordForm.svelte
src/lib/components/auth/RoleSignupForm.svelte
src/lib/components/auth/SignupForm.svelte
src/lib/components/ClassList.svelte
src/lib/components/DeploymentInfo.svelte
src/lib/components/FilePreviewModal.svelte
src/lib/components/FlipCard.svelte
src/lib/components/GameSharingModal.svelte
src/lib/components/Handsontable.svelte
src/lib/components/ImportWizard.svelte
src/lib/components/JeopardyTimer.svelte
src/lib/components/LessonPlanner.svelte
src/lib/components/LoadingBounce.svelte
src/lib/components/LogEntriesDetails.svelte
src/lib/components/LogEntriesForm.svelte
src/lib/components/LogEntriesList.svelte
src/lib/components/LogEntriesSearch.svelte
src/lib/components/PDFViewer.svelte
src/lib/components/StudentRoster.svelte
src/lib/components/StudentRoster.test.ts
src/lib/components/ThemeToggle.svelte
src/lib/index.ts
src/lib/services/fileService.ts
src/lib/services/supabaseService.test.ts
src/lib/services/supabaseService.ts
src/lib/stores/auth.test.ts
src/lib/stores/auth.ts
src/lib/stores/files.ts
src/lib/stores/gradebook.test.ts
src/lib/stores/gradebook.ts
src/lib/stores/jeopardy.test.ts
src/lib/stores/jeopardy.ts
src/lib/stores/log-entries.ts
src/lib/stores/scattergories.ts
src/lib/supabaseClient.ts
src/lib/types/auth.ts
src/lib/types/database.ts
src/lib/types/files.ts
src/lib/types/gradebook.ts
src/lib/types/jeopardy.ts
src/lib/types/log-entries.ts
src/lib/utils/authGuard.ts
src/lib/utils/dragAndDrop.ts
src/lib/utils/modelConverters.test.ts
src/lib/utils/modelConverters.ts
src/lib/utils/performance.ts
src/routes/+layout.svelte
src/routes/+layout.ts
src/routes/+page.svelte
src/routes/auth/login/+page.svelte
src/routes/auth/reset-password/+page.svelte
src/routes/auth/signup/+page.svelte
src/routes/chat/+page.svelte
src/routes/class-dojo-remake/+page.svelte
src/routes/classes/+page.svelte
src/routes/dashboard/+page.svelte
src/routes/files/+page.svelte
src/routes/gradebook/+page.svelte
src/routes/jeopardy/+page.svelte
src/routes/jeopardy/editor/[gameId]/+page.svelte
src/routes/jeopardy/play/[gameId]/+page.svelte
src/routes/lesson-planner/+page.svelte
src/routes/log-entries/+page.svelte
src/routes/scattergories/+page.svelte
src/routes/scattergories/components/CategoryList.svelte
src/routes/scattergories/components/CategoryManager.svelte
src/routes/scattergories/components/GameControls.svelte
src/routes/scattergories/components/GameTimer.svelte
src/routes/scattergories/components/LetterDisplay.svelte
src/routes/settings/+page.svelte
src/routes/settings/profile/+page.svelte
src/routes/student/dashboard/+page.svelte
src/routes/student/games/+page.svelte
src/routes/test-sentry/+page.svelte
start-goose.sh
supabase/migrations/001_add_user_roles.sql
supabase/migrations/002_update_student_tables.sql
supabase/migrations/003_rls_policies.sql
supabase/migrations/004_remove_duplicate_jeopardy.sql
svelte.config.js
tailwind.config.ts
tsconfig.json
vercel.json
vite.config.ts
vitest-setup.ts
vitest.config.ts
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path=".github/ISSUE_TEMPLATE/bug_report.md">
---
name: Bug report
about: Create a report to help us improve
title: "[BUG] "
labels: bug
assignees: ''
---

## Bug Description
A clear and concise description of what the bug is.

## Steps to Reproduce
1. Go to '...'
2. Click on '....'
3. Scroll down to '....'
4. See error

## Expected Behavior
A clear and concise description of what you expected to happen.

## Actual Behavior
A clear and concise description of what actually happened.

## Screenshots
If applicable, add screenshots to help explain your problem.

## Environment
- Browser: [e.g. Chrome, Firefox, Safari]
- Version: [e.g. 22]
- Device: [e.g. iPhone6, Desktop]
- OS: [e.g. iOS, Windows, macOS]

## Additional Context
Add any other context about the problem here.

## Related Components
- [ ] Authentication
- [ ] Gradebook
- [ ] Jeopardy Games
- [ ] Observation Logs
- [ ] Dashboard
- [ ] Settings
- [ ] Other: ___________

---
*This issue will be automatically triaged by Claude Code Assistant*
</file>

<file path=".github/ISSUE_TEMPLATE/feature_request.md">
---
name: Feature request
about: Suggest an idea for this project
title: "[FEATURE] "
labels: enhancement
assignees: ''
---

## Feature Summary
A clear and concise description of what you want to happen.

## Problem Statement
Is your feature request related to a problem? Please describe.
A clear and concise description of what the problem is. Ex. I'm always frustrated when [...]

## Proposed Solution
A clear and concise description of what you want to happen.

## Alternative Solutions
A clear and concise description of any alternative solutions or features you've considered.

## Use Cases
Describe who would use this feature and in what scenarios:
- As a [user type], I want [goal] so that [reason]

## Acceptance Criteria
- [ ] Requirement 1
- [ ] Requirement 2
- [ ] Requirement 3

## Additional Context
Add any other context, mockups, or screenshots about the feature request here.

## Priority
- [ ] Low - Nice to have
- [ ] Medium - Would improve user experience
- [ ] High - Critical for workflow

## Related Components
- [ ] Authentication
- [ ] Gradebook
- [ ] Jeopardy Games
- [ ] Observation Logs
- [ ] Dashboard
- [ ] Settings
- [ ] Other: ___________

---
*This issue will be automatically triaged by Claude Code Assistant*
</file>

<file path=".github/pull_request_template_improved.md">
## Summary
Brief description of changes made in this PR.

## Type of Change
- [ ] Bug fix (non-breaking change which fixes an issue)
- [ ] New feature (non-breaking change which adds functionality)
- [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected)
- [ ] Documentation update
- [ ] Code refactoring
- [ ] Performance improvement
- [ ] Test coverage improvement
- [ ] Style/UI improvements

## Related Issues
Closes #[issue number]

## Changes Made
- [ ] Change 1
- [ ] Change 2
- [ ] Change 3

## CLAUDE.md Compliance Checklist

### Must Pass Requirements
- [ ] **TypeScript**: No TS errors (`pnpm check` passes)
- [ ] **Linting**: ESLint passes (`pnpm lint` passes)
- [ ] **Tests**: All tests pass (`pnpm test` passes)
- [ ] **Build**: Production build succeeds (`pnpm build` passes)
- [ ] **Validation**: Combined validation passes (`pnpm validate` passes)

### Code Quality Standards
- [ ] Uses proper Svelte 5 patterns (runes, callback props)
- [ ] Follows established store patterns
- [ ] Implements proper error handling with try/catch
- [ ] Includes loading states for async operations
- [ ] Uses correct Tailwind classes from project theme
- [ ] Maintains consistent file organization

### Svelte 5 Compliance
- [ ] Uses `$state()`, `$derived()`, `$effect()` instead of old patterns
- [ ] Uses `$props()` instead of `export let`
- [ ] Uses callback props instead of `createEventDispatcher`
- [ ] No legacy `$:` reactive statements (or justified if used)
- [ ] Follows component structure guidelines from CLAUDE.md

### Database Operations (if applicable)
- [ ] Uses correct table names (`log_entries` NOT `observation_logs`)
- [ ] Updates TypeScript types if schema changes
- [ ] Includes migration files for schema changes
- [ ] Updates model converters if needed
- [ ] Tests database operations

### Architecture Compliance
- [ ] Uses `supabaseService` for data operations
- [ ] Follows error handling patterns from CLAUDE.md
- [ ] Implements proper loading states
- [ ] Uses established store patterns
- [ ] Maintains type safety throughout

## Testing
- [ ] Unit tests added/updated for new functionality
- [ ] Component tests use Testing Library patterns
- [ ] Store tests follow established patterns from CLAUDE.md
- [ ] All existing tests pass locally
- [ ] Test coverage maintained or improved

## Code Quality & Security
- [ ] Code follows project style guidelines
- [ ] Self-review of code completed
- [ ] Code is properly documented
- [ ] No console.log statements left in production code
- [ ] No hardcoded secrets or API keys
- [ ] Input validation implemented where needed
- [ ] RLS policies considered for database changes

## Performance Considerations
- [ ] No performance regressions introduced
- [ ] Efficient patterns used (lazy loading, virtual scrolling, etc.)
- [ ] Bundle size impact considered
- [ ] Image optimization applied (if applicable)

## Accessibility & UX
- [ ] UI components are accessible
- [ ] Proper ARIA labels used
- [ ] Keyboard navigation works
- [ ] Color contrast meets standards
- [ ] Loading states provide good UX

## Screenshots/Videos
If applicable, add screenshots or videos demonstrating the changes.

## Deployment Notes
Special considerations for deployment:
- [ ] No special deployment requirements
- [ ] Requires database migration
- [ ] Requires environment variable updates
- [ ] Requires dependency updates
- [ ] Needs cache clearing

## Pre-commit Validation
Confirm you ran these commands locally:
- [ ] `pnpm validate` (ESLint + TypeScript)
- [ ] `pnpm test` (All tests pass)
- [ ] `pnpm build` (Production build works)

## Additional Notes
Any additional context or considerations for reviewers.

---

### For Reviewers
This PR should be reviewed against the criteria in [CLAUDE.md](../blob/main/CLAUDE.md). The automated Claude Code Review will check for compliance with project standards.

*This PR will be automatically reviewed by Claude Code Assistant following our established guidelines.*
</file>

<file path=".github/pull_request_template.md">
## Summary
Brief description of changes made in this PR.

## Type of Change
- [ ] Bug fix (non-breaking change which fixes an issue)
- [ ] New feature (non-breaking change which adds functionality)
- [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected)
- [ ] Documentation update
- [ ] Code refactoring
- [ ] Performance improvement
- [ ] Test coverage improvement

## Related Issues
Closes #[issue number]

## Changes Made
- [ ] Change 1
- [ ] Change 2
- [ ] Change 3

## Testing
- [ ] Unit tests added/updated
- [ ] Integration tests added/updated
- [ ] Manual testing completed
- [ ] All existing tests pass

## Code Quality
- [ ] Code follows project style guidelines
- [ ] Self-review of code completed
- [ ] Code is properly documented
- [ ] No console.log statements left in code
- [ ] No hardcoded values or secrets

## Svelte 5 Compliance
- [ ] Uses proper runes syntax ($state, $derived, $effect)
- [ ] No legacy reactivity patterns used
- [ ] Component props properly declared
- [ ] Event handlers use new syntax

## Database Changes
- [ ] Database migrations included (if applicable)
- [ ] RLS policies updated (if applicable)
- [ ] Type definitions updated (if applicable)
- [ ] Supabase service methods updated (if applicable)

## Screenshots/Videos
If applicable, add screenshots or videos demonstrating the changes.

## Deployment Notes
Any special considerations for deployment:
- [ ] Requires database migration
- [ ] Requires environment variable updates
- [ ] Requires dependency updates
- [ ] No special deployment requirements

## Checklist
- [ ] I have performed a self-review of my own code
- [ ] I have commented my code, particularly in hard-to-understand areas
- [ ] I have made corresponding changes to the documentation
- [ ] My changes generate no new warnings
- [ ] I have added tests that prove my fix is effective or that my feature works
- [ ] New and existing unit tests pass locally with my changes
- [ ] Any dependent changes have been merged and published

---
*This PR will be automatically reviewed by Claude Code Assistant*
</file>

<file path=".github/workflows/ci.yml">
name: Continuous Integration

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  lint-and-typecheck:
    name: Lint and Type Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
            
      - name: Install dependencies
        run: npm ci
        
      - name: Run ESLint
        run: npm run lint
        continue-on-error: true
        
      - name: Upload ESLint results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: eslint-results
          path: |
            eslint-output.txt
          if-no-files-found: ignore
          
      - name: Run TypeScript type checking
        run: npm run check
        
      - name: Run Svelte Check
        run: npm run check:svelte || true
        
      - name: Generate TypeScript coverage report
        run: |
          npx typescript-coverage-report || true
        continue-on-error: true

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
            
      - name: Install dependencies
        run: npm ci
        
      - name: Run unit tests with coverage
        run: npm run test:coverage
        
      - name: Copy coverage for Qodana
        run: |
          mkdir -p .qodana
          cp -f coverage/lcov.info .qodana/ || true
          cp -f coverage/coverage-final.json .qodana/ || true
          cp -f coverage/coverage-summary.json .qodana/ || true
        
      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          
      - name: Upload Qodana coverage
        uses: actions/upload-artifact@v4
        with:
          name: qodana-coverage
          path: |
            .qodana/lcov.info
            .qodana/coverage-final.json
            .qodana/coverage-summary.json
            .qodana/coverage.json
          if-no-files-found: ignore
        
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/lcov.info
          fail_ci_if_error: false
          
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            coverage/
            test-results/
          if-no-files-found: ignore
          
      - name: Comment test coverage on PR
        if: github.event_name == 'pull_request'
        uses: romeovs/lcov-reporter-action@v0.3.1
        with:
          lcov-file: ./coverage/lcov.info
          github-token: ${{ secrets.GITHUB_TOKEN }}

  build:
    name: Build Project
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
            
      - name: Install dependencies
        run: npm ci
        
      - name: Build project
        run: npm run build
        
      - name: Check build output
        run: |
          if [ ! -d ".svelte-kit" ]; then
            echo "Build failed: .svelte-kit directory not found"
            exit 1
          fi
          
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-output
          path: |
            .svelte-kit/
            build/
          if-no-files-found: error

  analyze-bundle:
    name: Analyze Bundle Size
    runs-on: ubuntu-latest
    needs: build
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
            
      - name: Install dependencies
        run: npm ci
        
      - name: Analyze bundle
        run: |
          npm add -D vite-bundle-visualizer
          npm run build -- --mode analyze || true
        continue-on-error: true
        
      - name: Upload bundle analysis
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: bundle-analysis
          path: |
            stats.html
            dist/stats.json
          if-no-files-found: ignore
</file>

<file path=".github/workflows/claude.yml">
name: Claude Assistant
on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  issues:
    types: [opened, assigned]
  pull_request_review:
    types: [submitted]

jobs:
  claude-response:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - uses: anthropics/claude-code-action@beta
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          custom_instructions: |
            ## Security and Quality Checks
            
            When reviewing PRs, always perform these checks:
            
            ### 🔒 Security Checks
            - Check for hardcoded secrets (api_key, apiKey, api_secret, password, token, secret)
            - Exclude PUBLIC_ prefixed variables and test/mock files
            - Flag any sensitive data exposure risks
            
            ### 📦 Bundle Size Analysis
            - Monitor changes to bundle size
            - Warn if size increases by more than 10%
            - Suggest optimization strategies for large increases
            
            ### 🧪 Test Coverage
            - Ensure changed src/ files have corresponding .test.ts files
            - Remind to add tests for new functionality
            - Check that existing tests still pass
            
            ### 🚨 Code Quality
            - No console.log statements in production code
            - No large blocks of commented code
            - Follow TypeScript strict mode requirements
            - Use Svelte 5 runes ($state, $derived, $effect)
            - Check for proper error handling
            
            ### 📝 PR Checklist Validation
            - Ensure PR description follows template
            - Verify all checklist items are addressed
            - Check for breaking changes documentation
            
            When asked to fix issues, prioritize security > functionality > style.
</file>

<file path=".github/workflows/README.md">
# GitHub Workflows for Bug Detection and Fixing

This repository uses comprehensive GitHub Actions workflows to automatically detect, triage, and fix bugs. Here's how to use them:

## 🚀 Workflow Overview

### 1. **Continuous Integration (ci.yml)**
- **Triggers**: On push to main, PRs, and manual dispatch
- **Purpose**: Runs linting, type checking, tests, and builds the project
- **Features**:
  - ESLint with error reporting
  - TypeScript type checking
  - Unit test execution with coverage
  - Build verification
  - Bundle size analysis

### 2. **Code Quality and Security (code-quality.yml)**
- **Triggers**: Push to main, PRs, weekly schedule, manual dispatch
- **Purpose**: Deep security and quality analysis
- **Features**:
  - Dependency vulnerability scanning
  - Code duplication detection
  - Security scanning with Trivy and Snyk
  - CodeQL analysis
  - SonarCloud integration (requires setup)
  - Performance checks with Lighthouse

### 3. **Svelte-Specific Checks (svelte-checks.yml)**
- **Triggers**: On Svelte file changes
- **Purpose**: Svelte-specific linting and best practices
- **Features**:
  - Svelte 5 runes usage verification
  - Component complexity analysis
  - Accessibility checks
  - Anti-pattern detection
  - Performance analysis

### 4. **Auto-Fix Common Issues (auto-fix.yml)**
- **Triggers**: Manual dispatch, daily schedule
- **Purpose**: Automatically fix common code issues
- **Features**:
  - ESLint auto-fix
  - Prettier formatting
  - Import ordering
  - Unused import removal
  - Creates PRs with fixes

### 5. **Bug Triage (bug-triage.yml)**
- **Triggers**: On issue creation/edit
- **Purpose**: Automatically analyze and categorize bug reports
- **Features**:
  - Severity assessment
  - Affected area detection
  - Missing reproduction steps detection
  - Automatic labeling

### 6. **Comprehensive Bug Scan (comprehensive-bug-scan.yml)**
- **Triggers**: Manual dispatch, weekly schedule
- **Purpose**: Full system scan for all types of issues
- **Features**:
  - Aggregated report generation
  - Optional GitHub issue creation
  - All checks in one place

### 7. **PR Validation (pr-validation.yml)**
- **Triggers**: On pull request events
- **Purpose**: Validate PRs before merge
- **Features**:
  - Dangerous pattern detection
  - Test coverage verification
  - Breaking change detection
  - Bundle size comparison

## 📋 Required Setup

### 1. Basic Setup (No Additional Configuration)
These workflows will run with just the default `GITHUB_TOKEN`:
- CI checks
- Svelte checks
- PR validation
- Bug triage

### 2. Optional Integrations

#### For Enhanced Security Scanning:
```yaml
# Add to repository secrets:
SNYK_TOKEN: your-snyk-token
SONAR_TOKEN: your-sonarcloud-token
```

#### For Code Coverage:
```yaml
# Add to repository secrets:
CODECOV_TOKEN: your-codecov-token
```

## 🎯 How to Use

### Running Manual Scans
1. Go to Actions tab
2. Select "Comprehensive Bug Scan"
3. Click "Run workflow"
4. Optionally check "Create GitHub issues" to auto-create issues

### Triggering Auto-Fix
1. Go to Actions tab
2. Select "Auto-Fix Common Issues"
3. Click "Run workflow"
4. Review the created PR

### Understanding Reports
- **Check Marks (✅)**: Passing checks
- **Warning Signs (⚠️)**: Issues that need attention
- **Cross Marks (❌)**: Failing checks that block merge

## 🔧 Customization

### Adding Custom Checks
Edit the workflow files to add your own checks:

```yaml
- name: My Custom Check
  run: |
    # Your custom logic here
    echo "Running custom check..."
```

### Adjusting Thresholds
Many checks have configurable thresholds:

```yaml
# In code-quality.yml
if [ "$COMMENT_COUNT" -gt 20 ]; then  # Change 20 to your threshold
```

### Disabling Workflows
To disable a workflow, either:
1. Delete the workflow file
2. Add to the top of the workflow:
   ```yaml
   on:
     workflow_dispatch:  # Only manual trigger
   ```

## 🐛 Common Issues

### Workflow Not Running
- Check if workflows are enabled in Settings → Actions
- Verify file is in `.github/workflows/` directory
- Check YAML syntax is valid

### Security Scan Failures
- Some security tools require tokens
- Add required secrets to repository settings

### Auto-Fix Not Creating PRs
- Ensure the workflow has write permissions
- Check branch protection rules

## 📊 Metrics and Monitoring

View workflow performance:
1. Go to Actions tab
2. Click on a workflow
3. View "Usage" for execution time and status

## 🤝 Contributing

When adding new workflows:
1. Test locally with `act` if possible
2. Use descriptive names
3. Add documentation
4. Consider performance impact

## 📚 Additional Resources

- [GitHub Actions Documentation](https://docs.github.com/en/actions)
- [Workflow Syntax](https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions)
- [Security Hardening](https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions)
</file>

<file path=".github/workflows/sentry-release.yml">
name: Create Sentry Release

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  SENTRY_ORG: frank-cottone
  SENTRY_PROJECT: teacher-dashboard

jobs:
  create-release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - uses: actions/cache@v4
        name: Setup pnpm cache
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install

      - name: Build project
        env:
          SENTRY_RELEASE: ${{ github.sha }}
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
        run: pnpm build

      - name: Create Sentry release
        uses: getsentry/action-release@v1
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: ${{ env.SENTRY_ORG }}
          SENTRY_PROJECT: ${{ env.SENTRY_PROJECT }}
        with:
          environment: production
          version: ${{ github.sha }}
          sourcemaps: './build'
</file>

<file path=".gitignore">
node_modules

# Output
.output
.vercel
.netlify
.wrangler
/.svelte-kit
/build

# OS
.DS_Store
Thumbs.db

# Env
.env
.env.*
!.env.example
!.env.test

# Vite
vite.config.js.timestamp-*
vite.config.ts.timestamp-*

# IDE
.idea/
*.iml

# Claude settings
**/.claude/settings.local.json

# Sentry Config File
.env.sentry-build-plugin
</file>

<file path=".lighthouserc.json">
{
  "ci": {
    "collect": {
      "staticDistDir": "./build",
      "url": [
        "http://localhost/",
        "http://localhost/auth/login",
        "http://localhost/dashboard",
        "http://localhost/gradebook",
        "http://localhost/jeopardy"
      ],
      "numberOfRuns": 3,
      "settings": {
        "preset": "desktop",
        "skipAudits": ["uses-http2", "redirects-http", "uses-long-cache-ttl"]
      }
    },
    "assert": {
      "preset": "lighthouse:no-pwa",
      "assertions": {
        "categories:performance": ["error", { "minScore": 0.8 }],
        "categories:accessibility": ["error", { "minScore": 0.9 }],
        "categories:best-practices": ["error", { "minScore": 0.8 }],
        "categories:seo": ["error", { "minScore": 0.8 }],
        "first-contentful-paint": ["error", { "maxNumericValue": 2000 }],
        "interactive": ["error", { "maxNumericValue": 5000 }],
        "uses-responsive-images": "off",
        "offscreen-images": "off"
      }
    },
    "upload": {
      "target": "temporary-public-storage"
    }
  }
}
</file>

<file path=".npmrc">
auto-install-peers=false
legacy-peer-deps=true
shamefully-hoist=true
strict-peer-dependencies=false
@jsr:registry=https://npm.jsr.io
@sitnik:registry=https://npm.jsr.io

# Fix Windows/WSL permission issues
cache-dir=~/.pnpm
prefer-symlinks=false
unsafe-perm=true
</file>

<file path=".prettierignore">
# Package Managers
package-lock.json
pnpm-lock.yaml
yarn.lock
bun.lock
bun.lockb
/.vercel/
</file>

<file path=".prettierrc">
{
  "useTabs": true,
  "singleQuote": true,
  "trailingComma": "none",
  "printWidth": 100,
  "plugins": ["prettier-plugin-svelte"],
  "overrides": [
    {
      "files": "*.svelte",
      "options": {
        "parser": "svelte"
      }
    }
  ]
}
</file>

<file path="~/.config/goose/config.toml">
[providers.openai]
api_key = "${OPENAI_API_KEY}"
base_url = "https://api.openai.com/v1"
models = ["gpt-4o", "gpt-4o-mini", "gpt-4-turbo"]

[default]
provider = "openai"
model = "gpt-4o"
</file>

<file path="~/.config/goose/goose.yaml">
providers:
  openai:
    api_key: ${OPENAI_API_KEY}
    base_url: https://api.openai.com/v1
    models:
      - gpt-4o
      - gpt-4o-mini
      - gpt-4-turbo

default_provider: openai
default_model: gpt-4o

toolkits:
  - name: developer
    requires: []
</file>

<file path="~/start-goose.sh">
#!/bin/bash
# Goose startup script with proper environment configuration

export GOOSE_PROVIDER=openai
export GOOSE_MODEL=gpt-4o

# Start goose with the configured environment
goose session "$@"
</file>

<file path="CLAUDE.md">
# CLAUDE.md

This file provides guidance to Claude Code (claude.ai/code) when working with code in this repository.

## Project Overview

**Teacher Dashboard** - A comprehensive web application for educators to manage classroom activities, students, and educational games. Built with modern web technologies focusing on type safety, performance, and user experience.

### Tech Stack
- **Frontend**: SvelteKit 5, TypeScript (strict mode), Tailwind CSS
- **Backend**: Supabase (PostgreSQL + Auth)
- **Data Tables**: AG-Grid Community, Handsontable
- **Testing**: Vitest, Testing Library
- **CI/CD**: GitHub Actions, Vercel

## Code Style Guidelines

### TypeScript Standards
- **Strict Mode**: Always enabled, no implicit `any`
- **Type Imports**: Use `type` keyword for type-only imports
- **Null Handling**: Explicit null/undefined checks required
- **Type Assertions**: Avoid; prefer type guards
- **Return Types**: Explicitly type all function returns

### Svelte 5 Patterns
```typescript
// CORRECT: Use modern Svelte 5 runes
let count = $state(0);
let doubled = $derived(count * 2);
let { data, onchange } = $props<{ data: Item[], onchange?: (item: Item) => void }>();

// INCORRECT: Don't use old Svelte 4 patterns
export let data; // ❌ Use $props instead
$: doubled = count * 2; // ❌ Use $derived instead
```

### Event Handling
```typescript
// CORRECT: Use callback props
let { onclick } = $props<{ onclick?: () => void }>();

// INCORRECT: Don't use createEventDispatcher
dispatch('click'); // ❌ Use callback props
```

### Component Structure
1. Imports (grouped by type)
2. Type definitions
3. Props declaration with $props()
4. State with $state()
5. Derived values with $derived()
6. Effects with $effect()
7. Functions
8. Markup

## Review Criteria for PRs

### Must Pass
1. **Type Safety**: No TypeScript errors (run `pnpm check`)
2. **Linting**: ESLint passes (run `pnpm lint`)
3. **Tests**: All tests pass (run `pnpm test`)
4. **Build**: Production build succeeds (run `pnpm build`)

### Code Quality Checks
- [ ] Uses proper Svelte 5 patterns (runes, props)
- [ ] Follows established store patterns
- [ ] Implements proper error handling
- [ ] Includes loading states for async operations
- [ ] Uses correct Tailwind classes from our theme
- [ ] Maintains consistent file organization

### Database Changes
- [ ] Updates TypeScript types if schema changes
- [ ] Includes migration files for schema changes
- [ ] Updates model converters if needed
- [ ] Tests database operations

## Essential Commands

```bash
# Development
pnpm dev            # Start dev server (http://localhost:5173)
pnpm build          # Build for production
pnpm preview        # Preview production build

# Code Quality (MUST RUN BEFORE COMMIT)
pnpm lint           # Run ESLint
pnpm lint:fix       # Auto-fix linting issues
pnpm check          # Run svelte-check for TypeScript
pnpm validate       # Run both lint and check

# Testing
pnpm test           # Run tests with coverage
pnpm test:unit      # Run tests in watch mode
pnpm test -- path/to/file.test.ts  # Test specific file

# Database
supabase gen types typescript --local > src/lib/types/database.ts
```

## Architecture Patterns

### Service Layer Pattern
```typescript
// src/lib/services/supabaseService.ts
class SupabaseService {
  async getItems<T>(table: string): Promise<T[]> {
    try {
      const { data, error } = await supabase.from(table).select();
      if (error) throw error;
      return data || [];
    } catch (error) {
      console.error(`Error fetching from ${table}:`, error);
      return this.getFromLocalStorage(table) || [];
    }
  }
}
```

### Store Pattern
```typescript
// Consistent store pattern with TypeScript
function createStore() {
  const items = writable<Item[]>([]);
  const loading = writable(false);
  const dataLoaded = writable(false);
  
  async function ensureDataLoaded() {
    if (get(dataLoaded)) return;
    await loadAllData();
    dataLoaded.set(true);
  }
  
  return {
    subscribe: derived([items, loading], ([$items, $loading]) => ({
      items: $items,
      loading: $loading
    })).subscribe,
    ensureDataLoaded
  };
}
```

### Error Handling Pattern
```typescript
try {
  loading.set(true);
  const data = await supabaseService.getItems('table');
  items.set(data);
} catch (error) {
  console.error('Failed to load items:', error);
  // User-friendly error handling
  errorMessage.set('Failed to load data. Please try again.');
} finally {
  loading.set(false);
}
```

## Database Schema

### Key Tables
- `app_users` - User profiles with roles
- `students` - Student records (linked to user_id)
- `categories` - Classes/grade categories
- `assignments` - Class assignments
- `grades` - Student grades
- `log_entries` - Student observation logs (NOT observation_logs)
- `games`, `game_categories`, `questions` - Jeopardy system

### Type Generation
After database changes:
```bash
supabase gen types typescript --local > src/lib/types/database.ts
```

## Testing Guidelines

### Unit Tests
```typescript
// Follow this pattern for store tests
describe('authStore', () => {
  beforeEach(() => {
    vi.clearAllMocks();
  });
  
  it('should initialize with default state', () => {
    const state = get(authStore);
    expect(state.user).toBeNull();
    expect(state.loading).toBe(true);
  });
});
```

### Component Tests
```typescript
// Use Testing Library with Vitest
import { render, fireEvent } from '@testing-library/svelte';
import Component from './Component.svelte';

test('handles click events', async () => {
  const { getByRole } = render(Component, {
    props: { onclick: vi.fn() }
  });
  
  await fireEvent.click(getByRole('button'));
  expect(onclick).toHaveBeenCalled();
});
```

## Common Pitfalls to Avoid

### ❌ Don't Do This
```typescript
// Don't use any type
let data: any; // ❌

// Don't use old Svelte patterns
export let prop; // ❌
dispatch('event'); // ❌

// Don't ignore errors
await supabase.from('table').select(); // ❌ Handle errors

// Don't use wrong table names
from('observation_logs') // ❌ It's 'log_entries'
```

### ✅ Do This Instead
```typescript
// Use proper types
let data: StudentData; // ✅

// Use Svelte 5 patterns
let { prop } = $props(); // ✅
let { onevent } = $props(); // ✅

// Handle errors properly
const { data, error } = await supabase.from('table').select();
if (error) handleError(error); // ✅

// Use correct table names
from('log_entries') // ✅
```

## Git Workflow

### Branch Naming
- `feature/description` - New features
- `fix/description` - Bug fixes
- `docs/description` - Documentation
- `refactor/description` - Code refactoring

### Commit Messages
Follow conventional commits:
```
feat: add student import functionality
fix: correct grade calculation in gradebook
docs: update API documentation
style: fix log entries page styling
refactor: simplify auth store logic
test: add tests for grade calculations
```

## Environment Setup

### Required Environment Variables
```env
PUBLIC_SUPABASE_URL=your_supabase_url
PUBLIC_SUPABASE_ANON_KEY=your_anon_key
```

### Local Development
The project includes hardcoded development credentials in `src/lib/supabaseClient.ts` for local development only.

## Debugging Tips

1. **TypeScript Errors**: Run `pnpm check` to see all TS errors
2. **Component State**: Use Svelte DevTools browser extension
3. **Database Issues**: Check Supabase dashboard logs
4. **Build Errors**: Check `pnpm build` output carefully
5. **Test Failures**: Run `pnpm test -- --reporter=verbose`

## Performance Guidelines

1. **Lazy Loading**: Use dynamic imports for heavy components
2. **Virtual Scrolling**: AG-Grid handles this automatically
3. **Image Optimization**: Use appropriate formats and sizes
4. **Bundle Size**: Monitor with `pnpm build --analyze`
5. **State Updates**: Batch updates when possible

## Security Best Practices

1. **Never commit secrets** to the repository
2. **Use environment variables** for sensitive data
3. **Validate user input** on both client and server
4. **Use RLS policies** in Supabase for data access
5. **Sanitize HTML** when displaying user content

## When Working on This Codebase

1. **Start with**: `pnpm install && pnpm dev`
2. **Before committing**: `pnpm validate`
3. **Update types after DB changes**: `supabase gen types`
4. **Check your work**: `pnpm build && pnpm preview`
5. **Write tests**: Especially for stores and utilities

## Need Help?

- **Supabase Issues**: Check connection and RLS policies
- **TypeScript Errors**: Ensure types are properly imported
- **Svelte Warnings**: Usually about accessibility or unused CSS
- **Build Failures**: Clear `.svelte-kit` and `node_modules`

Remember: This is a production application for educators. Code quality, type safety, and user experience are paramount.
</file>

<file path="copy-coverage.sh">
#!/bin/bash

# Create .qodana directory if it doesn't exist
mkdir -p .qodana

# Copy coverage reports to Qodana directory
if [ -f "coverage/lcov.info" ]; then
  cp coverage/lcov.info .qodana/
  echo "Copied lcov.info to .qodana/"
fi

if [ -f "coverage/coverage-final.json" ]; then
  cp coverage/coverage-final.json .qodana/
  echo "Copied coverage-final.json to .qodana/"
fi

# Generate a coverage summary for Qodana
if [ -f "coverage/coverage-summary.json" ]; then
  cp coverage/coverage-summary.json .qodana/
  echo "Copied coverage-summary.json to .qodana/"
fi

echo "Coverage files copied to .qodana directory for Qodana analysis"
</file>

<file path="docs/ARCHITECTURE.md">
# SvelteKit Teacher Dashboard Architecture Documentation

## 🏗️ Architecture Overview

This is a modern SvelteKit application designed for teachers to manage their classrooms. The application uses Supabase as the backend with a flexible architecture that allows fallback to localStorage when Supabase is unavailable.

### Technology Stack

- **Frontend Framework**: SvelteKit with TypeScript
- **Backend/Database**: Supabase (PostgreSQL) with localStorage fallback
- **State Management**: Svelte stores (writable, derived)
- **Styling**: Tailwind CSS + DaisyUI components
- **Data Grid**: AG-Grid for complex data visualization
- **Icons**: Steeze UI Heroicons
- **Build Tool**: Vite
- **Package Manager**: pnpm

## 📁 Directory Structure

```
src/
├── app.css                         # Global styles and Tailwind directives
├── app.d.ts                        # TypeScript type definitions
├── app.html                        # HTML template
├── lib/
│   ├── ag-grid-modules.ts          # AG-Grid module configuration
│   ├── components/                 # Reusable Svelte components
│   │   ├── auth/                   # Authentication components
│   │   │   ├── LoginForm.svelte
│   │   │   ├── ProfileForm.svelte
│   │   │   ├── ResetPasswordForm.svelte
│   │   │   └── SignupForm.svelte
│   │   ├── ClassList.svelte
│   │   ├── FlipCard.svelte
│   │   ├── ImportWizard.svelte
│   │   ├── JeopardyTimer.svelte
│   │   ├── LoadingBounce.svelte
│   │   ├── LogEntriesDetails.svelte
│   │   ├── LogEntriesForm.svelte
│   │   ├── LogEntriesList.svelte
│   │   ├── LogEntriesSearch.svelte
│   │   ├── StudentRoster.svelte
│   │   └── TestHeadlessUI.svelte
│   ├── services/
│   │   └── supabaseService.ts      # Unified data access layer
│   ├── stores/                     # Svelte stores for state management
│   │   ├── auth.ts                 # Authentication state
│   │   ├── gradebook.ts            # Gradebook state and logic
│   │   ├── jeopardy.ts             # Jeopardy game state
│   │   └── log-entries.ts          # Log entries state
│   ├── supabaseClient.ts           # Supabase client initialization
│   ├── types/                      # TypeScript type definitions
│   │   ├── database.ts             # Database schema types
│   │   ├── gradebook.ts            # Gradebook-specific types
│   │   ├── jeopardy.ts             # Jeopardy game types
│   │   └── log-entries.ts          # Log entry types
│   └── utils/
│       ├── authGuard.ts            # Route protection utilities
│       └── modelConverters.ts      # Data transformation utilities
└── routes/                         # SvelteKit routes
    ├── +layout.svelte              # Root layout component
    ├── +layout.ts                  # Root layout load function
    ├── +page.svelte                # Landing page
    ├── auth/                       # Authentication routes
    │   ├── login/
    │   ├── reset-password/
    │   └── signup/
    ├── class-dojo-remake/          # Class behavior management
    ├── classes/                    # Class management
    ├── dashboard/                  # Main dashboard
    ├── gradebook/                  # Grade management
    ├── jeopardy/                   # Jeopardy game
    ├── lesson-planner/             # Lesson planning
    ├── log-entries/                # Student observation logs
    └── settings/                   # User settings
        └── profile/
```

## 🗃️ Database Schema

The application uses the following main tables:

### Core Tables

1. **students**
   - Student information and profiles
   - Fields: id, name, email, grade, birth_date, address, phone_number, parent_contact, notes

2. **categories**
   - Class/category definitions
   - Fields: id, name, description, color, order_index

3. **assignments**
   - Class assignments and assessments
   - Fields: id, name, max_points, category_id, due_date, description

4. **grades**
   - Student grades for assignments
   - Fields: id, student_id, assignment_id, points

5. **category_students**
   - Many-to-many relationship between categories and students
   - Fields: category_id, student_id

6. **observation_logs**
   - Teacher observations of student behavior
   - Fields: id, observer, date, student, subject, objective, observation, actions, follow_up, tags

### Game Tables

7. **games**
   - Jeopardy game definitions
   - Fields: id, name, description, settings

8. **game_categories**
   - Categories within Jeopardy games
   - Fields: id, game_id, name, order_index

9. **questions**
   - Questions for Jeopardy categories
   - Fields: id, category_id, question, answer, points, order_index

## 🔄 Data Flow Architecture

### 1. Dual Storage Strategy

The application implements a unique dual storage strategy:

- **Primary**: Supabase (when available and authenticated)
- **Fallback**: localStorage (offline mode or when Supabase is unavailable)

This is implemented through the `SupabaseService` class which provides:
- Automatic fallback to localStorage when Supabase operations fail
- Synchronization between Supabase and localStorage
- Seamless transition between online and offline modes

### 2. State Management Pattern

```typescript
// Example from gradebook store
function createGradebookStore() {
  // Primary state atoms
  const students = writable<Student[]>([]);
  const categories = writable<Category[]>([]);
  const selectedCategoryId = writable<string | null>(null);
  
  // Derived state
  const store = derived(
    [students, categories, selectedCategoryId, ...],
    ([$students, $categories, $selectedCategoryId, ...]) => {
      return {
        // State values
        students: $students,
        categories: $categories,
        
        // Computed values
        getStudentsInSelectedCategory: computed logic here,
        getAssignmentsForSelectedCategory: computed logic here
      };
    }
  );
  
  // Actions
  async function loadAllData() { ... }
  async function addStudent() { ... }
  
  return {
    subscribe: store.subscribe,
    loadAllData,
    addStudent,
    // ... other actions
  };
}
```

### 3. Authentication Flow

1. **Initial Load** (`+layout.ts`):
   - Initialize Supabase client
   - Check for existing session
   - Initialize auth store

2. **Auth Store** (`auth.ts`):
   - Manages user state
   - Handles sign in/out operations
   - Listens for auth state changes
   - Provides derived stores for authentication status

3. **Route Protection**:
   - Uses derived `isAuthenticated` store
   - Conditional rendering in layout
   - Redirect logic in page components

### 4. Component Architecture

Components are organized by feature:
- **Auth Components**: Handle user authentication flows
- **Data Display**: AG-Grid integration for complex data
- **Game Components**: Jeopardy timer, flip cards
- **Form Components**: Student forms, log entry forms

## 🔐 Security Architecture

### Authentication
- Supabase Authentication with email/password
- Session persistence across browser refreshes
- Secure token storage in cookies
- Protected routes based on authentication state

### Data Security
- Row-level security (RLS) in Supabase
- User-scoped data access
- Secure API key handling (anon key only on client)

## 🎨 UI Architecture

### Design System
- **Color Scheme**: Dark theme with monochromatic palette
- **Component Library**: DaisyUI for base components
- **Custom Theme**: Tailwind configuration with custom colors
- **Responsive Design**: Mobile-first approach with breakpoints

### Layout Structure
1. **Navigation Bar**: Top navigation with user menu
2. **Sidebar**: Collapsible sidebar for class/section navigation
3. **Main Content**: Dynamic content area
4. **Footer**: Simple footer with copyright

### Dark Theme Configuration
```typescript
// tailwind.config.ts
colors: {
  'dark-bg': '#121212',
  'dark-card': '#1E1E1E',
  'dark-accent': '#2A2A2A',
  'dark-purple': '#404040',
  'dark-lavender': '#A0A0A0',
  'dark-highlight': '#E0E0E0',
  'dark-muted': '#6E6E6E',
  'dark-border': '#333333',
  'dark-surface': '#0A0A0A',
}
```

## 🚀 Performance Optimizations

1. **Lazy Loading**:
   - Dynamic imports for Supabase client
   - Component-level code splitting
   - Route-based data loading

2. **State Optimization**:
   - Derived stores for computed values
   - Minimal re-renders with fine-grained reactivity
   - LocalStorage caching for offline performance

3. **Data Grid Performance**:
   - AG-Grid with virtual scrolling
   - Lazy loading of grid modules
   - Optimized cell renderers

## 🔌 Service Layer

### SupabaseService Architecture

The service layer provides a unified interface for data operations:

```typescript
class SupabaseService {
  // CRUD operations with automatic fallback
  async getItems<T>(table: T, options?: QueryOptions): Promise<Tables<T>[]>
  async getItemById<T>(table: T, id: string): Promise<Tables<T> | null>
  async insertItem<T>(table: T, data: Inserts<T>): Promise<Tables<T> | null>
  async updateItem<T>(table: T, id: string, data: Updates<T>): Promise<Tables<T> | null>
  async deleteItem<T>(table: T, id: string | CompositeKey): Promise<boolean>
  
  // LocalStorage helpers
  loadFromStorage<T>(key: string, defaultValue: T): T
  saveToStorage<T>(key: string, value: T): void
  
  // Auth helpers
  async getCurrentUser(): Promise<User | null>
  async signIn(email: string, password: string): Promise<AuthResponse>
}
```

### Key Features:
- Type-safe database operations
- Automatic error handling and fallback
- LocalStorage synchronization
- Composite key support for junction tables

## 🧪 Testing Strategy

1. **Unit Tests**: Store logic and utility functions
2. **Component Tests**: Individual component behavior
3. **Integration Tests**: Full user flows
4. **E2E Tests**: Critical paths through the application

## 📱 Responsive Design

The application is built with a mobile-first approach:
- Collapsible sidebar for small screens
- Touch-friendly interface elements
- Responsive data grids
- Adaptive navigation

## 🚀 Deployment

- **Platform**: Vercel (configured in `vercel.json`)
- **Environment Variables**: Supabase URL and anon key
- **Build Command**: `pnpm build`
- **Node Version**: >=18.x

## 🔄 Future Considerations

1. **Offline Sync**: Implement queue for offline operations
2. **Real-time Updates**: Utilize Supabase real-time subscriptions
3. **PWA Support**: Add service worker for offline capability
4. **Data Export**: Add CSV/PDF export functionality
5. **Multi-tenancy**: Support for multiple schools/districts
</file>

<file path="docs/CLAUDE_GITHUB_ACTIONS_SETUP.md">
# Claude Code GitHub Actions Setup Guide

This guide walks you through setting up Claude Code GitHub Actions for automated code reviews, PR management, and issue triage in your repository.

## Overview

The Claude Code GitHub Actions provide:

- **Automated Code Reviews**: Thorough code analysis on every PR
- **Interactive Assistant**: Respond to `@claude` mentions in issues and PRs
- **Issue Triage**: Automatic analysis and categorization of new issues
- **PR Management**: Validation and quality checks for pull requests
- **Documentation Sync**: Automatic documentation updates when code changes

## Prerequisites

1. **Repository Admin Access**: You must be a repository admin to configure secrets
2. **Anthropic API Key**: Get your API key from [Anthropic Console](https://console.anthropic.com/)

## Setup Instructions

### Step 1: Configure Repository Secrets

Navigate to your repository's Settings → Secrets and variables → Actions, then add:

#### Required Secrets

- **`ANTHROPIC_API_KEY`**: Your Anthropic API key from the console

> **Note**: The workflows use the default `GITHUB_TOKEN` which is automatically provided by GitHub Actions. No additional GitHub App setup is required.

#### Optional Secrets (for cloud providers)

If using AWS Bedrock:
- **`AWS_ROLE_TO_ASSUME`**: ARN of the IAM role for OIDC authentication

If using Google Vertex AI:
- **`GCP_WORKLOAD_IDENTITY_PROVIDER`**: Workload Identity Provider
- **`GCP_SERVICE_ACCOUNT`**: Service account email

### Step 2: Verify Workflows

The following workflows are now configured:

1. **`claude-assistant.yml`**: Interactive assistant for @claude mentions
2. **`claude-code-review.yml`**: Automated code reviews on PRs
3. **`claude-issue-triage.yml`**: Issue analysis and categorization
4. **`claude-pr-management.yml`**: PR validation and quality checks
5. **`claude-documentation-sync.yml`**: Documentation updates

### Step 3: Test the Setup

1. **Test Interactive Assistant**:
   - Create a new issue or PR
   - Add a comment with `@claude Please help me with this`
   - Claude should respond with analysis and suggestions

2. **Test Automated Review**:
   - Open a new pull request
   - Check that the automated review workflow runs
   - Verify that Claude posts a code review comment

3. **Test Issue Triage**:
   - Create a new issue
   - Check that Claude analyzes and categorizes it automatically

## Usage Examples

### Interactive Commands

```
@claude Can you review this function and suggest improvements?
@claude Please implement error handling for this API call
@claude What's the best way to structure this component?
@claude Can you help me write tests for this feature?
```

### Automated Features

- **Code Reviews**: Automatic analysis of all PRs to main branch
- **Issue Triage**: Categorization and priority assessment of new issues
- **Documentation Sync**: Updates to docs when code changes
- **PR Validation**: Quality checks and compliance verification

## Security Considerations

⚠️ **Important Security Notes**:

- Never commit API keys to your repository
- Review Claude's suggestions before merging
- The workflows use minimal required permissions
- All API calls are made from GitHub's secure runners

## Customization

### Modifying Tool Access

Edit the `allowed_tools` parameter in workflow files to customize what Claude can do:

```yaml
allowed_tools: "Bash(pnpm install),Bash(pnpm build),Bash(pnpm test),Edit,Write,View"
```

### Custom Instructions

Add project-specific instructions in the `custom_instructions` parameter:

```yaml
custom_instructions: |
  Always use Svelte 5 runes syntax.
  Follow the patterns in CLAUDE.md.
  Run pnpm commands instead of npm.
```

### Trigger Phrases

Change the trigger phrase from `@claude` to something else:

```yaml
trigger_phrase: "/claude"
```

## Cost Optimization

### GitHub Actions Costs
- Workflows run on GitHub-hosted runners
- Each workflow consumes GitHub Actions minutes
- See [GitHub's billing documentation](https://docs.github.com/en/billing/managing-billing-for-your-products/managing-billing-for-github-actions/about-billing-for-github-actions)

### API Costs
- Each Claude interaction consumes API tokens
- Token usage varies by task complexity
- Set appropriate `timeout_minutes` to prevent runaway workflows
- Use `max_turns` to limit conversation length

### Cost Optimization Tips
- Use specific commands to reduce API calls
- Configure appropriate timeouts
- Use GitHub's concurrency controls for parallel runs
- Monitor usage in the Anthropic Console

## Troubleshooting

### Claude Not Responding to @claude

1. Verify workflows are enabled in Actions tab
2. Ensure `ANTHROPIC_API_KEY` is set in repository secrets
3. Confirm the comment contains `@claude` (not `/claude`)
4. Check that the repository has Actions enabled

### Workflow Failures

1. Check workflow logs in the Actions tab
2. Verify all required secrets are set
3. Check API key permissions and quotas
4. Ensure the GitHub App has necessary permissions

### Authentication Errors

1. Verify API key is valid in Anthropic Console
2. Check that secrets are named correctly
3. Ensure the repository has proper permissions for GitHub Actions

## Advanced Configuration

### Using AWS Bedrock

Update workflows to use Bedrock instead of direct API:

```yaml
- name: Configure AWS Credentials
  uses: aws-actions/configure-aws-credentials@v4
  with:
    role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
    aws-region: us-west-2

- uses: anthropics/claude-code-action@beta
  with:
    use_bedrock: "true"
    anthropic_model: "anthropic.claude-3-7-sonnet-20250219-beta:0"
```

### Using Google Vertex AI

Update workflows to use Vertex AI:

```yaml
- name: Authenticate to Google Cloud
  uses: google-github-actions/auth@v2
  with:
    workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
    service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

- uses: anthropics/claude-code-action@beta
  with:
    use_vertex: "true"
    anthropic_model: "claude-3-7-sonnet@20250219"
```

## Support

For issues with the GitHub Actions:
- Check the [Claude Code Action repository](https://github.com/anthropics/claude-code-action)
- Review the [official documentation](https://docs.anthropic.com/en/docs/claude-code/github-actions)
- Contact support through the Anthropic Console

## Next Steps

1. **Monitor Usage**: Keep an eye on API usage and GitHub Actions minutes
2. **Customize Workflows**: Adjust the workflows to match your team's needs
3. **Train Your Team**: Share this guide with team members
4. **Iterate**: Refine the setup based on real-world usage

Your Claude Code GitHub Actions are now ready to enhance your development workflow!
</file>

<file path="docs/QUICK_REFERENCE.md">
# Teacher Dashboard Quick Reference Guide

## 🚀 Getting Started

### Installation
```bash
# Install dependencies
pnpm install

# Start development server
pnpm dev

# Build for production
pnpm build

# Preview production build
pnpm preview
```

### Environment Variables
Create a `.env` file:
```env
PUBLIC_SUPABASE_URL=your-supabase-url
PUBLIC_SUPABASE_ANON_KEY=your-anon-key
```

## 🗂️ Key File Locations

### Core Configuration
- `src/lib/supabaseClient.ts` - Supabase client setup
- `src/app.d.ts` - TypeScript global types
- `tailwind.config.ts` - Tailwind/DaisyUI config

### Authentication
- `src/lib/stores/auth.ts` - Auth state management
- `src/lib/components/auth/` - Auth UI components

### Data Management
- `src/lib/services/supabaseService.ts` - Data service layer
- `src/lib/stores/` - Feature-specific stores
- `src/lib/types/` - TypeScript interfaces

### UI Components
- `src/lib/components/` - Reusable components
- `src/routes/+layout.svelte` - Main layout
- `src/app.css` - Global styles

## 📊 Common Tasks

### Adding a New Feature

1. **Create Store** (`src/lib/stores/myfeature.ts`):
```typescript
import { writable, derived } from 'svelte/store';
import { supabaseService } from '$lib/services/supabaseService';

function createMyFeatureStore() {
  const items = writable<Item[]>([]);
  
  async function loadItems() {
    const data = await supabaseService.getItems('my_table');
    items.set(data);
  }
  
  async function addItem(item: NewItem) {
    const result = await supabaseService.insertItem('my_table', item);
    if (result) {
      items.update(arr => [...arr, result]);
    }
  }
  
  return {
    subscribe: items.subscribe,
    loadItems,
    addItem
  };
}

export const myFeatureStore = createMyFeatureStore();
```

2. **Create Component** (`src/lib/components/MyFeature.svelte`):
```svelte
<script lang="ts">
  import { myFeatureStore } from '$lib/stores/myfeature';
  
  const { loadItems, addItem } = myFeatureStore;
  
  onMount(() => {
    loadItems();
  });
</script>

<div>
  {#each $myFeatureStore as item}
    <div>{item.name}</div>
  {/each}
</div>
```

3. **Create Route** (`src/routes/myfeature/+page.svelte`):
```svelte
<script lang="ts">
  import MyFeature from '$lib/components/MyFeature.svelte';
</script>

<h1>My Feature</h1>
<MyFeature />
```

### Working with Supabase

#### Query Data
```typescript
// Get all items
const items = await supabaseService.getItems('table_name');

// Get item by ID
const item = await supabaseService.getItemById('table_name', 'id');

// Get with filters
const filtered = await supabaseService.getItems('table_name', {
  filters: { status: 'active' }
});
```

#### Insert Data
```typescript
const newItem = await supabaseService.insertItem('table_name', {
  name: 'New Item',
  description: 'Description'
});
```

#### Update Data
```typescript
const updated = await supabaseService.updateItem('table_name', 'id', {
  name: 'Updated Name'
});
```

#### Delete Data
```typescript
const success = await supabaseService.deleteItem('table_name', 'id');
```

### Authentication

#### Check Auth Status
```typescript
import { isAuthenticated, user } from '$lib/stores/auth';

// In component
$: console.log('Authenticated:', $isAuthenticated);
$: console.log('Current user:', $user);
```

#### Sign In
```typescript
import { authStore } from '$lib/stores/auth';

await authStore.signIn(email, password);
```

#### Sign Out
```typescript
await authStore.signOut();
```

## 🎨 Styling Guide

### Color Palette
```css
/* Dark theme colors */
--dark-bg: #121212;        /* Main background */
--dark-surface: #0A0A0A;   /* Sidebar background */
--dark-card: #1E1E1E;      /* Card backgrounds */
--dark-accent: #2A2A2A;    /* Hover states */
--dark-purple: #404040;    /* Accent color */
--dark-highlight: #E0E0E0; /* Primary text */
--dark-muted: #6E6E6E;     /* Secondary text */
--dark-border: #333333;    /* Borders */
```

### Component Classes
```svelte
<!-- Card -->
<div class="bg-dark-card rounded-xl p-6 border border-dark-border">
  <!-- content -->
</div>

<!-- Button -->
<button class="bg-dark-purple text-white px-4 py-2 rounded-lg hover:bg-dark-accent">
  Click me
</button>

<!-- Input -->
<input class="bg-dark-surface border border-dark-border rounded px-3 py-2 text-white" />
```

## 🔧 Common Patterns

### Loading State
```svelte
<script lang="ts">
  let loading = $state(false);
  
  async function handleAction() {
    loading = true;
    try {
      await performAction();
    } finally {
      loading = false;
    }
  }
</script>

{#if loading}
  <LoadingBounce />
{:else}
  <Content />
{/if}
```

### Error Handling
```svelte
<script lang="ts">
  let error = $state('');
  
  async function handleSubmit() {
    error = '';
    try {
      await submitForm();
    } catch (err) {
      error = err.message || 'An error occurred';
    }
  }
</script>

{#if error}
  <div class="alert alert-error">{error}</div>
{/if}
```

### Protected Routes
```svelte
<!-- In +layout.svelte -->
{#if $isAuthenticated}
  {@render children?.()}
{:else}
  <Redirect to="/auth/login" />
{/if}
```

### Form Handling
```svelte
<script lang="ts">
  import { enhance } from '$app/forms';
  
  let loading = $state(false);
  
  function handleSubmit() {
    loading = true;
    return async ({ update }) => {
      await update();
      loading = false;
    };
  }
</script>

<form method="POST" use:enhance={handleSubmit}>
  <input name="field" required />
  <button disabled={loading}>Submit</button>
</form>
```

## 📋 Debugging Tips

### Check Supabase Connection
```typescript
// In browser console
const { supabase } = await import('$lib/supabaseClient');
const { data, error } = await supabase.from('students').select().limit(1);
console.log({ data, error });
```

### Inspect Store State
```svelte
<script>
  import { gradebookStore } from '$lib/stores/gradebook';
  
  $: console.log('Current state:', $gradebookStore);
</script>
```

### Toggle Storage Mode
```typescript
// Switch to localStorage only
gradebookStore.setUseSupabase(false);

// Switch back to Supabase
gradebookStore.setUseSupabase(true);
```

### Check Auth State
```typescript
import { authStore } from '$lib/stores/auth';
$: console.log('Auth state:', $authStore);
```

## 🚨 Common Issues

### Supabase Connection Failed
1. Check `.env` file has correct credentials
2. Verify Supabase project is active
3. Check browser console for errors
4. Try localStorage mode as fallback

### Auth State Not Persisting
1. Check `persistSession: true` in client config
2. Clear browser storage and retry
3. Check for auth state listener setup

### Data Not Loading
1. Check network tab for API calls
2. Verify RLS policies in Supabase
3. Check store initialization
4. Try manual `loadAllData()` call

### Type Errors
1. Run `pnpm check` to verify types
2. Restart TypeScript server in VS Code
3. Check imports are correct

## 📞 Support Resources

- **Documentation**: `/docs/` folder
- **Supabase Docs**: https://supabase.com/docs
- **SvelteKit Docs**: https://kit.svelte.dev/docs
- **AG-Grid Docs**: https://www.ag-grid.com/
- **Tailwind Docs**: https://tailwindcss.com/docs
- **DaisyUI Docs**: https://daisyui.com/
</file>

<file path="docs/README.md">
# Teacher Dashboard Documentation

Welcome to the comprehensive documentation for the SvelteKit Teacher Dashboard application. This documentation covers the architecture, implementation details, and usage guidelines for the application.

## 📚 Documentation Structure

### Core Documentation

1. **[Architecture Overview](./ARCHITECTURE.md)**
   - Complete system architecture
   - Technology stack details
   - Directory structure
   - Component organization
   - State management patterns
   - Security architecture
   - Performance optimizations

2. **[Supabase Integration](./SUPABASE_INTEGRATION.md)**
   - Detailed Supabase setup
   - Authentication flow
   - Database operations
   - Dual storage strategy (Supabase + localStorage)
   - Real-time features
   - Security considerations
   - Migration strategies

3. **[Quick Reference Guide](./QUICK_REFERENCE.md)**
   - Common tasks and patterns
   - Code snippets
   - Debugging tips
   - Troubleshooting guide
   - Best practices

### Feature-Specific Guides (If available)

- [Gradebook System](./features/GRADEBOOK.md)
- [Jeopardy Game](./features/JEOPARDY.md)
- [Log Entries](./features/LOG_ENTRIES.md)

## 🎯 Key Features

### 1. Dual Storage System
- **Primary**: Supabase (PostgreSQL)
- **Fallback**: localStorage
- Automatic synchronization
- Offline capability

### 2. Authentication
- Email/password authentication
- Session persistence
- Protected routes
- User profile management

### 3. Core Modules
- **Gradebook**: Student grades and assignments
- **Class Management**: Organize students into classes
- **Jeopardy Game**: Educational game system
- **Log Entries**: Student observation tracking
- **Lesson Planner**: Course planning tools

### 4. UI/UX
- Dark theme optimized
- Responsive design
- AG-Grid integration
- DaisyUI components
- Custom design system

## 🚀 Getting Started

### Prerequisites
- Node.js >=18.x
- pnpm package manager
- Supabase account (optional)

### Quick Start
```bash
# Clone the repository
git clone [repository-url]

# Install dependencies
pnpm install

# Set up environment variables
cp .env.example .env
# Edit .env with your Supabase credentials

# Start development server
pnpm dev
```

### Key Configuration Files
- `.env` - Environment variables
- `tailwind.config.ts` - Styling configuration
- `vite.config.ts` - Build configuration
- `tsconfig.json` - TypeScript configuration

## 🏗️ Architecture Highlights

### State Management
- Svelte stores for reactive state
- Derived stores for computed values
- Service layer for data operations

### Component Structure
```
src/lib/components/
├── auth/          # Authentication components
├── gradebook/     # Gradebook-specific components
├── common/        # Shared components
└── layouts/       # Layout components
```

### Data Flow
1. **User Action** → Component
2. **Component** → Store Action
3. **Store** → Service Layer
4. **Service** → Supabase/localStorage
5. **Response** → Store Update
6. **Store** → Component (reactive)

## 📋 Development Guidelines

### Code Style
- TypeScript for type safety
- Svelte 5 syntax (runes)
- Consistent naming conventions
- Component-based architecture

### Best Practices
1. Use type-safe database operations
2. Handle errors gracefully
3. Implement loading states
4. Optimize for offline usage
5. Follow accessibility guidelines

### Testing Strategy
- Unit tests for stores and utilities
- Component testing with Vitest
- E2E testing for critical paths
- Manual testing checklist

## 🔧 Common Tasks

### Adding a New Feature
1. Create database schema
2. Add TypeScript types
3. Create service methods
4. Implement store logic
5. Build UI components
6. Add routes
7. Update navigation

### Debugging
- Browser DevTools for network inspection
- Svelte DevTools for state inspection
- Console logging for quick debugging
- Error boundaries for production

## 📞 Support & Resources

### Internal Resources
- Source code documentation
- Code comments
- Type definitions
- Example implementations

### External Resources
- [SvelteKit Documentation](https://kit.svelte.dev)
- [Supabase Documentation](https://supabase.com/docs)
- [Tailwind CSS Documentation](https://tailwindcss.com/docs)
- [AG-Grid Documentation](https://www.ag-grid.com/)

## 🤝 Contributing

### Development Workflow
1. Create feature branch
2. Implement changes
3. Write/update tests
4. Update documentation
5. Submit pull request

### Code Review Checklist
- [ ] TypeScript types are correct
- [ ] Error handling is implemented
- [ ] Loading states are shown
- [ ] Documentation is updated
- [ ] Tests are passing

## 📝 License

[Your License Here]

---

For detailed information on any topic, please refer to the specific documentation files linked above.
</file>

<file path="docs/SENTRY_SETUP.md">
# Sentry Setup Guide

## Overview

This project is configured with Sentry for error tracking and release management.

## Features

- ✅ Client-side error tracking
- ✅ Server-side error tracking
- ✅ **Performance monitoring** with automatic instrumentation
- ✅ **Custom transaction tracking** for API calls and database operations
- ✅ **Web Vitals monitoring** (LCP, FID, CLS, INP)
- ✅ **User interaction tracking** (clicks, navigation)
- ✅ **Long task detection** (>50ms)
- ✅ Source map uploads
- ✅ Release tracking
- ✅ Environment-specific configuration
- ✅ Session replay (10% sample rate)
- ✅ **Profiling** for function-level performance data

## Configuration

### Environment Variables

Add these to your `.env` file:

```bash
# Required for source map uploads
SENTRY_AUTH_TOKEN=your_sentry_auth_token

# Optional - will be auto-detected from deployment environment
SENTRY_RELEASE=your-release-name
```

### GitHub Secrets

For the GitHub Actions workflow to work, add these secrets to your repository:

1. Go to Settings → Secrets and variables → Actions
2. Add `SENTRY_AUTH_TOKEN` with your Sentry auth token

To get a Sentry auth token:
1. Go to https://sentry.io/settings/account/api/auth-tokens/
2. Create a new token with these scopes:
   - `project:releases`
   - `org:read`
   - `project:write`

## Usage

### Local Development

Errors are automatically captured in development mode with full stack traces.

### Creating a Release

1. **Manual Release**:
   ```bash
   pnpm run release
   ```
   This will validate, build, and create a Sentry release with source maps.

2. **Automatic Release** (via GitHub Actions):
   - Push to main branch
   - GitHub Action will automatically create a release

3. **Vercel Deployment**:
   - Releases are automatically created using the Git commit SHA

### Testing Sentry

Visit `/test-sentry` to trigger test errors and verify your setup.

### Performance Monitoring

The setup includes:
- **Automatic instrumentation** for page loads, route changes, and API calls
- **Custom tracking utilities** in `src/lib/utils/performance.ts`
- **Database operation tracking** with timing and metadata
- **User interaction breadcrumbs** for debugging
- **Web Vitals** monitoring for Core Web Vitals

### Using Custom Performance Tracking

```typescript
import { trackAsyncOperation, trackDatabaseOperation, trackUserInteraction } from '$lib/utils/performance';

// Track API calls
await trackAsyncOperation('api-call', async () => {
  return await fetch('/api/data');
}, { 'api.endpoint': '/api/data' });

// Track database operations
await trackDatabaseOperation('users', 'select', async () => {
  return await supabase.from('users').select('*');
});

// Track user interactions
trackUserInteraction('click', 'submit-button');
```

## Release Naming

Releases are named using this pattern:
- Production: `teacher-dashboard@{git-commit-sha}`
- Local builds: `teacher-dashboard@{version}-{short-sha}`
- Development: `development`

## Viewing Releases

View your releases at:
https://sentry.io/organizations/frank-cottone/releases/

## Troubleshooting

### Source Maps Not Working

1. Ensure `SENTRY_AUTH_TOKEN` is set correctly
2. Check that the release name matches between build and runtime
3. Verify source maps are being uploaded (check build logs)

### Errors Not Appearing

1. Check your DSN is correct in hooks files
2. Verify Sentry initialization in both client and server hooks
3. Check browser console for any Sentry errors
4. Try clearing browser cache

### Release Not Created

1. Ensure you have the correct org and project names in `vite.config.ts`
2. Verify your auth token has the correct permissions
3. Check build logs for any upload errors
</file>

<file path="docs/SUPABASE_INTEGRATION.md">
# Supabase Integration Documentation

## Overview

This document details the Supabase integration in the SvelteKit Teacher Dashboard application. The implementation provides a robust dual-storage system with Supabase as the primary database and localStorage as a fallback mechanism.

## Architecture

### 1. Client Initialization

The Supabase client is initialized in `src/lib/supabaseClient.ts`:

```typescript
import { createClient } from '@supabase/supabase-js';

export const supabase = createClient(
  'https://yutlcpluuhjxwudfathv.supabase.co', 
  'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...',
  {
    db: { schema: 'public' },
    auth: {
      persistSession: true,
      autoRefreshToken: true
    }
  }
);
```

### 2. Service Layer Pattern

The application uses a service layer pattern implemented in `src/lib/services/supabaseService.ts`:

```typescript
export class SupabaseService {
  private useSupabase: boolean;
  private readonly storagePrefix: string;

  // Generic CRUD operations with fallback
  async getItems<T>(table: T, options?: QueryOptions): Promise<Tables<T>[]>
  async getItemById<T>(table: T, id: string): Promise<Tables<T> | null>
  async insertItem<T>(table: T, data: Inserts<T>): Promise<Tables<T> | null>
  async updateItem<T>(table: T, id: string, data: Updates<T>): Promise<Tables<T> | null>
  async deleteItem<T>(table: T, id: string | CompositeKey): Promise<boolean>
}
```

## Authentication Flow

### 1. Auth Store (`src/lib/stores/auth.ts`)

The auth store manages the authentication state:

```typescript
function createAuthStore() {
  const user = writable<User | null>(null);
  const session = writable<AuthSession | null>(null);
  const loading = writable(true);
  const isAuthenticated = derived(user, ($user) => !!$user);

  async function initialize() {
    // Check existing session on load
    const { data } = await supabase.auth.getSession();
    if (data?.session) {
      session.set(data.session);
      user.set(data.session.user);
    }
    
    // Listen for auth state changes
    supabase.auth.onAuthStateChange((event, newSession) => {
      if (newSession) {
        session.set(newSession);
        user.set(newSession.user);
      } else {
        session.set(null);
        user.set(null);
      }
    });
  }

  // Auth methods
  async function signIn(email: string, password: string) { ... }
  async function signUp(email: string, password: string, userData: any) { ... }
  async function signOut() { ... }
  async function resetPassword(email: string) { ... }
}
```

### 2. Root Layout Integration

The authentication state is initialized in the root layout:

```typescript
// src/routes/+layout.ts
import { authStore } from '$lib/stores/auth';
import { initializeDB } from '$lib/supabaseClient';

if (typeof window !== 'undefined') {
  initializeDB();
  authStore.initialize();
}
```

### 3. Component Integration

Auth components interact with the auth store:

```svelte
<!-- src/lib/components/auth/LoginForm.svelte -->
<script lang="ts">
  import { authStore } from '$lib/stores/auth';
  
  async function handleSubmit() {
    try {
      await authStore.signIn(email, password);
      // Success - auth store handles navigation
    } catch (err) {
      error = err.message;
    }
  }
</script>
```

## Data Management

### 1. Store Pattern

Stores follow a consistent pattern with Supabase integration:

```typescript
function createGradebookStore() {
  // State
  const students = writable<Student[]>([]);
  const categories = writable<Category[]>([]);
  
  // Load data from Supabase or localStorage
  async function loadAllData() {
    try {
      const studentsData = await gradebookService.getItems('students');
      const categoriesData = await gradebookService.getItems('categories');
      
      // Transform and set data
      students.set(studentsData.map(transformStudent));
      categories.set(categoriesData.map(transformCategory));
    } catch (err) {
      error.set(err.message);
    }
  }
  
  // CRUD operations
  async function addStudent(name: string) {
    const result = await gradebookService.insertItem('students', { name });
    if (result) {
      students.update(arr => [...arr, transformStudent(result)]);
    }
  }
}
```

### 2. Type Safety

The integration maintains full type safety with generated types:

```typescript
// src/lib/types/database.ts
export interface Database {
  public: {
    Tables: {
      students: {
        Row: { id: string; name: string; ... }
        Insert: { id?: string; name: string; ... }
        Update: { id?: string; name?: string; ... }
      }
      // ... other tables
    }
  }
}
```

### 3. Data Transformation

Data is transformed between database and application formats:

```typescript
// src/lib/utils/modelConverters.ts
export function dbStudentToAppStudent(dbStudent: Tables<'students'>): Student {
  return {
    id: dbStudent.id,
    name: dbStudent.name,
    email: dbStudent.email || '',
    // ... other fields
  };
}
```

## Dual Storage Strategy

### 1. Fallback Mechanism

The service layer automatically falls back to localStorage:

```typescript
public async getItems<T>(table: T): Promise<Tables<T>[]> {
  if (this.useSupabase) {
    try {
      const { data, error } = await supabase.from(table).select();
      if (error) throw error;
      return data;
    } catch (err) {
      // Fallback to localStorage
      return this.loadFromStorage<Tables<T>[]>(`${String(table)}`, []);
    }
  } else {
    // Direct localStorage usage
    return this.loadFromStorage<Tables<T>[]>(`${String(table)}`, []);
  }
}
```

### 2. Synchronization

Data is synchronized between Supabase and localStorage:

```typescript
public async insertItem<T>(table: T, data: Inserts<T>): Promise<Tables<T> | null> {
  if (this.useSupabase) {
    try {
      const { data: insertedData, error } = await supabase
        .from(table)
        .insert(data)
        .select()
        .single();
      
      if (error) throw error;
      
      // Also update localStorage
      const existingItems = this.loadFromStorage<Tables<T>[]>(`${String(table)}`, []);
      this.saveToStorage(`${String(table)}`, [...existingItems, insertedData]);
      
      return insertedData;
    } catch (err) {
      // Fallback to localStorage only
      return this.insertLocalOnly(table, data);
    }
  }
}
```

### 3. Mode Switching

Users can toggle between Supabase and localStorage:

```typescript
function setUseSupabase(value: boolean): void {
  useSupabase.set(value);
  gradebookService.setUseSupabase(value);
  if (value) {
    // Reload data from Supabase
    void loadAllData();
  }
}
```

## Security Considerations

### 1. Row Level Security (RLS)

Tables should have appropriate RLS policies:

```sql
-- Example RLS policy for students table
CREATE POLICY "Users can view their own students"
ON students FOR SELECT
USING (auth.uid() = user_id);

CREATE POLICY "Users can insert their own students"
ON students FOR INSERT
WITH CHECK (auth.uid() = user_id);
```

### 2. Authentication Guards

Routes can be protected using the auth state:

```svelte
<!-- src/routes/+layout.svelte -->
{#if $isAuthenticated}
  <AuthenticatedContent />
{:else}
  <LoginPrompt />
{/if}
```

### 3. Secure API Keys

Only the anon key is exposed to the client. Row Level Security ensures data access control.

## Performance Optimizations

### 1. Lazy Loading

Supabase client is imported dynamically:

```typescript
async function signIn(email: string, password: string) {
  const { supabase } = await import('$lib/supabaseClient');
  // Use supabase client
}
```

### 2. Batch Operations

Multiple related operations can be batched:

```typescript
async function loadAllData() {
  const [students, categories, assignments] = await Promise.all([
    gradebookService.getItems('students'),
    gradebookService.getItems('categories'),
    gradebookService.getItems('assignments')
  ]);
}
```

### 3. Caching Strategy

LocalStorage acts as a cache for offline performance:

```typescript
// Check localStorage first for immediate UI update
const cachedData = this.loadFromStorage(key, []);
if (cachedData.length > 0) {
  updateUI(cachedData);
}

// Then fetch fresh data from Supabase
const freshData = await this.fetchFromSupabase(key);
updateUI(freshData);
```

## Error Handling

### 1. Graceful Degradation

Errors are caught and the app continues with localStorage:

```typescript
try {
  const result = await supabase.from(table).select();
  return result.data;
} catch (error) {
  console.error(`Supabase error for ${table}:`, error);
  return this.loadFromStorage(table, []);
}
```

### 2. User Feedback

Error states are communicated to users:

```typescript
const error = writable<string | null>(null);

try {
  await performOperation();
} catch (err) {
  error.set(err.message || 'An error occurred');
}
```

## Real-time Features (Future)

The architecture supports real-time subscriptions:

```typescript
// Subscribe to changes
const subscription = supabase
  .channel('db-changes')
  .on('postgres_changes', 
    { event: '*', schema: 'public', table: 'students' },
    (payload) => {
      // Update local state
      students.update(current => updateWithPayload(current, payload));
    }
  )
  .subscribe();

// Cleanup
onDestroy(() => {
  subscription.unsubscribe();
});
```

## Migration Strategy

### 1. From localStorage to Supabase

```typescript
async function migrateToSupabase() {
  const localData = this.loadFromStorage('students', []);
  
  for (const item of localData) {
    await supabase.from('students').upsert(item);
  }
}
```

### 2. Schema Updates

Use Supabase migrations for schema changes:

```sql
-- Example migration
ALTER TABLE students 
ADD COLUMN school_id UUID REFERENCES schools(id);
```

## Debugging

### 1. Enable Debug Mode

```typescript
if (import.meta.env.DEV) {
  const { data, error } = await supabase.from(table).select();
  console.log(`Supabase ${table} query:`, { data, error });
}
```

### 2. Network Monitoring

Monitor Supabase requests in browser DevTools Network tab.

### 3. State Inspection

Use Svelte DevTools to inspect store states.

## Best Practices

1. **Always handle offline scenarios**: Design with offline-first in mind
2. **Use type safety**: Leverage TypeScript types for all database operations
3. **Implement proper error boundaries**: Catch and handle errors gracefully
4. **Optimize queries**: Use select columns and proper filters
5. **Cache strategically**: Balance between fresh data and performance
6. **Secure sensitive data**: Never expose sensitive data to the client
7. **Monitor usage**: Keep track of Supabase quotas and limits
8. **Document RLS policies**: Maintain clear documentation of security rules
</file>

<file path="docs/TAILWIND_CSS_QUICK_REFERENCE.md">
# Tailwind CSS Quick Reference

## Installation

```bash
npm install -D tailwindcss postcss autoprefixer
npx tailwindcss init -p
```

```css
/* app.css */
@tailwind base;
@tailwind components;
@tailwind utilities;
```

```js
// tailwind.config.js
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: ["./src/**/*.{html,js,svelte,ts}"],
  theme: {
    extend: {},
  },
  plugins: [],
}
```

## Layout

```html
<!-- Display -->
<div class="block">Block</div>
<div class="inline">Inline</div>
<div class="inline-block">Inline-block</div>
<div class="flex">Flex</div>
<div class="grid">Grid</div>
<div class="hidden">Hidden</div>

<!-- Position -->
<div class="static">Static</div>
<div class="relative">Relative</div>
<div class="absolute">Absolute</div>
<div class="fixed">Fixed</div>
<div class="sticky">Sticky</div>

<!-- Position Placement -->
<div class="top-0">Top 0</div>
<div class="right-0">Right 0</div>
<div class="bottom-0">Bottom 0</div>
<div class="left-0">Left 0</div>
<div class="inset-0">All sides 0</div>

<!-- Z-Index -->
<div class="z-0">z-0</div>
<div class="z-10">z-10</div>
<div class="z-50">z-50</div>
```

## Flexbox

```html
<!-- Direction -->
<div class="flex flex-row">Row (default)</div>
<div class="flex flex-col">Column</div>
<div class="flex flex-row-reverse">Row reverse</div>
<div class="flex flex-col-reverse">Column reverse</div>

<!-- Wrap -->
<div class="flex flex-wrap">Wrap</div>
<div class="flex flex-nowrap">No wrap</div>

<!-- Justify Content (main axis) -->
<div class="flex justify-start">Start</div>
<div class="flex justify-center">Center</div>
<div class="flex justify-end">End</div>
<div class="flex justify-between">Space between</div>
<div class="flex justify-around">Space around</div>
<div class="flex justify-evenly">Space evenly</div>

<!-- Align Items (cross axis) -->
<div class="flex items-start">Start</div>
<div class="flex items-center">Center</div>
<div class="flex items-end">End</div>
<div class="flex items-stretch">Stretch</div>
<div class="flex items-baseline">Baseline</div>

<!-- Gap -->
<div class="flex gap-4">1rem gap</div>
<div class="flex gap-x-4">1rem horizontal gap</div>
<div class="flex gap-y-4">1rem vertical gap</div>

<!-- Child Flex -->
<div class="flex-1">Flex grow/shrink</div>
<div class="flex-auto">Auto sizing</div>
<div class="flex-none">No grow/shrink</div>
<div class="grow">Grow</div>
<div class="grow-0">Don't grow</div>
<div class="shrink">Shrink</div>
<div class="shrink-0">Don't shrink</div>
```

## Grid

```html
<!-- Grid Template Columns -->
<div class="grid grid-cols-1">1 column</div>
<div class="grid grid-cols-3">3 columns</div>
<div class="grid grid-cols-12">12 columns</div>
<div class="grid grid-cols-[200px_1fr_2fr]">Custom columns</div>

<!-- Grid Column Span -->
<div class="col-span-1">Span 1</div>
<div class="col-span-3">Span 3</div>
<div class="col-span-full">Full width</div>
<div class="col-start-2 col-end-4">From 2 to 4</div>

<!-- Grid Template Rows -->
<div class="grid grid-rows-3">3 rows</div>
<div class="grid grid-rows-[200px_1fr_auto]">Custom rows</div>

<!-- Grid Row Span -->
<div class="row-span-1">Span 1 row</div>
<div class="row-span-3">Span 3 rows</div>
<div class="row-start-2 row-end-4">From row 2 to 4</div>

<!-- Grid Gap -->
<div class="grid gap-4">1rem gap</div>
<div class="grid gap-x-4">1rem horizontal gap</div>
<div class="grid gap-y-4">1rem vertical gap</div>
```

## Spacing

```html
<!-- Padding -->
<div class="p-4">All sides</div>
<div class="pt-4">Top</div>
<div class="pr-4">Right</div>
<div class="pb-4">Bottom</div>
<div class="pl-4">Left</div>
<div class="px-4">Horizontal</div>
<div class="py-4">Vertical</div>

<!-- Margin -->
<div class="m-4">All sides</div>
<div class="mt-4">Top</div>
<div class="mr-4">Right</div>
<div class="mb-4">Bottom</div>
<div class="ml-4">Left</div>
<div class="mx-4">Horizontal</div>
<div class="my-4">Vertical</div>
<div class="mx-auto">Horizontal center</div>

<!-- Space Between -->
<div class="space-x-4">Horizontal space</div>
<div class="space-y-4">Vertical space</div>
```

## Sizing

```html
<!-- Width -->
<div class="w-0">0</div>
<div class="w-1">0.25rem</div>
<div class="w-4">1rem</div>
<div class="w-16">4rem</div>
<div class="w-1/2">50%</div>
<div class="w-1/3">33.33%</div>
<div class="w-full">100%</div>
<div class="w-screen">100vw</div>
<div class="w-min">min-content</div>
<div class="w-max">max-content</div>
<div class="w-fit">fit-content</div>
<div class="w-auto">auto</div>
<div class="w-[500px]">500px</div>

<!-- Height -->
<div class="h-0">0</div>
<div class="h-1">0.25rem</div>
<div class="h-4">1rem</div>
<div class="h-16">4rem</div>
<div class="h-1/2">50%</div>
<div class="h-full">100%</div>
<div class="h-screen">100vh</div>
<div class="h-min">min-content</div>
<div class="h-max">max-content</div>
<div class="h-fit">fit-content</div>
<div class="h-auto">auto</div>
<div class="h-[500px]">500px</div>

<!-- Width & Height Together -->
<div class="size-4">1rem square</div>
<div class="size-16">4rem square</div>
<div class="size-full">100% square</div>
<div class="size-[200px]">200px square</div>

<!-- Min/Max -->
<div class="min-w-0">min-width: 0</div>
<div class="min-h-screen">min-height: 100vh</div>
<div class="max-w-md">max-width: 28rem</div>
<div class="max-h-screen">max-height: 100vh</div>
```

## Typography

```html
<!-- Font Family -->
<p class="font-sans">Sans-serif</p>
<p class="font-serif">Serif</p>
<p class="font-mono">Monospace</p>

<!-- Font Size -->
<p class="text-xs">Extra small</p>
<p class="text-sm">Small</p>
<p class="text-base">Base</p>
<p class="text-lg">Large</p>
<p class="text-xl">Extra large</p>
<p class="text-2xl">2xl</p>
<p class="text-[32px]">Custom size</p>

<!-- Font Weight -->
<p class="font-thin">Thin</p>
<p class="font-normal">Normal</p>
<p class="font-medium">Medium</p>
<p class="font-semibold">Semibold</p>
<p class="font-bold">Bold</p>
<p class="font-black">Black</p>

<!-- Text Color -->
<p class="text-black">Black</p>
<p class="text-white">White</p>
<p class="text-blue-500">Blue-500</p>
<p class="text-[#1a2b3c]">Custom color</p>

<!-- Text Alignment -->
<p class="text-left">Left</p>
<p class="text-center">Center</p>
<p class="text-right">Right</p>
<p class="text-justify">Justify</p>

<!-- Line Height -->
<p class="leading-none">None</p>
<p class="leading-tight">Tight</p>
<p class="leading-normal">Normal</p>
<p class="leading-loose">Loose</p>
<p class="text-lg/7">text-lg with line height 1.75rem</p>

<!-- Letter Spacing -->
<p class="tracking-tighter">Tighter</p>
<p class="tracking-normal">Normal</p>
<p class="tracking-wider">Wider</p>

<!-- Text Decoration -->
<p class="underline">Underline</p>
<p class="line-through">Line through</p>
<p class="no-underline">No underline</p>

<!-- Text Transform -->
<p class="uppercase">Uppercase</p>
<p class="lowercase">Lowercase</p>
<p class="capitalize">Capitalize</p>
<p class="normal-case">Normal case</p>
```

## Colors & Backgrounds

```html
<!-- Text Color -->
<p class="text-blue-500">Blue text</p>
<p class="text-red-700">Dark red text</p>

<!-- Background Color -->
<div class="bg-green-200">Light green bg</div>
<div class="bg-purple-600">Purple bg</div>

<!-- Opacity -->
<div class="text-blue-500/75">75% opacity text</div>
<div class="bg-black/50">50% opacity bg</div>

<!-- Gradient -->
<div class="bg-gradient-to-r from-cyan-500 to-blue-500">Gradient</div>
<div class="bg-gradient-to-tr from-indigo-500 via-purple-500 to-pink-500">3-color gradient</div>
```

## Borders

```html
<!-- Border Width -->
<div class="border">All sides (1px)</div>
<div class="border-2">All sides (2px)</div>
<div class="border-t">Top</div>
<div class="border-r">Right</div>
<div class="border-b">Bottom</div>
<div class="border-l">Left</div>
<div class="border-[3px]">Custom width</div>

<!-- Border Color -->
<div class="border border-blue-500">Blue border</div>
<div class="border border-[#ff00cc]">Custom color</div>

<!-- Border Style -->
<div class="border border-solid">Solid</div>
<div class="border border-dashed">Dashed</div>
<div class="border border-dotted">Dotted</div>
<div class="border border-double">Double</div>

<!-- Border Radius -->
<div class="rounded">Small radius (0.25rem)</div>
<div class="rounded-md">Medium radius (0.375rem)</div>
<div class="rounded-lg">Large radius (0.5rem)</div>
<div class="rounded-xl">Extra large radius (0.75rem)</div>
<div class="rounded-2xl">2xl radius (1rem)</div>
<div class="rounded-full">Full radius (9999px)</div>
<div class="rounded-[12px]">Custom radius</div>

<!-- Specific Corners -->
<div class="rounded-t-lg">Top corners</div>
<div class="rounded-r-lg">Right corners</div>
<div class="rounded-b-lg">Bottom corners</div>
<div class="rounded-l-lg">Left corners</div>
<div class="rounded-tl-lg">Top left corner</div>
<div class="rounded-tr-lg">Top right corner</div>
<div class="rounded-bl-lg">Bottom left corner</div>
<div class="rounded-br-lg">Bottom right corner</div>
```

## Effects & Filters

```html
<!-- Shadows -->
<div class="shadow-sm">Small shadow</div>
<div class="shadow">Default shadow</div>
<div class="shadow-md">Medium shadow</div>
<div class="shadow-lg">Large shadow</div>
<div class="shadow-xl">Extra large shadow</div>
<div class="shadow-2xl">2XL shadow</div>
<div class="shadow-inner">Inner shadow</div>
<div class="shadow-none">No shadow</div>

<!-- Opacity -->
<div class="opacity-0">Invisible</div>
<div class="opacity-50">50% opacity</div>
<div class="opacity-100">100% opacity</div>

<!-- Blur -->
<div class="blur-none">No blur</div>
<div class="blur-sm">Small blur</div>
<div class="blur">Default blur</div>
<div class="blur-xl">Extra large blur</div>

<!-- Other Filters -->
<div class="grayscale">Grayscale</div>
<div class="invert">Invert</div>
<div class="sepia">Sepia</div>
<div class="brightness-50">50% brightness</div>
<div class="contrast-125">125% contrast</div>
<div class="hue-rotate-90">90° hue rotate</div>
<div class="saturate-150">150% saturation</div>
```

## Transitions & Animations

```html
<!-- Transition -->
<div class="transition">Default transition</div>
<div class="transition-colors">Color transition</div>
<div class="transition-opacity">Opacity transition</div>
<div class="transition-transform">Transform transition</div>
<div class="transition-all">All transition</div>

<!-- Duration -->
<div class="duration-75">75ms</div>
<div class="duration-100">100ms</div>
<div class="duration-300">300ms</div>
<div class="duration-700">700ms</div>

<!-- Timing Function -->
<div class="ease-linear">Linear</div>
<div class="ease-in">Ease in</div>
<div class="ease-out">Ease out</div>
<div class="ease-in-out">Ease in out</div>

<!-- Animation -->
<div class="animate-spin">Spinning</div>
<div class="animate-ping">Ping</div>
<div class="animate-pulse">Pulsing</div>
<div class="animate-bounce">Bouncing</div>
```

## State Variants

```html
<!-- Hover -->
<div class="hover:bg-blue-700">Hover background</div>
<div class="hover:text-white">Hover text</div>

<!-- Focus -->
<input class="focus:ring focus:ring-blue-500">Focus ring</input>

<!-- Active -->
<button class="active:bg-green-700">Active state</button>

<!-- Disabled -->
<button class="disabled:opacity-50">Disabled state</button>

<!-- Group (parent state affects children) -->
<div class="group hover:bg-blue-100">
  <span class="group-hover:text-blue-500">Changes on parent hover</span>
</div>

<!-- Peer (sibling state affects element) -->
<input class="peer border" />
<p class="peer-focus:text-blue-500">Changes on sibling focus</p>

<!-- Dark Mode -->
<div class="dark:bg-gray-800 dark:text-white">Dark mode styles</div>
```

## Responsive Design

```html
<!-- Breakpoints -->
<div class="w-full sm:w-1/2 md:w-1/3 lg:w-1/4 xl:w-1/6">
  <!-- Width changes at different breakpoints -->
</div>

<!-- Default breakpoints:
  sm: 640px and up
  md: 768px and up
  lg: 1024px and up
  xl: 1280px and up
  2xl: 1536px and up
-->

<!-- Only show on specific breakpoints -->
<div class="hidden md:block">Only on medium screens and up</div>
<div class="md:hidden">Only on small screens</div>

<!-- Container Queries -->
<div class="@container">
  <div class="flex flex-col @md:flex-row">
    <!-- Layout changes based on container width -->
  </div>
</div>
```

## Arbitrary Values

Use square brackets for custom values:

```html
<!-- Custom sizing -->
<div class="w-[762px] h-[398px]">Custom dimensions</div>

<!-- Custom colors -->
<div class="text-[#1a2b3c] bg-[rgb(255,0,127)]">Custom colors</div>

<!-- Custom spacing -->
<div class="p-[37px] m-[42px]">Custom spacing</div>

<!-- Custom transforms -->
<div class="rotate-[17deg] translate-x-[123px]">Custom transforms</div>
```

## Configuration (tailwind.config.js)

```js
/** @type {import('tailwindcss').Config} */
module.exports = {
  // Files to scan for classes
  content: ["./src/**/*.{html,js,svelte,ts}"],
  
  // Dark mode setting
  darkMode: 'class', // 'media' or 'class'
  
  // Theme customization
  theme: {
    // Overrides default values
    screens: {
      sm: '480px',
      md: '768px',
      // ...
    },
    
    // Extends default values 
    extend: {
      colors: {
        'brand': {
          light: '#f7fafc',
          DEFAULT: '#1a202c',
          dark: '#0f172a',
        }
      },
      spacing: {
        '128': '32rem',
      }
    }
  },
  
  // Add custom plugins
  plugins: [
    require('@tailwindcss/forms'),
    require('@tailwindcss/typography'),
  ],
}
```
</file>

<file path="eslint.config.ts">
import prettier from 'eslint-config-prettier';
import js from '@eslint/js';
import { includeIgnoreFile } from '@eslint/compat';
import svelte from 'eslint-plugin-svelte';
import globals from 'globals';
import { fileURLToPath } from 'node:url';
import ts from 'typescript-eslint';
import svelteConfig from './svelte.config.js';

const gitignorePath = fileURLToPath(new URL('./.gitignore', import.meta.url));

export default ts.config(
  includeIgnoreFile(gitignorePath),
  js.configs.recommended,
  ...ts.configs.recommended,
  ...svelte.configs.recommended,
  prettier,
  ...svelte.configs.prettier,
  {
    // Add explicit ignores for built directories
    ignores: [
      'dist/**',
      '.svelte-kit/**',
      'build/**',
      'coverage/**',
      'node_modules/**',
      '**/*.min.js',
    ],
  },
  {
    languageOptions: {
      globals: { ...globals.browser, ...globals.node },
    },
    rules: {
      'no-undef': 'off',
      // Using the more specific version of no-explicit-any
      '@typescript-eslint/no-explicit-any': ['warn', {
        ignoreRestArgs: true
      }],
      '@typescript-eslint/no-unused-vars': [
        'warn',
        {
          argsIgnorePattern: '^_',
          varsIgnorePattern: '^_',
          caughtErrorsIgnorePattern: '^_',
        },
      ],
      '@typescript-eslint/no-empty-object-type': 'off', // Simplified - just disable the rule
    },
  },
  {
    files: ['**/*.svelte', '**/*.svelte.ts', '**/*.svelte.js'],
    languageOptions: {
      parserOptions: {
        projectService: true,
        extraFileExtensions: ['.svelte'],
        parser: ts.parser,
        svelteConfig,
      },
    },
    rules: {
      'svelte/require-each-key': 'warn',
      'svelte/no-unused-svelte-ignore': 'warn',
      'svelte/valid-compile': 'error',
    },
  }
);
</file>

<file path="package.json">
{
  "name": "svelt-version",
  "private": true,
  "version": "0.0.1",
  "type": "module",
  "engines": {
    "node": ">=18.x"
  },
  "scripts": {
    "dev": "npx vite dev",
    "build": "vite build",
    "preview": "vite preview",
    "prepare": "svelte-kit sync",
    "check": "svelte-kit sync && svelte-check --tsconfig ./tsconfig.json",
    "check:watch": "svelte-kit sync && svelte-check --tsconfig ./tsconfig.json --watch",
    "check:svelte": "svelte-check --tsconfig ./tsconfig.json",
    "test:unit": "vitest",
    "test": "npm run test:coverage",
    "test:coverage": "vitest run --coverage",
    "lint": "eslint .",
    "lint:fix": "eslint --fix .",
    "validate": "npm run lint && npm run check",
    "format": "prettier --write \"src/**/*.{js,ts,svelte,css,html,json}\"",
    "format:check": "prettier --check \"src/**/*.{js,ts,svelte,css,html,json}\""
  },
  "devDependencies": {
    "@eslint/compat": "^1.2.9",
    "@eslint/js": "^9.26.0",
    "@sveltejs/adapter-auto": "^6.0.1",
    "@sveltejs/kit": "^2.21.1",
    "@sveltejs/vite-plugin-svelte": "^5.0.3",
    "@tailwindcss/forms": "^0.5.10",
    "@tailwindcss/typography": "^0.5.16",
    "@testing-library/jest-dom": "^6.6.3",
    "@testing-library/svelte": "^5.2.7",
    "@types/node": "^22.15.18",
    "@types/uuid": "^10.0.0",
    "@vitest/coverage-v8": "^3.1.3",
    "autoprefixer": "^10.4.21",
    "daisyui": "^4.12.24",
    "dotenv": "^16.5.0",
    "eslint": "^9.26.0",
    "eslint-config-prettier": "^10.1.5",
    "eslint-plugin-svelte": "^3.7.0",
    "globals": "^16.1.0",
    "jiti": "^1.21.0",
    "jsdom": "^24.0.0",
    "postcss": "^8.5.3",
    "prettier": "^3.5.3",
    "prettier-plugin-svelte": "^3.4.0",
    "svelte": "^5.30.1",
    "svelte-check": "^4.2.1",
    "svelte-eslint-parser": "^1.2.0",
    "tailwindcss": "^3.4.17",
    "tsx": "^4.7.1",
    "typescript": "^5.8.3",
    "typescript-eslint": "^8.32.1",
    "vite": "^6.3.5",
    "vitest": "^3.1.3"
  },
  "dependencies": {
    "@fontsource/inter": "^5.2.5",
    "@sentry/browser": "^9.22.0",
    "@sentry/profiling-node": "^9.22.0",
    "@sentry/sveltekit": "^9.22.0",
    "@supabase/supabase-js": "^2.49.4",
    "@sveltejs/adapter-vercel": "^5.7.2",
    "@vercel/analytics": "^1.5.0",
    "@vercel/speed-insights": "^1.2.0",
    "cookie": "^1.0.2",
    "handsontable": "^15.3.0",
    "lucide-svelte": "^0.511.0",
    "uuid": "^9.0.1"
  },
  "packageManager": "npm@10.2.4"
}
</file>

<file path="pnpm-workspace.yaml">
onlyBuiltDependencies:
  - core-js
  - esbuild
  - supabase
</file>

<file path="postcss.config.ts">
import _tailwindcss from 'tailwindcss';
import _autoprefixer from 'autoprefixer';

export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
};
</file>

<file path="README.md">
# Teacher Dashboard

A comprehensive web application for educators to manage their classroom activities, built with SvelteKit 5, TypeScript, and Supabase.

## 🚀 Current Status

### ✅ What's Working
- **Core Application Structure**: SvelteKit 5 with TypeScript
- **Database Connection**: Supabase PostgreSQL with proper `.env` configuration
- **Authentication System**: Complete auth flow with login, signup, and password reset
- **Database Security**: Row Level Security (RLS) enabled on all tables
- **Local Development**: WebStorm database connection configured
- **State Management**: Svelte stores with Supabase integration and localStorage fallback
- **UI Framework**: TailwindCSS with dark theme
- **Data Grid**: AG Grid integration for gradebook

### 🏗️ Current Architecture

#### Database Tables
- `app_users` - User authentication and profiles
- `students` - Student records (with `user_id` for multi-tenant support)
- `categories` - Grade categories (with `user_id` for multi-tenant support)
- `classes` - Class management (with `user_id` for multi-tenant support)
- `assignments` - Assignment tracking
- `grades` - Grade recording
- `class_students` - Junction table for class enrollment

#### Key Features Implemented
1. **Gradebook Module** - Track student grades and assignments
2. **Jeopardy Game Maker** - Create educational quiz games
3. **Observation Log** - Track student behavior and notes
4. **Authentication** - Secure login with Supabase Auth
5. **Multi-tenant Support** - Users see only their own data

## 🔧 Development Setup

### Prerequisites
- Node.js 18+
- pnpm package manager
- Supabase account
- WebStorm (optional, for database management)

### Installation
```bash
# Clone the repository
git clone [your-repo-url]

# Install dependencies
pnpm install

# Copy environment variables
cp .env.example .env

# Add your Supabase credentials to .env
PUBLIC_SUPABASE_URL=your_url_here
PUBLIC_SUPABASE_ANON_KEY=your_anon_key_here

# Run development server
pnpm dev
```

### Database Setup
1. Create tables using the SQL scripts in `/supabase/migrations/`
2. Enable RLS policies (already configured)
3. Set up WebStorm database connection using Transaction Pooler

## 🎯 Next Steps

### High Priority
1. **Student Self-Registration System**
   - Add join codes to classes
   - Create student signup flow
   - Implement approval system for class enrollment

2. **Role-Based Access Control**
   - Separate teacher and student views
   - Create `/teacher/*` and `/student/*` routes
   - Implement route guards based on user role

3. **Student Grade View**
   - Read-only interface for students
   - Show only their own grades
   - Class-specific grade filtering

### Medium Priority
1. **Data Import/Export**
   - CSV import for bulk student upload
   - Grade export functionality
   - Backup/restore capabilities

2. **Enhanced UI/UX**
   - Loading states for all data operations
   - Error handling improvements
   - Mobile responsive design

3. **Testing**
   - Unit tests for stores
   - Integration tests for auth flow
   - E2E tests for critical paths

### Nice to Have
1. **Email Notifications**
   - Grade updates
   - Assignment reminders
   - Parent communication

2. **Analytics Dashboard**
   - Class performance overview
   - Student progress tracking
   - Assignment statistics

3. **Additional Modules**
   - Lesson planner improvements
   - ClassDojo remake completion
   - Parent portal

## 🛠️ Tech Stack

- **Framework**: SvelteKit 5
- **Language**: TypeScript
- **Database**: Supabase (PostgreSQL)
- **Styling**: TailwindCSS
- **State Management**: Svelte stores
- **Data Grid**: AG Grid
- **Authentication**: Supabase Auth
- **Deployment**: Vercel

## 📝 Development Notes

### Store Pattern
All stores follow a pattern of:
1. Primary storage in Supabase
2. Fallback to localStorage
3. Optimistic UI updates
4. Error recovery

### Security Considerations
- RLS policies on all tables
- User isolation through `user_id` foreign keys
- Role-based access control (upcoming)
- Secure credential management via environment variables

## 🤝 Contributing

[Add your contributing guidelines here]

## 📄 License

[Add your license information here]
</file>

<file path="scripts/create-release.js">
#!/usr/bin/env node
import { execSync } from 'child_process';
import { readFileSync } from 'fs';

// Read package.json to get version
const packageJson = JSON.parse(readFileSync('./package.json', 'utf-8'));
const version = packageJson.version;

// Get git commit hash
const gitHash = execSync('git rev-parse --short HEAD').toString().trim();

// Create release name
const releaseName = `${packageJson.name}@${version}-${gitHash}`;

console.log(`Creating Sentry release: ${releaseName}`);

// Set environment variable for the build
process.env.SENTRY_RELEASE = releaseName;

// Run the build
console.log('Building project...');
execSync('pnpm build', { 
  stdio: 'inherit',
  env: { ...process.env, SENTRY_RELEASE: releaseName }
});

console.log(`✅ Release ${releaseName} created successfully!`);
console.log(`View releases at: https://sentry.io/organizations/frank-cottone/releases/`);
</file>

<file path="src/app.css">
/* AG Grid CSS imports are in +layout.svelte */
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  body {
    @apply bg-gradient-to-b from-bg-base to-bg-gradient text-text-base min-h-screen;
    background-attachment: fixed;
  }

  h1, h2, h3, h4, h5, h6 {
    @apply text-highlight;
  }
}

@layer components {
  .btn-primary {
    @apply bg-purple hover:bg-purple-hover text-white px-4 py-2 rounded-lg transition-all duration-300 shadow-button;
  }

  .btn-secondary {
    @apply bg-surface hover:bg-accent text-text-hover px-4 py-2 rounded-lg transition-all duration-300 shadow-button;
  }

  .card {
    @apply bg-card rounded-xl shadow-card p-6 border border-border backdrop-blur-sm;
  }

  .card-dark {
    @apply bg-card/80 backdrop-blur-sm border border-border/50 rounded-xl p-6 shadow-themed-card;
  }

  .input {
    @apply bg-surface border border-border rounded-lg px-4 py-2 focus:ring-2 focus:ring-purple focus:border-transparent outline-none transition text-text-hover placeholder-muted;
  }

  /* Navigation */
  .nav-link {
    @apply px-3 py-2 rounded-lg hover:bg-surface text-text-base hover:text-text-hover transition-colors;
  }

  .nav-link.active {
    @apply bg-purple-bg text-purple font-medium;
  }

  /* Form elements */
  .label {
    @apply block text-sm font-medium text-text-base mb-1;
  }

  .select {
    @apply bg-surface border border-border rounded-lg px-4 py-2 pr-8 appearance-none text-text-hover;
  }

  /* Tables */
  .table-container {
    @apply overflow-x-auto rounded-lg border border-border;
  }

  .table {
    @apply min-w-full divide-y divide-separator;
  }

  .table-header {
    @apply bg-surface;
  }

  .table-header-cell {
    @apply px-6 py-3 text-left text-xs font-medium text-text-base uppercase tracking-wider;
  }

  .table-body {
    @apply bg-card divide-y divide-separator;
  }

  .table-row {
    @apply hover:bg-surface transition-colors;
  }

  .table-cell {
    @apply px-6 py-4 whitespace-nowrap text-sm text-text-base;
  }
}

/* Custom gradients */
.bg-gradient-dark {
  background: radial-gradient(circle at top left, var(--tw-gradient-from) 0%, var(--tw-gradient-to) 100%);
}

.bg-gradient-card {
  background: linear-gradient(135deg, rgba(17, 24, 39, 0.8) 0%, rgba(13, 17, 32, 0.8) 100%);
  backdrop-filter: blur(10px);
}

/* Enhanced purple hover effect */
.nav-button {
  @apply text-text-base hover:text-highlight transition-all duration-300 font-medium px-3 py-2 rounded-md hover:bg-purple-bg hover:shadow-glow;
}

/* Menu item styles */
.menu-item {
  @apply flex items-center gap-3 px-3 py-2 rounded-md text-text-base transition-all duration-200 cursor-pointer hover:bg-purple-bg hover:text-highlight active:scale-[0.99];
}

.menu-item.danger {
  @apply hover:bg-error hover:text-highlight;
}

.menu-item.special {
  @apply text-purple hover:bg-purple-hover hover:text-white;
}

/* Separator */
.separator {
  @apply border-t border-separator;
}

/* AG Grid styling */
.ag-theme-material {
  --ag-background-color: var(--tw-gradient-from);
  --ag-header-background-color: var(--tw-gradient-from);
  --ag-odd-row-background-color: rgba(31, 41, 55, 0.4);
  --ag-row-hover-color: rgba(139, 92, 246, 0.1);
  --ag-selected-row-background-color: rgba(139, 92, 246, 0.2);
  --ag-font-family: 'Inter', sans-serif;
  --ag-font-size: 14px;
  --ag-border-color: var(--tw-border-opacity);
  --ag-row-border-color: var(--tw-border-opacity);
  --ag-cell-horizontal-border: var(--tw-border-opacity);
  --ag-header-foreground-color: var(--tw-text-opacity);
  --ag-foreground-color: var(--tw-text-opacity);
  --ag-secondary-foreground-color: var(--tw-text-opacity);
  --ag-disabled-foreground-color: var(--tw-text-opacity);
  --ag-input-border-color: var(--tw-border-opacity);
  --ag-input-focus-border-color: var(--tw-text-opacity);
  --ag-input-bg-color: var(--tw-bg-opacity);
  --ag-input-text-color: var(--tw-text-opacity);
  --ag-range-selection-border-color: var(--tw-text-opacity);
  --ag-range-selection-background-color: rgba(139, 92, 246, 0.1);
}

/* Button styles */
.btn {
  @apply px-4 py-2 rounded-lg transition-all duration-300 font-medium;
}

.btn-primary {
  @apply bg-purple hover:bg-purple-hover text-white shadow-button;
}

.btn-secondary {
  @apply bg-surface hover:bg-surface/80 text-text-hover shadow-button;
}

.btn-sm {
  @apply px-3 py-1.5 text-sm;
}

.btn-lg {
  @apply px-5 py-3 text-lg;
}

.btn-icon {
  @apply p-2 rounded-full;
}

.btn:disabled {
  @apply opacity-50 cursor-not-allowed;
}

/* Custom scrollbar for webkit browsers */
::-webkit-scrollbar {
  width: 8px;
  height: 8px;
}

::-webkit-scrollbar-track {
  background: rgba(31, 41, 55, 0.2);
  border-radius: 4px;
}

::-webkit-scrollbar-thumb {
  background: rgba(139, 92, 246, 0.3);
  border-radius: 4px;
}

::-webkit-scrollbar-thumb:hover {
  background: rgba(139, 92, 246, 0.5);
}
</file>

<file path="src/app.d.ts">
// See https://svelte.dev/docs/kit/types#app.d.ts
// for information about these interfaces
declare global {
  namespace App {
    // interface Error {}
    // interface Locals {}
    // interface PageData {}
    // interface PageState {}
    // interface Platform {}
  }
}

// Add environment variable declarations
declare module '$env/static/public' {
  export const PUBLIC_SUPABASE_URL: string;
  export const PUBLIC_SUPABASE_ANON_KEY: string;
}

export {};
</file>

<file path="src/app.html">
<!DOCTYPE html>
<html lang="en">
	<head>
		<meta charset="utf-8" />
		<title>Teacher Dashboard</title>
		<link rel="icon" href="%sveltekit.assets%/favicon.png" />
		<meta name="viewport" content="width=device-width, initial-scale=1" />
		%sveltekit.head%
	</head>
	<body data-sveltekit-preload-data="hover">
		<div style="display: contents">%sveltekit.body%</div>
		<script>
			// Initialize theme based on localStorage or OS preference
			const storedTheme = localStorage.getItem('theme');
			const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
			
			if (storedTheme === 'dark' || (!storedTheme && prefersDark)) {
				document.documentElement.classList.add('dark');
				document.documentElement.setAttribute('data-theme', 'dark');
			} else {
				document.documentElement.classList.remove('dark');
				document.documentElement.setAttribute('data-theme', 'light');
			}
		</script>
	</body>
</html>
</file>

<file path="src/hooks.client.ts">
import { handleErrorWithSentry, replayIntegration } from "@sentry/sveltekit";
import * as Sentry from '@sentry/sveltekit';

Sentry.init({
  dsn: 'https://2644904ccddbf49afacdccf14cae13d2@o4509381050957824.ingest.us.sentry.io/4509381155553280',
  
  environment: import.meta.env.MODE, // 'development' or 'production'
  release: import.meta.env.SENTRY_RELEASE || 'development',
  
  integrations: [
    // browserTracingIntegration is automatically added by SvelteKit
    Sentry.browserProfilingIntegration(),
    replayIntegration(),
  ],
  
  // Tracing
  tracesSampleRate: 1.0, //  Capture 100% of the transactions
  // Set 'tracePropagationTargets' to control for which URLs distributed tracing should be enabled
  tracePropagationTargets: ["localhost", /^https:\/\/yourserver\.io\/api/],
  // Set profilesSampleRate to 1.0 to profile every transaction.
  // Since profilesSampleRate is relative to tracesSampleRate,
  // the final profiling rate can be computed as tracesSampleRate * profilesSampleRate
  // For example, a tracesSampleRate of 0.5 and profilesSampleRate of 0.5 would
  // results in 25% of transactions being profiled (0.5*0.5=0.25)
  profilesSampleRate: 1.0,

  // Session Replay
  replaysSessionSampleRate: 0.1,
  replaysOnErrorSampleRate: 1.0,
});

// If you have a custom error handler, pass it to `handleErrorWithSentry`
export const handleError = handleErrorWithSentry();
</file>

<file path="src/hooks.server.ts">
import { sequence, type Handle } from "@sveltejs/kit/hooks";
import { handleErrorWithSentry, sentryHandle } from "@sentry/sveltekit";
import * as Sentry from '@sentry/sveltekit';
import { nodeProfilingIntegration } from "@sentry/profiling-node";

Sentry.init({
  dsn: 'https://2644904ccddbf49afacdccf14cae13d2@o4509381050957824.ingest.us.sentry.io/4509381155553280',
  
  environment: process.env.NODE_ENV || 'development',
  release: process.env.SENTRY_RELEASE || 'development',
  
  integrations: [
    nodeProfilingIntegration(),
  ],
  
  // Tracing must be enabled for profiling to work
  tracesSampleRate: 1.0, //  Capture 100% of the transactions
  // Set sampling rate for profiling - this is evaluated only once per SDK.init call
  profileSessionSampleRate: 1.0,
  // Trace lifecycle automatically enables profiling during active traces
  profileLifecycle: 'trace',

  // uncomment the line below to enable Spotlight (https://spotlightjs.com)
  // spotlight: import.meta.env.DEV,
});

// Custom handler to add Document-Policy header for JS profiling
const documentPolicyHandler: Handle = async ({ event, resolve }) => {
  const response = await resolve(event);
  response.headers.set('Document-Policy', 'js-profiling');
  return response;
};

// If you have custom handlers, make sure to place them after `sentryHandle()` in the `sequence` function.
export const handle = sequence(sentryHandle(), documentPolicyHandler);

// If you have a custom error handler, pass it to `handleErrorWithSentry`
export const handleError = handleErrorWithSentry();
</file>

<file path="src/lib/components/auth/LoginForm.svelte">
<script lang="ts">
  import { authStore, error as authError } from '$lib/stores/auth';
  import { goto } from '$app/navigation';
  
  let email = $state('');
  let password = $state('');
  let loading = $state(false);
  let error = $state('');
  
  $effect(() => {
    if ($authError) error = $authError;
  });
  
  async function handleSubmit(e: SubmitEvent) {
    e.preventDefault();
    if (!email || !password) {
      error = 'Please fill out all fields';
      return;
    }
    
    loading = true;
    error = '';
    
    try {
      const success = await authStore.signIn(email, password);
      if (success) goto('/dashboard');
      else if (!error) error = 'Invalid email or password';
    } catch (err) {
      error = err instanceof Error ? err.message : 'Invalid email or password';
    } finally {
      loading = false;
    }
  }
</script>

<div class="w-full max-w-md">
  <form onsubmit={handleSubmit} class="bg-surface rounded-lg px-8 pt-6 pb-8 mb-4 shadow-themed-card">
    <h2 class="text-2xl font-bold mb-6 text-center text-highlight">Sign In</h2>
    
    {#if error}
      <div class="bg-error/20 text-error px-4 py-3 rounded mb-4" role="alert">
        <p>{error}</p>
      </div>
    {/if}
    
    <div class="mb-4">
      <label class="block text-sm font-medium mb-2 text-text-base" for="email">
        Email
      </label>
      <input
        bind:value={email}
        class="input input-bordered w-full bg-surface border-border"
        id="email"
        type="email"
        placeholder="Email"
        required
      />
    </div>
    
    <div class="mb-6">
      <label class="block text-sm font-medium mb-2 text-text-base" for="password">
        Password
      </label>
      <input
        bind:value={password}
        class="input input-bordered w-full bg-surface border-border"
        id="password"
        type="password"
        placeholder="Password"
        required
      />
    </div>
    
    <div class="flex items-center justify-between">
      <button
        class="btn btn-primary w-full"
        type="submit"
        disabled={loading}
      >
        {#if loading}
          <span class="loading loading-spinner loading-md"></span>
        {:else}
          Sign In
        {/if}
      </button>
    </div>
  </form>
</div>
</file>

<file path="src/lib/components/auth/LoginForm.test.ts">
import { describe, test, expect, vi, beforeEach } from 'vitest';
import { render, screen, fireEvent, waitFor } from '@testing-library/svelte';
import LoginForm from './LoginForm.svelte';
import { authStore } from '$lib/stores/auth';

// Mock the auth store
vi.mock('$lib/stores/auth', () => ({
  authStore: {
    signIn: vi.fn(),
    resetPassword: vi.fn()
  }
}));

describe('LoginForm', () => {
  beforeEach(() => {
    vi.clearAllMocks();
  });

  test('should render login form elements', () => {
    render(LoginForm);
    
    expect(screen.getByRole('heading', { name: /sign in/i })).toBeInTheDocument();
    expect(screen.getByLabelText(/email/i)).toBeInTheDocument();
    expect(screen.getByLabelText(/password/i)).toBeInTheDocument();
    expect(screen.getByRole('button', { name: /sign in/i })).toBeInTheDocument();
    expect(screen.getByText(/don't have an account/i)).toBeInTheDocument();
    expect(screen.getByText(/forgot password/i)).toBeInTheDocument();
  });

  test('should handle successful login', async () => {
    vi.mocked(authStore.signIn).mockResolvedValue(true);
    
    render(LoginForm);
    
    const emailInput = screen.getByLabelText(/email/i);
    const passwordInput = screen.getByLabelText(/password/i);
    const submitButton = screen.getByRole('button', { name: /sign in/i });
    
    await fireEvent.input(emailInput, { target: { value: 'test@example.com' } });
    await fireEvent.input(passwordInput, { target: { value: 'password123' } });
    await fireEvent.click(submitButton);
    
    await waitFor(() => {
      expect(authStore.signIn).toHaveBeenCalledWith('test@example.com', 'password123');
    });
  });

  test('should display error on failed login', async () => {
    vi.mocked(authStore.signIn).mockResolvedValue(false);
    
    render(LoginForm);
    
    const emailInput = screen.getByLabelText(/email/i);
    const passwordInput = screen.getByLabelText(/password/i);
    const submitButton = screen.getByRole('button', { name: /sign in/i });
    
    await fireEvent.input(emailInput, { target: { value: 'test@example.com' } });
    await fireEvent.input(passwordInput, { target: { value: 'wrongpassword' } });
    await fireEvent.click(submitButton);
    
    await waitFor(() => {
      expect(screen.getByText(/invalid email or password/i)).toBeInTheDocument();
    });
  });

  test('should validate email format', async () => {
    render(LoginForm);
    
    const emailInput = screen.getByLabelText(/email/i);
    const passwordInput = screen.getByLabelText(/password/i);
    const submitButton = screen.getByRole('button', { name: /sign in/i });
    
    await fireEvent.input(emailInput, { target: { value: 'invalid-email' } });
    await fireEvent.input(passwordInput, { target: { value: 'password123' } });
    await fireEvent.click(submitButton);
    
    await waitFor(() => {
      expect(screen.getByText(/please enter a valid email/i)).toBeInTheDocument();
    });
    
    expect(authStore.signIn).not.toHaveBeenCalled();
  });

  test('should require all fields', async () => {
    render(LoginForm);
    
    const submitButton = screen.getByRole('button', { name: /sign in/i });
    await fireEvent.click(submitButton);
    
    await waitFor(() => {
      expect(screen.getByText(/please fill in all fields/i)).toBeInTheDocument();
    });
    
    expect(authStore.signIn).not.toHaveBeenCalled();
  });

  test('should disable submit button while loading', async () => {
    vi.mocked(authStore.signIn).mockImplementation(() => 
      new Promise(resolve => setTimeout(() => resolve(true), 100))
    );
    
    render(LoginForm);
    
    const emailInput = screen.getByLabelText(/email/i);
    const passwordInput = screen.getByLabelText(/password/i);
    const submitButton = screen.getByRole('button', { name: /sign in/i });
    
    await fireEvent.input(emailInput, { target: { value: 'test@example.com' } });
    await fireEvent.input(passwordInput, { target: { value: 'password123' } });
    await fireEvent.click(submitButton);
    
    expect(submitButton).toBeDisabled();
    expect(submitButton).toHaveTextContent(/signing in/i);
    
    await waitFor(() => {
      expect(submitButton).not.toBeDisabled();
    });
  });

  test('should toggle password visibility', async () => {
    render(LoginForm);
    
    const passwordInput = screen.getByLabelText(/password/i) as HTMLInputElement;
    expect(passwordInput.type).toBe('password');
    
    const toggleButton = screen.getByRole('button', { name: /show password/i });
    await fireEvent.click(toggleButton);
    
    expect(passwordInput.type).toBe('text');
    expect(toggleButton).toHaveAttribute('aria-label', 'Hide password');
    
    await fireEvent.click(toggleButton);
    expect(passwordInput.type).toBe('password');
  });

  test('should show forgot password modal', async () => {
    render(LoginForm);
    
    const forgotPasswordLink = screen.getByText(/forgot password/i);
    await fireEvent.click(forgotPasswordLink);
    
    expect(screen.getByRole('heading', { name: /reset password/i })).toBeInTheDocument();
    expect(screen.getByText(/enter your email/i)).toBeInTheDocument();
  });

  test('should handle password reset', async () => {
    vi.mocked(authStore.resetPassword).mockResolvedValue(true);
    
    render(LoginForm);
    
    // Open forgot password modal
    const forgotPasswordLink = screen.getByText(/forgot password/i);
    await fireEvent.click(forgotPasswordLink);
    
    // Find the email input in the modal
    const resetEmailInput = screen.getByPlaceholderText(/email address/i);
    const sendButton = screen.getByRole('button', { name: /send reset email/i });
    
    await fireEvent.input(resetEmailInput, { target: { value: 'reset@example.com' } });
    await fireEvent.click(sendButton);
    
    await waitFor(() => {
      expect(authStore.resetPassword).toHaveBeenCalledWith('reset@example.com');
      expect(screen.getByText(/password reset email sent/i)).toBeInTheDocument();
    });
  });

  test('should close forgot password modal', async () => {
    render(LoginForm);
    
    // Open modal
    const forgotPasswordLink = screen.getByText(/forgot password/i);
    await fireEvent.click(forgotPasswordLink);
    
    // Close modal
    const cancelButton = screen.getByRole('button', { name: /cancel/i });
    await fireEvent.click(cancelButton);
    
    await waitFor(() => {
      expect(screen.queryByRole('heading', { name: /reset password/i })).not.toBeInTheDocument();
    });
  });

  test('should link to signup page', () => {
    render(LoginForm);
    
    const signupLink = screen.getByRole('link', { name: /sign up/i });
    expect(signupLink).toHaveAttribute('href', '/auth/signup');
  });
});
</file>

<file path="src/lib/components/auth/ProfileForm.svelte">
<script lang="ts">
  import { authStore, user } from '$lib/stores/auth';
  
  let fullName = $state($user?.user_metadata?.full_name || '');
  let loading = $state(false);
  let error = $state('');
  let success = $state(false);
  
  async function handleSubmit() {
    if (!fullName) {
      error = 'Please enter your name';
      return;
    }
    
    loading = true;
    error = '';
    success = false;
    
    try {
      await authStore.updateUserProfile({
        full_name: fullName
      });
      success = true;
    } catch (err: any) {
      error = err.message || 'Failed to update profile';
    } finally {
      loading = false;
    }
  }
</script>

<div class="w-full max-w-md">
  <form onsubmit={(e) => { e.preventDefault(); handleSubmit(); }} class="bg-base-200 rounded-lg px-8 pt-6 pb-8 mb-4 shadow-md">
    <h2 class="text-2xl font-bold mb-6 text-center">Profile</h2>
    
    {#if error}
      <div class="bg-error/20 text-error px-4 py-3 rounded mb-4" role="alert">
        <p>{error}</p>
      </div>
    {/if}
    
    {#if success}
      <div class="bg-success/20 text-success px-4 py-3 rounded mb-4" role="alert">
        <p>Profile updated successfully!</p>
      </div>
    {/if}
    
    <div class="mb-4">
      <label class="block text-sm font-medium mb-2" for="email">
        Email
      </label>
      <input
        value={$user?.email || ''}
        class="input input-bordered w-full"
        id="email"
        type="email"
        disabled
      />
      <p class="text-sm text-base-content/60 mt-1">Email cannot be changed</p>
    </div>
    
    <div class="mb-6">
      <label class="block text-sm font-medium mb-2" for="fullName">
        Full Name
      </label>
      <input
        bind:value={fullName}
        class="input input-bordered w-full"
        id="fullName"
        type="text"
        placeholder="Full Name"
        required
      />
    </div>
    
    <div class="flex items-center justify-between">
      <button
        class="btn btn-primary w-full {loading ? 'loading' : ''}"
        type="submit"
        disabled={loading}
      >
        Update Profile
      </button>
    </div>
  </form>
</div>
</file>

<file path="src/lib/components/auth/ResetPasswordForm.svelte">
<script lang="ts">
  import { authStore } from '$lib/stores/auth';
  
  let email = $state('');
  let loading = $state(false);
  let error = $state('');
  let success = $state(false);
  
  async function handleSubmit() {
    if (!email) {
      error = 'Please enter your email';
      return;
    }
    
    loading = true;
    error = '';
    success = false;
    
    try {
      await authStore.resetPassword(email);
      success = true;
    } catch (err: any) {
      error = err.message || 'Failed to reset password';
    } finally {
      loading = false;
    }
  }
</script>

<div class="w-full max-w-md">
  <form onsubmit={(e) => { e.preventDefault(); handleSubmit(); }} class="bg-base-200 rounded-lg px-8 pt-6 pb-8 mb-4 shadow-md">
    <h2 class="text-2xl font-bold mb-6 text-center">Reset Password</h2>
    
    {#if error}
      <div class="bg-error/20 text-error px-4 py-3 rounded mb-4" role="alert">
        <p>{error}</p>
      </div>
    {/if}
    
    {#if success}
      <div class="bg-success/20 text-success px-4 py-3 rounded mb-4" role="alert">
        <p>We've sent a password reset link to your email.</p>
      </div>
    {/if}
    
    <div class="mb-6">
      <label class="block text-sm font-medium mb-2" for="email">
        Email
      </label>
      <input
        bind:value={email}
        class="input input-bordered w-full"
        id="email"
        type="email"
        placeholder="Enter your email"
        required
      />
    </div>
    
    <div class="flex items-center justify-between">
      <button
        class="btn btn-primary w-full {loading ? 'loading' : ''}"
        type="submit"
        disabled={loading}
      >
        Reset Password
      </button>
    </div>
    
    <div class="text-center mt-4">
      <a href="/auth/login" class="link link-hover text-sm">
        Back to login
      </a>
    </div>
  </form>
</div>
</file>

<file path="src/lib/components/auth/RoleSignupForm.svelte">
<script lang="ts">
  import { authStore } from '$lib/stores/auth';
  import { goto } from '$app/navigation';
  import type { StudentSignupData, TeacherSignupData } from '$lib/types/auth';
  import type { UserRole } from '$lib/types/database';
  
  let step: 'role' | 'details' = $state('role');
  let selectedRole: UserRole | null = $state(null);
  
  // Form fields
  let email = $state('');
  let password = $state('');
  let confirmPassword = $state('');
  let fullName = $state('');
  let joinCode = $state('');
  let schoolName = $state('');
  
  let isLoading = $state(false);
  let error = $state('');
  
  function selectRole(role: UserRole) {
    selectedRole = role;
    step = 'details';
  }
  
  async function handleSubmit(e: Event) {
    e.preventDefault();
    error = '';
    
    // Validate password match
    if (password !== confirmPassword) {
      error = 'Passwords do not match';
      return;
    }
    
    // Validate required fields
    if (!email || !password || !fullName) {
      error = 'Please fill in all required fields';
      return;
    }
    
    isLoading = true;
    
    try {
      let success = false;
      
      if (selectedRole === 'student') {
        const data: StudentSignupData = {
          email,
          password,
          fullName,
          joinCode: joinCode || undefined
        };
        success = await authStore.signUpStudent(data);
      } else if (selectedRole === 'teacher') {
        const data: TeacherSignupData = {
          email,
          password,
          fullName,
          schoolName: schoolName || undefined
        };
        success = await authStore.signUpTeacher(data);
      }
      
      if (success) {
        // Check if email verification is required
        error = 'Please check your email to verify your account';
        setTimeout(() => {
          goto('/auth/login');
        }, 3000);
      } else {
        // Get error from store
        const { error: authError } = await $authStore;
        error = authError || 'Signup failed';
      }
    } catch (err) {
      error = err instanceof Error ? err.message : 'Signup failed';
    } finally {
      isLoading = false;
    }
  }
  
  function goBack() {
    step = 'role';
    selectedRole = null;
  }
</script>

<div class="min-h-screen bg-gradient-dark flex items-center justify-center px-4">
  <div class="max-w-md w-full space-y-8">
    <div>
      <h2 class="mt-6 text-center text-3xl font-extrabold text-dark-highlight">
        Create your account
      </h2>
      <p class="mt-2 text-center text-sm text-dark-text">
        Choose your role to get started
      </p>
    </div>

    {#if step === 'role'}
      <div class="space-y-4">
        <button
          onclick={() => selectRole('teacher')}
          class="w-full flex flex-col items-center px-6 py-4 border border-dark-border rounded-lg hover:bg-dark-surface transition-colors"
        >
          <svg class="w-12 h-12 text-dark-purple-light mb-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.747 0 3.332.477 4.5 1.253v13C19.832 18.477 18.247 18 16.5 18c-1.746 0-3.332.477-4.5 1.253" />
          </svg>
          <h3 class="text-lg font-semibold text-dark-text">I'm a Teacher</h3>
          <p class="text-sm text-gray-400 text-center mt-1">
            Create and manage classes, track student progress, and create educational games
          </p>
        </button>

        <button
          onclick={() => selectRole('student')}
          class="w-full flex flex-col items-center px-6 py-4 border border-dark-border rounded-lg hover:bg-dark-surface transition-colors"
        >
          <svg class="w-12 h-12 text-dark-purple-light mb-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 14l9-5-9-5-9 5 9 5z M12 14l6.16-3.422a12.083 12.083 0 01.665 6.479A11.952 11.952 0 0012 20.055a11.952 11.952 0 00-6.824-2.998 12.078 12.078 0 01.665-6.479L12 14z" />
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 14l9-5-9-5-9 5 9 5zm0 0l6.16-3.422a12.083 12.083 0 01.665 6.479A11.952 11.952 0 0012 20.055a11.952 11.952 0 00-6.824-2.998 12.078 12.078 0 01.665-6.479L12 14zm-4 6v-7.5l4-2.222" />
          </svg>
          <h3 class="text-lg font-semibold text-dark-text">I'm a Student</h3>
          <p class="text-sm text-gray-400 text-center mt-1">
            Join classes, view your progress, and create your own Jeopardy games
          </p>
        </button>
      </div>
    {:else if step === 'details'}
      <form onsubmit={handleSubmit} class="mt-8 space-y-6">
        <div class="rounded-md shadow-sm -space-y-px">
          <div>
            <label for="full-name" class="sr-only">Full name</label>
            <input
              id="full-name"
              type="text"
              bind:value={fullName}
              required
              class="appearance-none rounded-none relative block w-full px-3 py-2 border border-dark-border bg-dark-surface placeholder-gray-500 text-dark-text rounded-t-md focus:outline-none focus:ring-dark-purple-light focus:border-dark-purple-light focus:z-10 sm:text-sm"
              placeholder="Full name"
            />
          </div>
          <div>
            <label for="email-address" class="sr-only">Email address</label>
            <input
              id="email-address"
              type="email"
              bind:value={email}
              autocomplete="email"
              required
              class="appearance-none rounded-none relative block w-full px-3 py-2 border border-dark-border bg-dark-surface placeholder-gray-500 text-dark-text focus:outline-none focus:ring-dark-purple-light focus:border-dark-purple-light focus:z-10 sm:text-sm"
              placeholder="Email address"
            />
          </div>
          <div>
            <label for="password" class="sr-only">Password</label>
            <input
              id="password"
              type="password"
              bind:value={password}
              autocomplete="new-password"
              required
              class="appearance-none rounded-none relative block w-full px-3 py-2 border border-dark-border bg-dark-surface placeholder-gray-500 text-dark-text focus:outline-none focus:ring-dark-purple-light focus:border-dark-purple-light focus:z-10 sm:text-sm"
              placeholder="Password"
            />
          </div>
          <div>
            <label for="confirm-password" class="sr-only">Confirm Password</label>
            <input
              id="confirm-password"
              type="password"
              bind:value={confirmPassword}
              autocomplete="new-password"
              required
              class="appearance-none rounded-none relative block w-full px-3 py-2 border border-dark-border bg-dark-surface placeholder-gray-500 text-dark-text focus:outline-none focus:ring-dark-purple-light focus:border-dark-purple-light focus:z-10 sm:text-sm {selectedRole === 'student' ? '' : 'rounded-b-md'}"
              placeholder="Confirm password"
            />
          </div>
          
          {#if selectedRole === 'student'}
            <div>
              <label for="join-code" class="sr-only">Class join code (optional)</label>
              <input
                id="join-code"
                type="text"
                bind:value={joinCode}
                class="appearance-none rounded-none relative block w-full px-3 py-2 border border-dark-border bg-dark-surface placeholder-gray-500 text-dark-text rounded-b-md focus:outline-none focus:ring-dark-purple-light focus:border-dark-purple-light focus:z-10 sm:text-sm"
                placeholder="Class join code (optional)"
              />
            </div>
          {:else if selectedRole === 'teacher'}
            <div>
              <label for="school-name" class="sr-only">School name (optional)</label>
              <input
                id="school-name"
                type="text"
                bind:value={schoolName}
                class="appearance-none rounded-none relative block w-full px-3 py-2 border border-dark-border bg-dark-surface placeholder-gray-500 text-dark-text rounded-b-md focus:outline-none focus:ring-dark-purple-light focus:border-dark-purple-light focus:z-10 sm:text-sm"
                placeholder="School name (optional)"
              />
            </div>
          {/if}
        </div>

        {#if error}
          <div class="rounded-md bg-red-50 dark:bg-red-900/20 p-4">
            <div class="flex">
              <div class="ml-3">
                <h3 class="text-sm font-medium text-red-800 dark:text-red-200">
                  {error}
                </h3>
              </div>
            </div>
          </div>
        {/if}

        <div class="flex gap-4">
          <button
            type="button"
            onclick={goBack}
            class="flex-1 flex justify-center py-2 px-4 border border-dark-border rounded-md shadow-sm text-sm font-medium text-dark-text bg-dark-surface hover:bg-dark-hover focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-dark-purple-light"
          >
            Back
          </button>
          <button
            type="submit"
            disabled={isLoading}
            class="flex-1 flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-dark-purple-light hover:bg-dark-purple focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-dark-purple-light disabled:opacity-50 disabled:cursor-not-allowed"
          >
            {isLoading ? 'Creating account...' : 'Sign up'}
          </button>
        </div>
      </form>
    {/if}

    <div class="text-center">
      <span class="text-sm text-dark-text">
        Already have an account? 
        <a href="/auth/login" class="font-medium text-dark-purple-light hover:text-dark-purple">
          Sign in
        </a>
      </span>
    </div>
  </div>
</div>
</file>

<file path="src/lib/components/auth/SignupForm.svelte">
<script lang="ts">
  import { authStore } from '$lib/stores/auth';
  
  let email = $state('');
  let password = $state('');
  let confirmPassword = $state('');
  let fullName = $state('');
  let loading = $state(false);
  let error = $state('');
  let showResendConfirmation = $state(false);
  
  async function resendConfirmation() {
    loading = true;
    error = '';
    
    try {
      // Use resetPassword as a way to send a new confirmation email
      const success = await authStore.resetPassword(email);
      if (success) {
        error = 'Confirmation email sent! Please check your inbox.';
        showResendConfirmation = false;
      } else {
        error = 'Failed to resend confirmation email';
      }
    } catch (err: any) {
      error = err.message || 'Failed to resend confirmation email';
    } finally {
      loading = false;
    }
  }
  
  async function handleSubmit() {
    if (!email || !password || !confirmPassword || !fullName) {
      error = 'Please fill out all fields';
      return;
    }
    
    if (password !== confirmPassword) {
      error = 'Passwords do not match';
      return;
    }
    
    if (password.length < 6) {
      error = 'Password must be at least 6 characters';
      return;
    }
    
    loading = true;
    error = '';
    
    try {
      await authStore.signUp(email, password, { full_name: fullName });
      // Success - no need to do anything as the auth store will update
    } catch (err: any) {
      error = err.message || 'Failed to sign up';
      
      // Check if this is a "user already exists" error
      if (err.message?.includes('already registered') || err.message?.includes('already exists')) {
        showResendConfirmation = true;
      }
    } finally {
      loading = false;
    }
  }
</script>

<div class="w-full max-w-md">
  <form onsubmit={(e) => { e.preventDefault(); handleSubmit(); }} class="bg-surface rounded-lg px-8 pt-6 pb-8 mb-4 shadow-themed-card">
    <h2 class="text-2xl font-bold mb-6 text-center">Create an Account</h2>
    
    {#if error}
      <div class="bg-error/20 text-error px-4 py-3 rounded mb-4" role="alert">
        <p>{error}</p>
        
        {#if showResendConfirmation}
          <div class="mt-3">
            <p class="text-sm mb-2">This email is already registered but hasn't been confirmed.</p>
            <button
              onclick={resendConfirmation}
              class="btn btn-sm btn-outline {loading ? 'loading' : ''}"
              disabled={loading}
            >
              Resend Confirmation Email
            </button>
          </div>
        {/if}
      </div>
    {/if}
    
    <div class="mb-4">
      <label class="block text-sm font-medium mb-2" for="fullName">
        Full Name
      </label>
      <input
        bind:value={fullName}
        class="input input-bordered w-full"
        id="fullName"
        type="text"
        placeholder="Full Name"
        required
      />
    </div>
    
    <div class="mb-4">
      <label class="block text-sm font-medium mb-2" for="email">
        Email
      </label>
      <input
        bind:value={email}
        class="input input-bordered w-full"
        id="email"
        type="email"
        placeholder="Email"
        required
      />
    </div>
    
    <div class="mb-4">
      <label class="block text-sm font-medium mb-2" for="password">
        Password
      </label>
      <input
        bind:value={password}
        class="input input-bordered w-full"
        id="password"
        type="password"
        placeholder="Password"
        required
      />
    </div>
    
    <div class="mb-6">
      <label class="block text-sm font-medium mb-2" for="confirmPassword">
        Confirm Password
      </label>
      <input
        bind:value={confirmPassword}
        class="input input-bordered w-full"
        id="confirmPassword"
        type="password"
        placeholder="Confirm Password"
        required
      />
    </div>
    
    <div class="flex items-center justify-between">
      <button
        class="btn btn-primary w-full {loading ? 'loading' : ''}"
        type="submit"
        disabled={loading}
      >
        Sign Up
      </button>
    </div>
    
    <div class="text-center mt-4">
      <a href="/auth/login" class="link link-hover text-sm">
        Already have an account? Sign in
      </a>
    </div>
  </form>
</div>
</file>

<file path="src/lib/components/ClassList.svelte">
<script lang="ts">
  
  interface ClassItem {
    id: string;
    name: string;
    studentIds: string[];
  }

  let { 
    classes = [], 
    selectedClassId = null, 
    onSelectClass 
  } = $props<{
    classes: ClassItem[];
    selectedClassId: string | null;
    onSelectClass: (classId: string) => void;
  }>();
</script>

<div class="bg-gray-800 border border-gray-700 rounded-lg p-4">
  <h2 class="text-xl font-semibold text-gray-100 mb-4">All Classes</h2>
  
  <div class="space-y-2">
    {#each classes as classItem (classItem.id)}
      <button
        onclick={() => onSelectClass(classItem.id)}
        class="w-full p-3 rounded-lg text-left transition-all duration-200 {
          selectedClassId === classItem.id
            ? 'bg-dark-purple text-white'
            : 'bg-gray-700 hover:bg-gray-600 text-gray-100'
        }"
      >
        <div class="flex justify-between items-center">
          <span class="font-medium">{classItem.name}</span>
          <span class="text-sm {
            selectedClassId === classItem.id
              ? 'text-white/90'
              : 'text-gray-400'
          }">
            {classItem.studentIds.length} students
          </span>
        </div>
      </button>
    {/each}
    
    {#if classes.length === 0}
      <p class="text-gray-400 text-center py-4">No classes found</p>
    {/if}
  </div>
</div>
</file>

<file path="src/lib/components/DeploymentInfo.svelte">
<script lang="ts">
	import { dev } from '$app/environment';
	
	const release = import.meta.env.SENTRY_RELEASE || 'development';
	const environment = import.meta.env.MODE;
	const buildTime = import.meta.env.BUILD_TIME || new Date().toISOString();
</script>

{#if dev}
	<div class="fixed bottom-4 right-4 bg-gray-800 text-white text-xs p-2 rounded shadow-lg opacity-75 hover:opacity-100 transition-opacity">
		<div>Environment: {environment}</div>
		<div>Release: {release}</div>
		<div>Built: {new Date(buildTime).toLocaleString()}</div>
	</div>
{/if}
</file>

<file path="src/lib/components/FilePreviewModal.svelte">
<script lang="ts">
  import type { FileMetadata } from '$lib/types/files';
  import { getFileType } from '$lib/types/files';
  import { fileService } from '$lib/services/fileService';
  import PDFViewer from './PDFViewer.svelte';
  
  let { 
    isOpen = $bindable(false), 
    file = $bindable<FileMetadata | null>(null),
    onDelete = $bindable<((file: FileMetadata) => void) | undefined>(undefined)
  } = $props<{
    isOpen: boolean;
    file: FileMetadata | null;
    onDelete?: (file: FileMetadata) => void;
  }>();
  
  let imageUrl = $state<string | null>(null);
  let pdfUrl = $state<string | null>(null);
  let isLoading = $state(false);
  let error = $state<string | null>(null);
  
  // Watch for file changes
  $effect(() => {
    if (file && isOpen) {
      loadFilePreview();
    } else {
      cleanup();
    }
  });
  
  async function loadFilePreview() {
    if (!file) return;
    
    const fileType = getFileType(file.name).toLowerCase();
    
    // Handle images
    if (['jpg', 'jpeg', 'png', 'gif', 'webp'].includes(fileType)) {
      isLoading = true;
      error = null;
      
      try {
        const url = await fileService.getFileUrl(file.storage_path);
        if (url) {
          imageUrl = url;
        } else {
          error = 'Failed to load image';
        }
      } catch (err) {
        console.error('Error loading image:', err);
        error = 'Failed to load image';
      } finally {
        isLoading = false;
      }
    }
    
    // Handle PDFs
    if (fileType === 'pdf') {
      isLoading = true;
      error = null;
      
      try {
        const url = await fileService.getFileUrl(file.storage_path);
        if (url) {
          pdfUrl = url;
        } else {
          error = 'Failed to load PDF';
        }
      } catch (err) {
        console.error('Error loading PDF:', err);
        error = 'Failed to load PDF';
      } finally {
        isLoading = false;
      }
    }
  }
  
  function cleanup() {
    if (imageUrl) {
      URL.revokeObjectURL(imageUrl);
      imageUrl = null;
    }
    pdfUrl = null;
    error = null;
    isLoading = false;
  }
  
  function closeModal() {
    isOpen = false;
    file = null;
  }
  
  function openInNewTab() {
    if (!file) return;
    
    // For non-image files, open in new tab for browser native viewing
    fileService.getFileUrl(file.storage_path).then(url => {
      if (url) {
        window.open(url, '_blank');
      }
    });
  }
  
  function getPreviewContent() {
    if (!file) return null;
    
    const fileType = getFileType(file.name).toLowerCase();
    
    // Image preview
    if (['jpg', 'jpeg', 'png', 'gif', 'webp'].includes(fileType)) {
      return 'image';
    }
    
    // PDF preview (for future PDF.js integration)
    if (fileType === 'pdf') {
      return 'pdf';
    }
    
    // Text files
    if (['txt', 'csv', 'json', 'md'].includes(fileType)) {
      return 'text';
    }
    
    // Office documents
    if (['doc', 'docx', 'xls', 'xlsx', 'ppt', 'pptx'].includes(fileType)) {
      return 'office';
    }
    
    return 'unsupported';
  }
  
  function handleKeydown(event: KeyboardEvent) {
    if (event.key === 'Escape') {
      closeModal();
    }
  }
  
  async function handleDelete() {
    if (!file) return;
    
    if (confirm(`Are you sure you want to delete "${file.name}"?`)) {
      if (onDelete) {
        onDelete(file);
      }
      closeModal();
    }
  }
</script>

<svelte:window onkeydown={handleKeydown} />

{#if isOpen && file}
  <div class="fixed inset-0 bg-bg-base/80 backdrop-blur-sm flex items-center justify-center z-50 p-4">
    <div class="bg-card border border-border rounded-lg max-w-4xl max-h-[90vh] w-full flex flex-col">
      <!-- Header -->
      <div class="flex items-center justify-between p-4 border-b border-border">
        <div class="flex items-center gap-3">
          <div class="w-8 h-8 rounded-lg bg-purple-bg flex items-center justify-center text-purple">
            <svg class="w-4 h-4" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"></path>
              <polyline points="14 2 14 8 20 8"></polyline>
            </svg>
          </div>
          <div>
            <h3 class="text-lg font-bold text-highlight">{file.name}</h3>
            <p class="text-sm text-text-base">{getFileType(file.name).toUpperCase()} • {Math.round(file.size / 1024)}KB</p>
          </div>
        </div>
        
        <div class="flex items-center gap-2">
          <button 
            class="btn btn-secondary"
            onclick={openInNewTab}
            title="Open in new tab"
          >
            <svg class="w-4 h-4 mr-2" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6"></path>
              <polyline points="15 3 21 3 21 9"></polyline>
              <line x1="10" y1="14" x2="21" y2="3"></line>
            </svg>
            Open
          </button>
          {#if onDelete}
            <button 
              class="btn btn-error"
              onclick={handleDelete}
              title="Delete file"
            >
              <svg class="w-4 h-4 mr-2" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <polyline points="3 6 5 6 21 6"></polyline>
                <path d="M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"></path>
              </svg>
              Delete
            </button>
          {/if}
          <button 
            class="p-2 text-text-base hover:text-text-hover rounded-lg hover:bg-surface transition-colors"
            onclick={closeModal}
            title="Close"
          >
            <svg class="w-5 h-5" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <line x1="18" y1="6" x2="6" y2="18"></line>
              <line x1="6" y1="6" x2="18" y2="18"></line>
            </svg>
          </button>
        </div>
      </div>
      
      <!-- Content -->
      <div class="flex-1 overflow-auto">
        {#if getPreviewContent() === 'image'}
          {#if isLoading}
            <div class="flex items-center justify-center h-64">
              <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-purple"></div>
            </div>
          {:else if error}
            <div class="flex flex-col items-center justify-center h-64 text-center">
              <svg class="w-16 h-16 text-muted mb-4" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5">
                <circle cx="12" cy="12" r="10"></circle>
                <line x1="15" y1="9" x2="9" y2="15"></line>
                <line x1="9" y1="9" x2="15" y2="15"></line>
              </svg>
              <p class="text-text-base">{error}</p>
              <button class="btn btn-secondary mt-4" onclick={openInNewTab}>
                Try opening in new tab
              </button>
            </div>
          {:else if imageUrl}
            <div class="p-4">
              <img 
                src={imageUrl} 
                alt={file.name}
                class="max-w-full max-h-[60vh] mx-auto rounded-lg shadow-lg"
                style="object-fit: contain;"
              />
            </div>
          {/if}
        {:else if getPreviewContent() === 'pdf'}
          {#if isLoading}
            <div class="flex items-center justify-center h-64">
              <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-purple mb-4"></div>
              <p class="text-text-base">Loading PDF...</p>
            </div>
          {:else if error}
            <div class="flex flex-col items-center justify-center h-64 text-center">
              <svg class="w-16 h-16 text-error mb-4" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5">
                <circle cx="12" cy="12" r="10"></circle>
                <line x1="15" y1="9" x2="9" y2="15"></line>
                <line x1="9" y1="9" x2="15" y2="15"></line>
              </svg>
              <p class="text-error font-medium mb-2">Failed to load PDF</p>
              <p class="text-text-base mb-4">{error}</p>
              <button class="btn btn-secondary" onclick={openInNewTab}>
                Try opening in new tab
              </button>
            </div>
          {:else if pdfUrl}
            <div class="h-[70vh]">
              <PDFViewer pdfUrl={pdfUrl} height="100%" />
            </div>
          {/if}
        {:else}
          <!-- Other file types -->
          <div class="flex flex-col items-center justify-center h-64 text-center p-8">
            <svg class="w-16 h-16 text-muted mb-4" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5">
              <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"></path>
              <polyline points="14 2 14 8 20 8"></polyline>
            </svg>
            <h4 class="text-lg font-medium text-highlight mb-2">File Preview</h4>
            <p class="text-text-base mb-4">
              {#if getPreviewContent() === 'office'}
                This office document can be opened in a new tab for viewing.
              {:else if getPreviewContent() === 'text'}
                This text file can be opened in a new tab for viewing.
              {:else}
                This file type doesn't support inline preview. You can download or open it in a new tab.
              {/if}
            </p>
            <button class="btn btn-primary" onclick={openInNewTab}>
              <svg class="w-4 h-4 mr-2" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6"></path>
                <polyline points="15 3 21 3 21 9"></polyline>
                <line x1="10" y1="14" x2="21" y2="3"></line>
              </svg>
              Open File
            </button>
          </div>
        {/if}
      </div>
    </div>
  </div>
{/if}
</file>

<file path="src/lib/components/FlipCard.svelte">
<script lang="ts">
  let { 
    frontTitle = "Title",
    frontBadge = "Badge",
    frontFooter = "Footer Info",
    backContent = "Hover Me",
    backIcon = null,
    iconSnippet
  } = $props<{
    frontTitle?: string;
    frontBadge?: string;
    frontFooter?: string;
    backContent?: string;
    backIcon?: string;
    iconSnippet?: any;
  }>();
  
  // Exported constant for external use
  export const gradientColors = ['#8b5cf6', '#a78bfa', '#c4b5fd']; // Purple gradients to match your theme
</script>

<div class="card">
  <div class="content">
    <div class="back">
      <div class="back-content">
        {#if backIcon}
          <!-- Displaying icon as text to prevent XSS -->
          <div>{backIcon}</div>
        {:else}
          <svg stroke="#ffffff" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 50 50" height="50px" width="50px" fill="#ffffff">
            <g stroke-width="0" id="SVGRepo_bgCarrier"></g>
            <g stroke-linejoin="round" stroke-linecap="round" id="SVGRepo_tracerCarrier"></g>
            <g id="SVGRepo_iconCarrier">
              <path d="M20.84375 0.03125C20.191406 0.0703125 19.652344 0.425781 19.21875 1.53125C18.988281 2.117188 18.5 3.558594 18.03125 4.9375C17.792969 5.636719 17.570313 6.273438 17.40625 6.75C17.390625 6.796875 17.414063 6.855469 17.40625 6.90625C17.398438 6.925781 17.351563 6.949219 17.34375 6.96875L17.25 7.25C18.566406 7.65625 19.539063 8.058594 19.625 8.09375C22.597656 9.21875 28.351563 11.847656 33.28125 16.78125C38.5 22 41.183594 28.265625 42.09375 30.71875C42.113281 30.761719 42.375 31.535156 42.75 32.84375C42.757813 32.839844 42.777344 32.847656 42.78125 32.84375C43.34375 32.664063 44.953125 32.09375 46.3125 31.625C47.109375 31.351563 47.808594 31.117188 48.15625 31C49.003906 30.714844 49.542969 30.292969 49.8125 29.6875C50.074219 29.109375 50.066406 28.429688 49.75 27.6875C49.605469 27.347656 49.441406 26.917969 49.25 26.4375C47.878906 23.007813 45.007813 15.882813 39.59375 10.46875C33.613281 4.484375 25.792969 1.210938 22.125 0.21875C21.648438 0.0898438 21.234375 0.0078125 20.84375 0.03125 Z M 16.46875 9.09375L0.0625 48.625C-0.09375 48.996094 -0.00390625 49.433594 0.28125 49.71875C0.472656 49.910156 0.738281 50 1 50C1.128906 50 1.253906 49.988281 1.375 49.9375L40.90625 33.59375C40.523438 32.242188 40.222656 31.449219 40.21875 31.4375C39.351563 29.089844 36.816406 23.128906 31.875 18.1875C27.035156 13.34375 21.167969 10.804688 18.875 9.9375C18.84375 9.925781 17.8125 9.5 16.46875 9.09375 Z M 17 16C19.761719 16 22 18.238281 22 21C22 23.761719 19.761719 26 17 26C15.140625 26 13.550781 24.972656 12.6875 23.46875L15.6875 16.1875C16.101563 16.074219 16.550781 16 17 16 Z M 31 22C32.65625 22 34 23.34375 34 25C34 25.917969 33.585938 26.730469 32.9375 27.28125L32.90625 27.28125C33.570313 27.996094 34 28.949219 34 30C34 32.210938 32.210938 34 30 34C27.789063 34 26 32.210938 26 30C26 28.359375 26.996094 26.960938 28.40625 26.34375L28.3125 26.3125C28.117188 25.917969 28 25.472656 28 25C28 23.34375 29.34375 22 31 22 Z M 21 32C23.210938 32 25 33.789063 25 36C25 36.855469 24.710938 37.660156 24.25 38.3125L20.3125 39.9375C18.429688 39.609375 17 37.976563 17 36C17 33.789063 18.789063 32 21 32 Z M 9 34C10.65625 34 12 35.34375 12 37C12 38.65625 10.65625 40 9 40C7.902344 40 6.960938 39.414063 6.4375 38.53125L8.25 34.09375C8.488281 34.03125 8.742188 34 9 34Z"></path>
            </g>
          </svg>
        {/if}
        <strong>{backContent}</strong>
      </div>
    </div>
    <div class="front">
      
      <div class="img">
        <div class="circle"></div>
        <div class="circle" id="right"></div>
        <div class="circle" id="bottom"></div>
      </div>

      <div class="front-content">
        <small class="badge">{frontBadge}</small>
        <div class="description">
          <div class="title">
            <p class="title">
              <strong>{frontTitle}</strong>
            </p>
            {#if iconSnippet}
              {@render iconSnippet()}
            {:else}
              <svg fill-rule="nonzero" height="15px" width="15px" viewBox="0,0,256,256" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://www.w3.org/2000/svg">
                <g style="mix-blend-mode: normal" text-anchor="none" font-size="none" font-weight="none" font-family="none" stroke-dashoffset="0" stroke-dasharray="" stroke-miterlimit="10" stroke-linejoin="miter" stroke-linecap="butt" stroke-width="1" stroke="none" fill-rule="nonzero" fill="#8b5cf6">
                  <g transform="scale(8,8)">
                    <path d="M25,27l-9,-6.75l-9,6.75v-23h18z"></path>
                  </g>
                </g>
              </svg>
            {/if}
          </div>
          <p class="card-footer">
            {frontFooter}
          </p>
        </div>
      </div>
    </div>
  </div>
</div>

<style>
  .card {
    overflow: visible;
    width: 190px;
    height: 254px;
  }

  .content {
    width: 100%;
    height: 100%;
    transform-style: preserve-3d;
    transition: transform 300ms;
    box-shadow: 0px 0px 10px 1px #000000ee;
    border-radius: 5px;
  }

  .front, .back {
    background-color: #0a0a0a; /* dark-bg */
    position: absolute;
    width: 100%;
    height: 100%;
    backface-visibility: hidden;
    -webkit-backface-visibility: hidden;
    border-radius: 5px;
    overflow: hidden;
  }

  .back {
    width: 100%;
    height: 100%;
    justify-content: center;
    display: flex;
    align-items: center;
    overflow: hidden;
  }

  .back::before {
    position: absolute;
    content: ' ';
    display: block;
    width: 160px;
    height: 160%;
    background: linear-gradient(90deg, transparent, #8b5cf6, #a78bfa, #c4b5fd, #8b5cf6, transparent);
    animation: rotation_481 5000ms infinite linear;
  }

  .back-content {
    position: absolute;
    width: 99%;
    height: 99%;
    background-color: #0a0a0a; /* dark-bg */
    border-radius: 5px;
    color: white;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    gap: 30px;
  }

  .card:hover .content {
    transform: rotateY(180deg);
  }

  @keyframes rotation_481 {
    0% {
      transform: rotateZ(0deg);
    }

    100% {
      transform: rotateZ(360deg);
    }
  }

  .front {
    transform: rotateY(180deg);
    color: white;
  }

  .front .front-content {
    position: absolute;
    width: 100%;
    height: 100%;
    padding: 10px;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
  }

  .front-content .badge {
    background-color: #00000055;
    padding: 2px 10px;
    border-radius: 10px;
    backdrop-filter: blur(2px);
    width: fit-content;
  }

  .description {
    box-shadow: 0px 0px 10px 5px #00000088;
    width: 100%;
    padding: 10px;
    background-color: #00000099;
    backdrop-filter: blur(5px);
    border-radius: 5px;
  }

  .title {
    font-size: 11px;
    max-width: 100%;
    display: flex;
    justify-content: space-between;
  }

  .title p {
    width: 50%;
  }

  .card-footer {
    color: #ffffff88;
    margin-top: 5px;
    font-size: 8px;
  }

  .front .img {
    position: absolute;
    width: 100%;
    height: 100%;
    object-fit: cover;
    object-position: center;
  }

  .circle {
    width: 90px;
    height: 90px;
    border-radius: 50%;
    background-color: #8b5cf6; /* dark-purple */
    position: relative;
    filter: blur(15px);
    animation: floating 2600ms infinite linear;
  }

  #bottom {
    background-color: #a78bfa; /* dark-lavender */
    left: 50px;
    top: 0px;
    width: 150px;
    height: 150px;
    animation-delay: -800ms;
  }

  #right {
    background-color: #e9d5ff; /* dark-highlight */
    left: 160px;
    top: -80px;
    width: 30px;
    height: 30px;
    animation-delay: -1800ms;
  }

  @keyframes floating {
    0% {
      transform: translateY(0px);
    }

    50% {
      transform: translateY(10px);
    }

    100% {
      transform: translateY(0px);
    }
  }
</style>
</file>

<file path="src/lib/components/GameSharingModal.svelte">
<script lang="ts">
  import { authStore } from '$lib/stores/auth';
  import { createEventDispatcher } from 'svelte';
  
  let { 
    gameId,
    isOpen
  } = $props<{
    gameId: string;
    isOpen: boolean;
  }>();
  
  const dispatch = createEventDispatcher();
  
  interface Student {
    id: string;
    email: string;
    full_name: string;
  }
  
  let students = $state<Student[]>([]);
  let selectedStudents = $state<string[]>([]);
  let isLoading = $state(false);
  let error = $state('');
  
  $effect(() => {
    if (isOpen) {
      loadStudents();
    }
  });
  
  async function loadStudents() {
    isLoading = true;
    error = '';
    
    try {
      const { supabase } = await import('$lib/supabaseClient');
      const user = $authStore.user;
      
      if (!user) return;
      
      // Get students connected to this teacher
      const { data, error: fetchError } = await supabase
        .from('student_teachers')
        .select(`
          student_id,
          app_users!student_teachers_student_id_fkey (
            id,
            email,
            full_name
          )
        `)
        .eq('teacher_id', user.id);
      
      if (fetchError) throw fetchError;
      
      if (data) {
        students = data.flatMap(d => d.app_users).filter(Boolean) as Student[];
      }
      
      // Get currently shared students
      const { data: sharedData, error: sharedError } = await supabase
        .from('shared_games')
        .select('shared_with_id')
        .eq('game_id', gameId);
      
      if (sharedError) throw sharedError;
      
      if (sharedData) {
        selectedStudents = sharedData.map(s => s.shared_with_id);
      }
    } catch (err) {
      error = err instanceof Error ? err.message : 'Failed to load students';
    } finally {
      isLoading = false;
    }
  }
  
  async function saveSharing() {
    isLoading = true;
    error = '';
    
    try {
      const { supabase } = await import('$lib/supabaseClient');
      
      // Remove existing shares
      const { error: deleteError } = await supabase
        .from('shared_games')
        .delete()
        .eq('game_id', gameId);
      
      if (deleteError) throw deleteError;
      
      // Add new shares
      if (selectedStudents.length > 0) {
        const shares = selectedStudents.map(studentId => ({
          game_id: gameId,
          shared_with_id: studentId,
          permission: 'play'
        }));
        
        const { error: insertError } = await supabase
          .from('shared_games')
          .insert(shares);
        
        if (insertError) throw insertError;
      }
      
      dispatch('save');
      close();
    } catch (err) {
      error = err instanceof Error ? err.message : 'Failed to save sharing settings';
    } finally {
      isLoading = false;
    }
  }
  
  function toggleStudent(studentId: string) {
    if (selectedStudents.includes(studentId)) {
      selectedStudents = selectedStudents.filter(id => id !== studentId);
    } else {
      selectedStudents = [...selectedStudents, studentId];
    }
  }
  
  function close() {
    dispatch('close');
  }
</script>

{#if isOpen}
  <div class="fixed inset-0 z-50 flex items-center justify-center bg-black/50">
    <div class="bg-dark-surface rounded-lg p-6 max-w-md w-full mx-4">
      <h2 class="text-xl font-semibold text-dark-highlight mb-4">Share Game</h2>
      
      {#if error}
        <div class="alert alert-error mb-4">
          <p>{error}</p>
        </div>
      {/if}
      
      {#if isLoading}
        <div class="flex justify-center py-8">
          <span class="loading loading-spinner loading-md"></span>
        </div>
      {:else if students.length === 0}
        <p class="text-gray-400 py-4">No students enrolled in your classes.</p>
      {:else}
        <div class="space-y-2 max-h-64 overflow-y-auto mb-6">
          {#each students as student (student.id)}
            <label class="flex items-center gap-3 p-2 hover:bg-dark-hover rounded cursor-pointer">
              <input
                type="checkbox"
                checked={selectedStudents.includes(student.id)}
                onchange={() => toggleStudent(student.id)}
                class="checkbox checkbox-primary"
              />
              <div>
                <p class="text-dark-text">{student.full_name}</p>
                <p class="text-sm text-gray-400">{student.email}</p>
              </div>
            </label>
          {/each}
        </div>
      {/if}
      
      <div class="flex gap-4">
        <button
          onclick={close}
          class="btn btn-ghost flex-1"
          disabled={isLoading}
        >
          Cancel
        </button>
        <button
          onclick={saveSharing}
          class="btn btn-primary flex-1"
          disabled={isLoading || students.length === 0}
        >
          Save
        </button>
      </div>
    </div>
  </div>
{/if}
</file>

<file path="src/lib/components/Handsontable.svelte">
<script lang="ts">
  import { onMount, onDestroy, createEventDispatcher } from 'svelte';

  // Define props with $props
  let { 
    data = [], 
    colHeaders = true,
    rowHeaders = true,
    height = 400,
    width = '100%',
    licenseKey = 'non-commercial-and-evaluation',
    settings = {}
  } = $props();
  
  // Create Svelte event dispatcher
  const dispatch = createEventDispatcher();
  
  // Container reference
  let container: HTMLDivElement;
  let hotInstance = $state<any>(null);
  
  onMount(async () => {
    try {
      // Dynamically import Handsontable to avoid SSR issues
      const Handsontable = (await import('handsontable')).default;
      
      // Also import CSS
      await import('handsontable/dist/handsontable.full.min.css');
      
      // Additional CSS for dark theme
      const darkStyles = document.createElement('style');
      darkStyles.textContent = `
        .dark-theme .handsontable {
          background-color: #111827;
          color: #F9FAFB;
        }
        
        .dark-theme .handsontable th {
          background-color: #1F2937;
          color: #9CA3AF;
          border-color: #374151;
          font-weight: 600;
        }
        
        .dark-theme .handsontable td {
          background-color: #1E293B;
          border-color: #374151;
          color: #F9FAFB;
        }
        
        .dark-theme .handsontable td.area-selection {
          background-color: rgba(139, 92, 246, 0.2) !important;
        }
        
        .dark-theme .handsontable .current {
          background-color: rgba(139, 92, 246, 0.15) !important;
        }
        
        .dark-theme .handsontable tbody th.ht__highlight,
        .dark-theme .handsontable thead th.ht__highlight {
          background-color: #374151;
        }
        
        .dark-theme .handsontable .wtBorder {
          background-color: #8B5CF6 !important;
        }
        
        .dark-theme .handsontable .copyPaste {
          border: 2px dashed #8B5CF6 !important;
        }
        
        .dark-theme .handsontable .ht_master .wtHolder::-webkit-scrollbar-track {
          background-color: #1F2937;
        }
        
        .dark-theme .handsontable .ht_master .wtHolder::-webkit-scrollbar-thumb {
          background-color: #4B5563;
          border-radius: 4px;
        }
        
        .dark-theme .handsontable .ht_master .wtHolder::-webkit-scrollbar-thumb:hover {
          background-color: #6B7280;
        }
        
        .dark-theme .handsontable .ht_master .wtHolder::-webkit-scrollbar {
          width: 8px;
          height: 8px;
        }
        
        .dark-theme .handsontable .htContextMenu {
          background-color: #1F2937;
          border-color: #374151;
          box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.3), 0 4px 6px -2px rgba(0, 0, 0, 0.2);
        }
        
        .dark-theme .handsontable .htContextMenu table tbody tr td {
          background-color: #1F2937;
          border-color: #374151;
          color: #F9FAFB;
        }
        
        .dark-theme .handsontable .htContextMenu table tbody tr td.htDisabled {
          color: #6B7280;
        }
        
        .dark-theme .handsontable .htContextMenu table tbody tr td.htSeparator {
          border-top-color: #374151;
        }
        
        .dark-theme .handsontable .htContextMenu table tbody tr td:hover {
          background-color: #374151;
        }
        
        .dark-theme .handsontable .htFiltersMenuCondition .htUISelect {
          background-color: #1F2937;
          border-color: #374151;
          color: #F9FAFB;
        }
        
        .dark-theme .handsontable .htFiltersMenuCondition input {
          background-color: #1F2937;
          border-color: #374151;
          color: #F9FAFB;
        }
        
        .dark-theme .handsontable .htUIMultipleSelectHot {
          background-color: #1F2937;
          border-color: #374151;
        }
        
        .dark-theme .handsontable .htUIButton {
          background-color: #8B5CF6;
          border-color: #7C3AED;
          color: white;
        }
        
        .dark-theme .handsontable .htUIButton:hover {
          background-color: #7C3AED;
        }
        
        .dark-theme .handsontable .htDimmed {
          color: #9CA3AF;
        }
        
        .dark-theme .handsontable .htCheckboxRendererInput {
          accent-color: #8B5CF6;
        }
        
        .dark-theme .handsontable .htAutocompleteArrow {
          color: #9CA3AF;
        }
        
        .dark-theme .handsontable .htNoFrame {
          border: none;
        }
        
        .dark-theme .handsontable .htCore tbody tr td.htSearchResult {
          background-color: rgba(139, 92, 246, 0.3) !important;
        }
        
        .dark-theme .handsontable .htDropdownMenu {
          background-color: #1F2937;
          border-color: #374151;
          box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.3), 0 4px 6px -2px rgba(0, 0, 0, 0.2);
        }
        
        .dark-theme .handsontable .htDropdownMenu .ht_master .wtHolder {
          background-color: #1F2937;
        }
        
        .dark-theme .handsontable .htDropdownMenu table tbody tr td {
          background-color: #1F2937;
          color: #F9FAFB;
        }
        
        .dark-theme .handsontable .htDropdownMenu table tbody tr td.current {
          background-color: #374151;
        }
        
        .dark-theme .handsontable .htDropdownMenu table tbody tr td:hover {
          background-color: #374151;
        }
        
        .dark-theme .handsontable .htDropdownMenu .htCore tbody tr td.htSearchResult {
          background-color: rgba(139, 92, 246, 0.3) !important;
        }
        
        .dark-theme .handsontable .htCommentTextArea {
          background-color: #1F2937;
          border-color: #374151;
          color: #F9FAFB;
        }
        
        .dark-theme .handsontable .htCommentCell:after {
          border-color: #8B5CF6 transparent transparent #8B5CF6;
        }
        
        .dark-theme .handsontable .htComments {
          background-color: #1F2937;
          border-color: #374151;
          box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.3), 0 4px 6px -2px rgba(0, 0, 0, 0.2);
        }
        
        .dark-theme .handsontable .htCommentsCell {
          color: #F9FAFB;
        }
        
        .dark-theme .handsontable .htCommentsTextArea {
          background-color: #1F2937;
          border-color: #374151;
          color: #F9FAFB;
        }
        
        .dark-theme .handsontable .htCommentsAddButton {
          background-color: #8B5CF6;
          border-color: #7C3AED;
          color: white;
        }
        
        .dark-theme .handsontable .htCommentsAddButton:hover {
          background-color: #7C3AED;
        }
        
        .dark-theme .handsontable .htCommentsRemoveButton {
          background-color: #EF4444;
          border-color: #DC2626;
          color: white;
        }
        
        .dark-theme .handsontable .htCommentsRemoveButton:hover {
          background-color: #DC2626;
        }
        
        .dark-theme .handsontable .htCommentsCell {
          color: #F9FAFB;
        }
        
        .dark-theme .handsontable .htCommentsTextArea {
          background-color: #1F2937;
          border-color: #374151;
          color: #F9FAFB;
        }
        
        .dark-theme .handsontable .htCommentsAddButton {
          background-color: #8B5CF6;
          border-color: #7C3AED;
          color: white;
        }
        
        .dark-theme .handsontable .htCommentsAddButton:hover {
          background-color: #7C3AED;
        }
        
        .dark-theme .handsontable .htCommentsRemoveButton {
          background-color: #EF4444;
          border-color: #DC2626;
          color: white;
        }
        
        .dark-theme .handsontable .htCommentsRemoveButton:hover {
          background-color: #DC2626;
        }
      `;
      document.head.appendChild(darkStyles);
      
      // Initialize Handsontable with merged settings
      const mergedSettings = {
        data,
        colHeaders,
        rowHeaders,
        licenseKey,
        width,
        height,
        afterChange: (changes: any[] | null, source: string) => {
          if (source !== 'loadData' && changes) {
            dispatch('afterChange', { changes, source });
          }
        },
        afterSelection: (row: number, column: number, row2: number, column2: number) => {
          dispatch('afterSelection', { row, column, row2, column2 });
        },
        ...settings
      };
      
      // Add the dark theme to the container
      container.classList.add('dark-theme');
      
      // Initialize Handsontable
      hotInstance = new Handsontable(container, mergedSettings);
      
      // Make the instance available to parent components
      dispatch('init', { hotInstance });
    } catch (error) {
      console.error('Error initializing Handsontable:', error);
    }
  });
  
  onDestroy(() => {
    // Clean up
    if (hotInstance) {
      hotInstance.destroy();
    }
  });
  
  // Method to update data from outside  
  export function updateData(newData: any[]) {
    if (hotInstance) {
      hotInstance.loadData(newData);
    }
  }
  
  // Method to get current data
  export function getData() {
    return hotInstance ? hotInstance.getData() : [];
  }
  
  // Method to refresh the table
  export function render() {
    if (hotInstance) {
      hotInstance.render();
    }
  }
</script>

<div class="relative" bind:this={container} style="width: {width}; height: {height}px;"></div>

<style>
  /* Your custom styles */
  .relative {
    position: relative;
  }
</style>
</file>

<file path="src/lib/components/ImportWizard.svelte">
<script lang="ts">
  import { gradebookStore } from '$lib/stores/gradebook';
  import type { Category } from '$lib/types/gradebook';
  import { writable } from 'svelte/store';
  
  let { onClose, onComplete } = $props<{
    onClose: () => void;
    onComplete: () => void;
  }>();
  
  const className = writable('');
  const jsonInput = writable('');
  const error = writable<string | null>(null);
  
  const exampleJson = JSON.stringify([
    { name: "John Smith" },
    { name: "Jane Doe" },
    { name: "Emily Johnson" }
  ], null, 2);
  
  async function handleImport(e: SubmitEvent) {
    e.preventDefault();
    
    error.set(null);
    
    if (!$className.trim()) {
      error.set('Please enter a class name');
      return;
    }
    
    let students: Array<{name: string}> = [];
    
    if ($jsonInput.trim()) {
      try {
        students = JSON.parse($jsonInput);
        
        if (!Array.isArray(students)) {
          throw new Error('JSON must be an array of student objects');
        }
        
        for (const student of students) {
          if (!student || typeof student !== 'object' || student === null) {
            throw new Error('Each item must be an object with a "name" field');
          }
          
          if (!student.name || typeof student.name !== 'string') {
            throw new Error('Each student must have a "name" field of type string');
          }
        }
      } catch (err) {
        const e = err as Error;
        error.set(`Invalid JSON: ${e.message}`);
        return;
      }
    }
    
    try {
      // Make sure supabase is properly imported
      const { supabase } = await import('$lib/supabaseClient');
      
      // Check if user is authenticated
      const { data: authData } = await supabase.auth.getSession();
      const userId = authData?.session?.user?.id;
      
      // If not authenticated, show login message
      if (!userId) {
        error.set('You need to be logged in to create classes. Please sign in first.');
        return;
      }
      
      // Create the class with user_id field
      await gradebookStore.addCategory($className, userId);
      
      // Get current state to find the newly created category
      let categoriesData: Category[] = [];
      const unsubscribe = gradebookStore.subscribe(state => {
        categoriesData = state.categories;
      });
      unsubscribe();
      
      // Find our newly created category
      const category = categoriesData.find((c) => c.name === $className);
      
      if (!category) {
        error.set('Failed to create class. Please try again.');
        return;
      }
      
      // Add students if any
      for (const studentData of students) {
        const studentId = await gradebookStore.addGlobalStudent(studentData.name);
        
        if (studentId) {
          await gradebookStore.assignStudentToCategory(studentId, category.id);
        }
      }
      
      onComplete();
    } catch (err) {
      error.set(`Error creating class: ${err instanceof Error ? err.message : String(err)}`);
      console.error('ImportWizard error:', err);
    }
  }
</script>

<div class="fixed inset-0 bg-black/50 flex items-center justify-center z-50">
  <div class="bg-gray-800 border border-gray-700 rounded-lg p-6 w-full max-w-2xl mx-4">
    <h2 class="text-2xl font-bold text-gray-100 mb-6">Import New Class</h2>
    
    <form onsubmit={handleImport} class="space-y-4">
      <div>
        <label for="className" class="block text-sm font-medium text-gray-300 mb-2">
          Class Name
        </label>
        <input
          id="className"
          type="text"
          bind:value={$className}
          placeholder="Math 101"
          class="w-full px-3 py-2 bg-gray-700 text-gray-100 border border-gray-600 rounded-lg focus:outline-none focus:border-dark-purple"
          required
        />
      </div>
      
      <div>
        <label for="jsonInput" class="block text-sm font-medium text-gray-300 mb-2">
          Students (JSON) - Optional
        </label>
        <textarea
          id="jsonInput"
          bind:value={$jsonInput}
          placeholder={exampleJson}
          rows="8"
          class="w-full px-3 py-2 bg-gray-700 text-gray-100 border border-gray-600 rounded-lg focus:outline-none focus:border-dark-purple font-mono text-sm"
        ></textarea>
        <p class="text-sm text-gray-400 mt-1">
          Enter an array of student objects. Each student should have a "name" field.
        </p>
      </div>
      
      {#if $error}
        <div class="p-3 bg-red-500/20 border border-red-500/50 rounded-lg text-red-300">
          {$error}
        </div>
      {/if}
      
      <div class="flex justify-end gap-3 mt-6">
        <button
          type="button"
          onclick={onClose}
          class="px-4 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700 transition-all duration-200"
        >
          Cancel
        </button>
        <button
          type="submit"
          class="px-4 py-2 bg-dark-purple text-white rounded-lg hover:bg-dark-purple-hover transition-all duration-200"
        >
          Import Class
        </button>
      </div>
    </form>
  </div>
</div>
</file>

<file path="src/lib/components/JeopardyTimer.svelte">
<script lang="ts">
  import { onMount, onDestroy } from 'svelte';
  import type { TimerSize } from '$lib/types/jeopardy';
  
  let { 
    readingTime = 5,
    totalTime = 30,
    onTimeExpired = () => {},
    onReadingComplete = () => {},
    startImmediately = true,
    size = 'large' as TimerSize,
    position = 'top' // 'top' for large/medium, 'corner' for small
  } = $props();
  
  let currentTime = $state(0);
  let isReading = $state(true);
  let timerInterval: number | null = null;
  let _isActive = $state(false);
  
  let progress = $derived(
    isReading 
      ? (currentTime / readingTime) * 100
      : ((totalTime - currentTime) / totalTime) * 100
  );
    
  let timeDisplay = $derived(
    isReading
      ? Math.ceil(readingTime - currentTime)
      : Math.ceil(totalTime - currentTime)
  );
  
  function startTimer() {
    if (timerInterval) return;
    
    _isActive = true;
    currentTime = 0;
    isReading = true;
    
    timerInterval = window.setInterval(() => {
      currentTime += 0.1;
      
      if (isReading && currentTime >= readingTime) {
        isReading = false;
        currentTime = 0;
        onReadingComplete();
      } else if (!isReading && currentTime >= totalTime) {
        stopTimer();
        onTimeExpired();
      }
    }, 100);
  }
  
  function stopTimer() {
    if (timerInterval) {
      clearInterval(timerInterval);
      timerInterval = null;
    }
    _isActive = false;
  }
  
  function _reset() {
    stopTimer();
    currentTime = 0;
    isReading = true;
  }
  
  onMount(() => {
    if (startImmediately) {
      startTimer();
    }
  });
  
  onDestroy(() => {
    stopTimer();
  });
</script>

{#if size === 'small'}
  <div class="timer-small" class:corner={position === 'corner'}>
    <div class="timer-small-bar-background">
      <div 
        class="timer-small-bar"
        class:reading={isReading}
        class:countdown={!isReading}
        style="width: {progress}%"
      ></div>
    </div>
    <div class="timer-small-display">
      <span class="time-value-small">{timeDisplay}s</span>
    </div>
  </div>
{:else}
  <div class="timer-container" class:medium={size === 'medium'}>
    <div class="timer-bar-background">
      <div 
        class="timer-bar"
        class:reading={isReading}
        class:countdown={!isReading}
        style="width: {progress}%"
      ></div>
    </div>
    
    <div class="timer-display">
      {#if isReading}
        <span class="reading-label">Get Ready!</span>
      {/if}
      <span class="time-value">{timeDisplay}</span>
      {#if !isReading}
        <span class="seconds-label">seconds</span>
      {/if}
    </div>
  </div>
{/if}

<style>
  /* Large and medium timer styles */
  .timer-container {
    width: 100%;
    max-width: 600px;
    margin: 0 auto 1.5rem;
    padding: 1rem;
    background: rgba(30, 30, 40, 0.9);
    border-radius: 12px;
    border: 2px solid rgba(100, 80, 200, 0.3);
  }
  
  .timer-container.medium {
    max-width: 800px;
    padding: 0.75rem;
    margin-bottom: 1rem;
  }
  
  .timer-bar-background {
    width: 100%;
    height: 30px;
    background: rgba(50, 50, 60, 0.8);
    border-radius: 15px;
    overflow: hidden;
    position: relative;
    margin-bottom: 1rem;
    box-shadow: inset 0 2px 4px rgba(0, 0, 0, 0.3);
  }
  
  .medium .timer-bar-background {
    height: 24px;
    margin-bottom: 0.75rem;
  }
  
  .timer-bar {
    height: 100%;
    transition: width 0.1s linear;
    position: relative;
    overflow: hidden;
    border-radius: 15px;
  }
  
  .timer-bar::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    right: 0;
    bottom: 0;
    background: linear-gradient(
      90deg,
      transparent,
      rgba(255, 255, 255, 0.2),
      transparent
    );
    animation: shimmer 1.5s infinite;
  }
  
  @keyframes shimmer {
    100% {
      transform: translateX(200%);
    }
  }
  
  .timer-bar.reading {
    background: linear-gradient(90deg, #4CAF50, #66BB6A);
    box-shadow: 0 0 20px rgba(76, 175, 80, 0.5);
  }
  
  .timer-bar.countdown {
    background: linear-gradient(90deg, #FF6B6B, #EE5A24);
    box-shadow: 0 0 20px rgba(255, 107, 107, 0.5);
  }
  
  .timer-bar.countdown[style*="width: 2"] {
    background: linear-gradient(90deg, #FF4757, #EE5A24);
    animation: pulse 0.5s ease-in-out infinite;
  }
  
  @keyframes pulse {
    0%, 100% {
      transform: scaleY(1);
    }
    50% {
      transform: scaleY(0.95);
    }
  }
  
  .timer-display {
    text-align: center;
    color: white;
  }
  
  .medium .timer-display {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
  }
  
  .reading-label {
    display: block;
    font-size: 1.2rem;
    font-weight: 600;
    color: #66BB6A;
    margin-bottom: 0.25rem;
    text-transform: uppercase;
    letter-spacing: 2px;
  }
  
  .medium .reading-label {
    font-size: 1rem;
    margin-bottom: 0;
  }
  
  .time-value {
    font-size: 2.5rem;
    font-weight: 700;
    color: white;
    text-shadow: 0 0 10px rgba(255, 255, 255, 0.3);
  }
  
  .medium .time-value {
    font-size: 1.8rem;
  }
  
  .seconds-label {
    font-size: 1rem;
    color: rgba(255, 255, 255, 0.7);
    margin-left: 0.5rem;
  }
  
  .medium .seconds-label {
    font-size: 0.875rem;
  }
  
  /* Small timer styles */
  .timer-small {
    position: absolute;
    top: 1rem;
    right: 1rem;
    background: rgba(30, 30, 40, 0.95);
    border-radius: 8px;
    padding: 0.5rem;
    border: 1px solid rgba(100, 80, 200, 0.3);
    min-width: 120px;
    z-index: 10;
  }
  
  .timer-small.corner {
    top: 10px;
    right: 10px;
  }
  
  .timer-small-bar-background {
    width: 100%;
    height: 6px;
    background: rgba(50, 50, 60, 0.8);
    border-radius: 3px;
    overflow: hidden;
    margin-bottom: 0.25rem;
  }
  
  .timer-small-bar {
    height: 100%;
    transition: width 0.1s linear;
    border-radius: 3px;
  }
  
  .timer-small-bar.reading {
    background: #66BB6A;
  }
  
  .timer-small-bar.countdown {
    background: #FF6B6B;
  }
  
  .timer-small-display {
    text-align: center;
    color: white;
  }
  
  .time-value-small {
    font-size: 1rem;
    font-weight: 600;
    color: white;
  }
</style>
</file>

<file path="src/lib/components/LessonPlanner.svelte">
<script lang="ts">
  import { v4 as uuidv4 } from 'uuid';
  import { PlusCircle, Trash2 as Trash } from 'lucide-svelte';

  type LessonSection = {
    id: string;
    title: string;
    duration: number;
    notes: string;
  };

  let lessonSections = $state<LessonSection[]>([
    {
      id: uuidv4(),
      title: 'Introduction',
      duration: 10,
      notes: 'Brief overview of today\'s topics'
    }
  ]);

  function addSection() {
    lessonSections = [
      ...lessonSections,
      {
        id: uuidv4(),
        title: '',
        duration: 15,
        notes: ''
      }
    ];
  }

  function removeSection(id: string) {
    lessonSections = lessonSections.filter(section => section.id !== id);
  }

  function getTotalDuration() {
    return lessonSections.reduce((total, section) => total + section.duration, 0);
  }
</script>

<div class="card max-w-4xl mx-auto my-8">
  <h2 class="text-2xl font-bold mb-6 text-gray-800 dark:text-highlight">Lesson Planner</h2>
  
  <div class="space-y-6">
    {#each lessonSections as section (section.id)}
      <div class="p-4 border border-gray-200 dark:border-border rounded-lg bg-gray-50 dark:bg-surface">
        <div class="flex justify-between mb-3">
          <input 
            type="text" 
            bind:value={section.title} 
            placeholder="Section title" 
            class="input w-full max-w-xs" 
          />
          
          <div class="flex items-center space-x-2">
            <label class="flex items-center">
              <span class="mr-2 text-gray-600 dark:text-text-base">Duration:</span>
              <input 
                type="number" 
                bind:value={section.duration} 
                min="1" 
                max="120" 
                class="input w-16 text-center" 
              />
              <span class="ml-1 text-gray-600 dark:text-text-base">min</span>
            </label>
            
            <button 
              onclick={() => removeSection(section.id)}
              class="p-2 text-error hover:text-error-hover transition-colors rounded-full hover:bg-gray-200 dark:hover:bg-accent"
              aria-label="Remove section"
            >
              <Trash class="w-5 h-5" />
            </button>
          </div>
        </div>
        
        <textarea 
          bind:value={section.notes} 
          placeholder="Section notes and details..." 
          class="input w-full h-24 resize-none" 
        ></textarea>
      </div>
    {/each}
  </div>
  
  <div class="mt-6 flex justify-between items-center">
    <button 
      onclick={addSection}
      class="btn-primary flex items-center"
    >
      <PlusCircle class="w-5 h-5 mr-2" />
      Add Section
    </button>
    
    <div class="text-gray-700 dark:text-text-base font-medium">
      Total Duration: <span class="text-purple font-bold">{getTotalDuration()} minutes</span>
    </div>
  </div>
</div>
</file>

<file path="src/lib/components/LoadingBounce.svelte">
<div class="loader"></div>

<style>
  .loader {
    position: relative;
    width: 120px;
    height: 90px;
    margin: 0 auto;
  }

  .loader:before {
    content: "";
    position: absolute;
    bottom: 30px;
    left: 50px;
    height: 30px;
    width: 30px;
    border-radius: 50%;
    background: #8b5cf6; /* dark-purple */
    animation: loading-bounce 0.5s ease-in-out infinite alternate;
  }

  .loader:after {
    content: "";
    position: absolute;
    right: 0;
    top: 0;
    height: 7px;
    width: 45px;
    border-radius: 4px;
    box-shadow: 0 5px 0 #4c4c4c, -35px 50px 0 #4c4c4c, -70px 95px 0 #4c4c4c; /* dark-muted */
    animation: loading-step 1s ease-in-out infinite;
  }

  @keyframes loading-bounce {
    0% {
      transform: scale(1, 0.7);
    }

    40% {
      transform: scale(0.8, 1.2);
    }

    60% {
      transform: scale(1, 1);
    }

    100% {
      bottom: 140px;
    }
  }

  @keyframes loading-step {
    0% {
      box-shadow: 0 10px 0 rgba(0, 0, 0, 0),
              0 10px 0 #4c4c4c,
              -35px 50px 0 #4c4c4c,
              -70px 90px 0 #4c4c4c;
    }

    100% {
      box-shadow: 0 10px 0 #4c4c4c,
              -35px 50px 0 #4c4c4c,
              -70px 90px 0 #4c4c4c,
              -70px 90px 0 rgba(0, 0, 0, 0);
    }
  }
</style>
</file>

<file path="src/lib/components/LogEntriesDetails.svelte">
<script lang="ts">
  import { logEntriesStore } from '$lib/stores/log-entries';
  import type { LogEntry } from '$lib/types/log-entries';
  
  interface Props {
    logId: string;
    onclose?: () => void;
    onedit?: () => void;
    ondelete?: () => void;
  }
  
  let { logId, onclose, onedit, ondelete }: Props = $props();
  
  // Use derived for reactive log lookup
  const log = $derived(logEntriesStore.getLog(logId));
  
  function handleClose() {
    onclose?.();
  }
  
  function handleEdit() {
    onedit?.();
  }
  
  async function handleDelete() {
    if (confirm('Are you sure you want to delete this log entry?')) {
      try {
        await logEntriesStore.deleteLog(logId);
        ondelete?.();
      } catch (error) {
        alert('Failed to delete log entry. Please try again.');
      }
    }
  }
  
  function formatDate(dateString: string) {
    return new Date(dateString).toLocaleDateString('en-US', {
      weekday: 'long',
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    });
  }
</script>

{#if log}
  <div class="fixed inset-0 bg-bg-base bg-opacity-80 z-50 flex items-center justify-center p-4">
    <div class="bg-surface rounded-xl shadow-dropdown max-w-3xl w-full max-h-[90vh] overflow-y-auto">
      <!-- Header -->
      <div class="sticky top-0 bg-surface p-6 border-b border-border flex justify-between items-start">
        <div>
          <h2 class="text-2xl font-bold text-highlight">{log.student}</h2>
          <p class="text-muted">{formatDate(log.date)}</p>
        </div>
        <button
          onclick={handleClose}
          class="text-muted hover:text-highlight transition-colors"
          aria-label="Close"
        >
          <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </button>
      </div>
      
      <!-- Content -->
      <div class="p-6">
        <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
          <div>
            <h3 class="text-sm font-medium text-muted mb-1">Observer</h3>
            <p class="text-highlight">{log.observer}</p>
          </div>
          {#if log.subject}
            <div>
              <h3 class="text-sm font-medium text-muted mb-1">Subject</h3>
              <p class="text-highlight">{log.subject}</p>
            </div>
          {/if}
        </div>

        {#if log.objective}
          <div class="mb-6">
            <h3 class="text-sm font-medium text-muted mb-1">Objective</h3>
            <p class="text-highlight">{log.objective}</p>
          </div>
        {/if}
        
        <div class="mb-6">
          <h3 class="text-sm font-medium text-muted mb-1">Observation</h3>
          <p class="text-highlight whitespace-pre-wrap">{log.observation}</p>
        </div>
        
        {#if log.actions}
          <div class="mb-6">
            <h3 class="text-sm font-medium text-muted mb-1">Actions Taken</h3>
            <p class="text-highlight whitespace-pre-wrap">{log.actions}</p>
          </div>
        {/if}
        
        {#if log.follow_up}
          <div class="mb-6 p-4 bg-purple-bg border border-purple rounded-lg">
            <h3 class="text-sm font-medium text-purple-light mb-1">Follow-up</h3>
            <p class="text-highlight whitespace-pre-wrap">{log.follow_up}</p>
          </div>
        {/if}
        
        {#if log.tags && log.tags.length > 0}
          <div class="mb-6">
            <h3 class="text-sm font-medium text-muted mb-2">Tags</h3>
            <div class="flex flex-wrap gap-2">
              {#each log.tags as tag}
                <span class="px-3 py-1 bg-accent text-sm text-text-base rounded-full">
                  {tag}
                </span>
              {/each}
            </div>
          </div>
        {/if}
      </div>
      
      <!-- Actions -->
      <div class="sticky bottom-0 bg-surface p-6 border-t border-border flex justify-end gap-3">
        <button
          onclick={handleEdit}
          class="px-4 py-2 bg-accent text-highlight rounded-lg hover:bg-accent-hover transition-colors"
        >
          Edit
        </button>
        <button
          onclick={handleDelete}
          class="px-4 py-2 bg-error text-white rounded-lg hover:bg-error-hover transition-colors"
        >
          Delete
        </button>
      </div>
    </div>
  </div>
{/if}
</file>

<file path="src/lib/components/LogEntriesForm.svelte">
<script lang="ts">
  import type { LogEntry } from '$lib/types/log-entries';
  import { authStore } from '$lib/stores/auth';
  
  // Convert props to Svelte 5 runes
  const {
    editMode = false,
    log,
    onsave,
    oncancel
  } = $props<{
    editMode?: boolean;
    log?: LogEntry;
    onsave?: (logEntry: Omit<LogEntry, 'id'>) => void;
    oncancel?: () => void;
  }>();
  
  // Define available tag options
  const tagOptions = [
    'Behavioral',
    'Positive',
    'Academic',
    'Social',
    'Attendance',
    'Progress',
    'Intervention'
  ];
  
  // Form fields with $state
  let date = $state(log?.date || new Date().toISOString().slice(0, 10));
  let observer = $state(log?.observer || $authStore.user?.email || '');
  let student = $state(log?.student || '');
  let subject = $state(log?.subject || '');
  let objective = $state(log?.objective || '');
  let observation = $state(log?.observation || '');
  let actions = $state(log?.actions || '');
  let follow_up = $state(log?.follow_up || '');
  let selectedTag = $state(log?.tags && log.tags.length > 0 ? log.tags[0] : '');

  // Form validation
  type ErrorTypes = {
    student: string;
    observation: string;
  }
  
  let errors = $state<ErrorTypes>({
    student: '',
    observation: ''
  });

  function validateForm() {
    let isValid = true;
    errors = {
      student: '',
      observation: ''
    };

    if (!student.trim()) {
      errors.student = 'Student name is required';
      isValid = false;
    }

    if (!observation.trim()) {
      errors.observation = 'Observation details are required';
      isValid = false;
    }

    return isValid;
  }

  function handleSave(event: SubmitEvent) {
    event.preventDefault();
    if (!validateForm()) return;

    const logEntry: Omit<LogEntry, 'id'> = {
      date,
      observer: observer.trim(),
      student: student.trim(),
      subject: subject.trim() || null,
      objective: objective.trim() || null,
      observation: observation.trim(),
      actions: actions.trim() || null,
      follow_up: follow_up.trim() || null,
      tags: selectedTag ? [selectedTag] : null
    };

    onsave?.(logEntry);
  }

  function handleCancel() {
    oncancel?.();
  }
</script>

<form onsubmit={handleSave} class="space-y-4">
  <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
    <div>
      <label for="date" class="block text-sm font-medium text-muted mb-1">
        Date
      </label>
      <input
        id="date"
        type="date"
        bind:value={date}
        class="w-full px-3 py-2 bg-surface border border-border rounded-lg text-highlight focus:outline-none focus:ring-2 focus:ring-purple"
      />
    </div>

    <div>
      <label for="observer" class="block text-sm font-medium text-muted mb-1">
        Observer
      </label>
      <input
        id="observer"
        type="text"
        bind:value={observer}
        class="w-full px-3 py-2 bg-surface border border-border rounded-lg text-highlight focus:outline-none focus:ring-2 focus:ring-purple"
        placeholder="Your name or email"
      />
    </div>
  </div>

  <div>
    <label for="student" class="block text-sm font-medium text-muted mb-1">
      Student Name
    </label>
    <input
      id="student"
      type="text"
      bind:value={student}
      class="w-full px-3 py-2 bg-surface border border-border rounded-lg text-highlight focus:outline-none focus:ring-2 focus:ring-purple"
      placeholder="Enter student name"
    />
    {#if errors.student}
      <p class="text-error text-sm mt-1">{errors.student}</p>
    {/if}
  </div>

  <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
    <div>
      <label for="subject" class="block text-sm font-medium text-muted mb-1">
        Subject (Optional)
      </label>
      <input
        id="subject"
        type="text"
        bind:value={subject}
        class="w-full px-3 py-2 bg-surface border border-border rounded-lg text-highlight focus:outline-none focus:ring-2 focus:ring-purple"
        placeholder="e.g., Math, Science, etc."
      />
    </div>

    <div>
      <label for="objective" class="block text-sm font-medium text-muted mb-1">
        Objective (Optional)
      </label>
      <input
        id="objective"
        type="text"
        bind:value={objective}
        class="w-full px-3 py-2 bg-surface border border-border rounded-lg text-highlight focus:outline-none focus:ring-2 focus:ring-purple"
        placeholder="Learning objective"
      />
    </div>
  </div>

  <div>
    <label for="observation" class="block text-sm font-medium text-muted mb-1">
      Observation
    </label>
    <textarea
      id="observation"
      bind:value={observation}
      rows="4"
      class="w-full px-3 py-2 bg-surface border border-border rounded-lg text-highlight focus:outline-none focus:ring-2 focus:ring-purple"
      placeholder="Describe the observation..."
    ></textarea>
    {#if errors.observation}
      <p class="text-error text-sm mt-1">{errors.observation}</p>
    {/if}
  </div>

  <div>
    <label for="actions" class="block text-sm font-medium text-muted mb-1">
      Actions Taken (Optional)
    </label>
    <textarea
      id="actions"
      bind:value={actions}
      rows="2"
      class="w-full px-3 py-2 bg-surface border border-border rounded-lg text-highlight focus:outline-none focus:ring-2 focus:ring-purple"
      placeholder="Actions taken..."
    ></textarea>
  </div>

  <div>
    <label for="follow_up" class="block text-sm font-medium text-muted mb-1">
      Follow Up (Optional)
    </label>
    <textarea
      id="follow_up"
      bind:value={follow_up}
      rows="2"
      class="w-full px-3 py-2 bg-surface border border-border rounded-lg text-highlight focus:outline-none focus:ring-2 focus:ring-purple"
      placeholder="Follow up actions..."
    ></textarea>
  </div>

  <div>
    <label for="tag" class="block text-sm font-medium text-muted mb-1">
      Tag (Optional)
    </label>
    <select
      id="tag"
      bind:value={selectedTag}
      class="w-full px-3 py-2 bg-surface border border-border rounded-lg text-highlight focus:outline-none focus:ring-2 focus:ring-purple"
    >
      <option value="">Select a tag</option>
      {#each tagOptions as tag}
        <option value={tag}>{tag}</option>
      {/each}
    </select>
  </div>

  <div class="flex justify-end gap-3 pt-4">
    <button
      type="button"
      onclick={handleCancel}
      class="px-4 py-2 text-muted hover:text-highlight transition-colors"
    >
      Cancel
    </button>
    <button
      type="submit"
      class="px-6 py-2 bg-purple text-white rounded-lg hover:bg-purple-hover transition-colors"
    >
      {editMode ? 'Update' : 'Save'} Log Entry
    </button>
  </div>
</form>
</file>

<file path="src/lib/components/LogEntriesList.svelte">
<script lang="ts">
  import type { LogEntry } from '$lib/types/log-entries';
  
  // Using $props() for component props
  interface Props {
    logs: LogEntry[];
    onselect?: (logId: string) => void;
    ondelete?: (logId: string) => void;
    onrestore?: (log: LogEntry) => void;
    onbulkdelete?: (logIds: string[]) => void;
  }
  
  let { 
    logs = [],
    onselect,
    ondelete,
    onrestore,
    onbulkdelete
  }: Props = $props();
  
  // State for handling deletion confirmation and selection
  let itemsToConfirmDelete = $state<Record<string, boolean>>({});
  let selectedItems = $state<Record<string, boolean>>({});
  let showBulkActions = $state(false);
  let selectAll = $state(false);
  
  // Undo functionality
  let lastDeletedItem = $state<LogEntry | null>(null);
  let showUndoBar = $state(false);
  let undoTimeout = $state<any>(undefined);
  
  // Derived values
  let selectedCount = $derived(Object.values(selectedItems).filter(Boolean).length);
  
  function handleSelectLog(logId: string) {
    if (showBulkActions) {
      toggleSelection(logId);
    } else {
      onselect?.(logId);
    }
  }
  
  function confirmDelete(logId: string) {
    itemsToConfirmDelete[logId] = true;
    
    // Auto-reset after 5 seconds
    setTimeout(() => {
      itemsToConfirmDelete[logId] = false;
    }, 5000);
  }
  
  function handleDeleteLog(event: Event, logId: string, log: LogEntry) {
    event.stopPropagation(); // Prevent the click from selecting the log
    
    if (itemsToConfirmDelete[logId]) {
      // This is the confirmation click - actual delete
      lastDeletedItem = log;
      showUndoBanner();
      
      ondelete?.(logId);
      itemsToConfirmDelete[logId] = false;
    } else {
      // First click - show confirmation
      confirmDelete(logId);
    }
  }
  
  function showUndoBanner() {
    // Clear any existing timeout
    if (undoTimeout) clearTimeout(undoTimeout);
    
    showUndoBar = true;
    
    // Auto-hide after 10 seconds
    undoTimeout = setTimeout(() => {
      showUndoBar = false;
      lastDeletedItem = null;
    }, 10000);
  }
  
  function handleUndo() {
    if (lastDeletedItem) {
      onrestore?.(lastDeletedItem);
      showUndoBar = false;
      lastDeletedItem = null;
      if (undoTimeout) clearTimeout(undoTimeout);
    }
  }
  
  // Bulk selection functionality
  function toggleBulkMode() {
    showBulkActions = !showBulkActions;
    if (!showBulkActions) {
      // Clear selections when exiting bulk mode
      selectedItems = {};
      selectAll = false;
    }
  }
  
  function toggleSelection(logId: string) {
    selectedItems[logId] = !selectedItems[logId];
    
    // Update selectAll based on current selections
    selectAll = selectedCount === logs.length;
  }
  
  function handleSelectAll() {
    selectAll = !selectAll;
    
    if (selectAll) {
      // Select all items
      logs.forEach(log => {
        selectedItems[log.id] = true;
      });
    } else {
      // Deselect all items
      selectedItems = {};
    }
  }
  
  function handleBulkDelete() {
    const selectedIds = Object.entries(selectedItems)
      .filter(([id, selected]) => selected)
      .map(([id]) => id);
    
    if (selectedIds.length > 0) {
      if (confirm(`Delete ${selectedIds.length} log entries?`)) {
        onbulkdelete?.(selectedIds);
        selectedItems = {};
        selectAll = false;
      }
    }
  }
  
  function formatDate(dateString: string) {
    return new Date(dateString).toLocaleDateString();
  }
  
  function truncateText(text: string, maxLength: number) {
    if (!text) return ''; // Add null check
    if (text.length <= maxLength) return text;
    return text.substring(0, maxLength) + '...';
  }
</script>

<div class="space-y-4">
  {#if showBulkActions}
    <div class="bg-card border border-border rounded-xl p-4 mb-4 flex justify-between items-center">
      <div class="flex items-center space-x-2">
        <input 
          type="checkbox" 
          checked={selectAll} 
          onchange={handleSelectAll}
          class="h-4 w-4 rounded border-border text-purple"
        />
        <span class="text-highlight">Select All</span>
      </div>
      <div class="flex space-x-2">
        <button
          class="px-3 py-1 text-text-base hover:text-highlight transition-colors"
          onclick={toggleBulkMode}
        >
          Cancel
        </button>
        <button
          class="px-3 py-1 bg-error text-highlight rounded-lg hover:bg-error-hover transition-colors"
          onclick={handleBulkDelete}
        >
          Delete Selected
        </button>
      </div>
    </div>
  {:else}
    <div class="flex justify-end mb-4">
      <button
        class="px-3 py-1 text-gray-300 hover:text-white transition-colors"
        onclick={toggleBulkMode}
      >
        Select Multiple
      </button>
    </div>
  {/if}

  {#each logs as log (log.id)}
    <div 
      class="bg-card border border-border rounded-xl p-4 mb-2 relative cursor-pointer hover:border-purple transition-colors"
      onclick={() => handleSelectLog(log.id)}
      onkeydown={(e) => {
        if (e.key === 'Enter' || e.key === ' ') {
          e.preventDefault();
          handleSelectLog(log.id);
        }
      }}
      role="button"
      tabindex="0"
    >
      <!-- Content area with conditional padding -->
      <div class={showBulkActions ? "ml-8" : ""}>
        <!-- Checkbox for bulk selection mode -->
        {#if showBulkActions}
          <div class="absolute left-4 top-1/2 transform -translate-y-1/2">
            <input 
              type="checkbox" 
              checked={selectedItems[log.id] || false} 
              onchange={() => toggleSelection(log.id)}
              onclick={(e) => e.stopPropagation()}
              class="h-5 w-5 rounded border-border text-purple"
            />
          </div>
        {/if}
        
        <!-- Entry header -->
        <div class="flex justify-between items-start mb-2">
          <div>
            <h3 class="text-lg font-semibold text-highlight">{log.student}</h3>
            <p class="text-sm text-muted">{formatDate(log.date)}</p>
          </div>
          <div class="flex items-center gap-2">
            {#if log.tags && log.tags.length > 0}
              <div class="flex gap-2">
                {#each log.tags?.slice(0, 3) || [] as tag (tag)}
                  <span class="px-2 py-1 bg-accent text-xs text-text-base rounded-full">
                    {tag}
                  </span>
                {/each}
                {#if log.tags && log.tags.length > 3}
                  <span class="px-2 py-1 bg-accent text-xs text-text-base rounded-full">
                    +{log.tags.length - 3}
                  </span>
                {/if}
              </div>
            {/if}
            {#if !showBulkActions}
              <button 
                class="text-muted hover:text-error transition-colors p-1 rounded-full" 
                onclick={(e) => handleDeleteLog(e, log.id, log)}
                onkeydown={(e) => {}}
                title={itemsToConfirmDelete[log.id] ? "Click to confirm deletion" : "Delete log entry"}
              >
                {#if itemsToConfirmDelete[log.id]}
                  <span class="text-error font-medium text-sm px-2">Confirm?</span>
                {:else}
                  <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                  </svg>
                {/if}
              </button>
            {/if}
          </div>
        </div>
        
        <!-- Log entry content -->
        <p class="text-text-base">
          {truncateText(log.observation, 200)}
        </p>
        
        <!-- Follow-up indicator -->
        {#if log.follow_up}
          <div class="mt-2 pt-2 border-t border-border">
            <p class="text-sm text-purple-light">Follow-up required</p>
          </div>
        {/if}
      </div>
    </div>
  {/each}
</div>

<!-- Undo notification banner -->
{#if showUndoBar}
  <div class="fixed bottom-4 left-1/2 transform -translate-x-1/2 bg-surface border border-border rounded-lg shadow-dropdown p-4 flex items-center space-x-4 z-50">
    <span class="text-highlight">Entry deleted</span>
    <button
      class="px-3 py-1 bg-purple text-white rounded-lg hover:bg-purple-hover transition-colors"
      onclick={handleUndo}
    >
      Undo
    </button>
  </div>
{/if}
</file>

<file path="src/lib/components/LogEntriesSearch.svelte">
<script lang="ts">
  import type { LogEntryFilters } from '$lib/types/log-entries';
  import { logEntriesStore } from '$lib/stores/log-entries';
  
  const { onfilter } = $props<{
    onfilter?: (filters: LogEntryFilters) => void;
  }>();
  
  // Filter values using Svelte 5 state
  let searchQuery = $state('');
  let dateFrom = $state('');
  let dateTo = $state('');
  let selectedStudent = $state('');
  let selectedTags = $state<string[]>([]);
  
  // Get unique values for dropdowns
  const students = logEntriesStore.getUniqueStudents();
  const availableTags = logEntriesStore.getUniqueTags();
  
  function applyFilters() {
    const filters: LogEntryFilters = {
      searchQuery: searchQuery || undefined,
      dateFrom: dateFrom || undefined,
      dateTo: dateTo || undefined,
      student: selectedStudent || undefined,
      tags: selectedTags.length > 0 ? selectedTags : undefined
    };
    
    onfilter?.(filters);
  }
  
  function clearFilters() {
    searchQuery = '';
    dateFrom = '';
    dateTo = '';
    selectedStudent = '';
    selectedTags = [];
    applyFilters();
  }
  
  // Apply filters on any change using Svelte 5 effect
  $effect(() => {
    applyFilters();
  });
</script>

<div class="bg-card border border-border rounded-xl p-4">
  <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
    <!-- Search Input -->
    <div class="lg:col-span-2">
      <input
        type="text"
        bind:value={searchQuery}
        placeholder="Search entries..."
        class="w-full px-4 py-2 bg-surface border border-border rounded-lg text-highlight placeholder-muted focus:outline-none focus:ring-2 focus:ring-purple"
      />
    </div>
    
    <!-- Clear Filters Button -->
    <div class="flex items-end">
      <button
        onclick={clearFilters}
        class="w-full px-4 py-2 bg-surface text-text-base rounded-lg hover:bg-accent hover:text-highlight transition-colors"
      >
        Clear Filters
      </button>
    </div>
    
    <!-- Date Range -->
    <div>
      <label for="dateFrom" class="block text-sm font-medium text-muted mb-1">From Date</label>
      <input
        id="dateFrom"
        type="date"
        bind:value={dateFrom}
        class="w-full px-4 py-2 bg-surface border border-border rounded-lg text-highlight focus:outline-none focus:ring-2 focus:ring-purple"
      />
    </div>
    
    <div>
      <label for="dateTo" class="block text-sm font-medium text-muted mb-1">To Date</label>
      <input
        id="dateTo"
        type="date"
        bind:value={dateTo}
        class="w-full px-4 py-2 bg-surface border border-border rounded-lg text-highlight focus:outline-none focus:ring-2 focus:ring-purple"
      />
    </div>
    
    <!-- Student Filter -->
    <div>
      <label for="studentFilter" class="block text-sm font-medium text-muted mb-1">Student</label>
      <select
        id="studentFilter"
        bind:value={selectedStudent}
        class="w-full px-4 py-2 bg-surface border border-border rounded-lg text-highlight focus:outline-none focus:ring-2 focus:ring-purple"
      >
        <option value="">All Students</option>
        {#each students as student}
          <option value={student}>{student}</option>
        {/each}
      </select>
    </div>
  </div>
  
  <!-- Tags Filter -->
  {#if availableTags.length > 0}
    <div class="mt-4">
      <label for="tagsFilter" class="block text-sm font-medium text-muted mb-2">Tags</label>
      <div class="flex flex-wrap gap-2" id="tagsFilter">
        {#each availableTags as tag}
          <label class="inline-flex items-center">
            <input
              type="checkbox"
              bind:group={selectedTags}
              value={tag}
              class="mr-2 rounded border-border text-purple focus:ring-purple"
            />
            <span class="text-sm text-text-base">{tag}</span>
          </label>
        {/each}
      </div>
    </div>
  {/if}
</div>
</file>

<file path="src/lib/components/PDFViewer.svelte">
<script lang="ts">
  import { onMount } from 'svelte';
  
  let { 
    pdfUrl = '',
    height = '600px' 
  } = $props<{
    pdfUrl: string;
    height?: string;
  }>();
  
  let pdfContainer: HTMLDivElement;
  let isLoading = $state(true);
  let error = $state<string | null>(null);
  let currentPage = $state(1);
  let totalPages = $state(0);
  let scale = $state(1.2);
  
  // PDF.js variables
  let pdfjsLib: any = null;
  let pdfDoc: any = null;
  
  onMount(async () => {
    try {
      // Load PDF.js from CDN
      await loadPDFJS();
      if (pdfUrl) {
        await loadPDF();
      }
    } catch (err) {
      console.error('Error initializing PDF viewer:', err);
      error = 'Failed to load PDF viewer';
      isLoading = false;
    }
  });
  
  async function loadPDFJS() {
    return new Promise((resolve, reject) => {
      if (typeof window !== 'undefined' && (window as any).pdfjsLib) {
        pdfjsLib = (window as any).pdfjsLib;
        resolve(pdfjsLib);
        return;
      }
      
      // Load PDF.js from CDN
      const script = document.createElement('script');
      script.src = 'https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.min.js';
      script.onload = () => {
        pdfjsLib = (window as any).pdfjsLib;
        pdfjsLib.GlobalWorkerOptions.workerSrc = 'https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.worker.min.js';
        resolve(pdfjsLib);
      };
      script.onerror = reject;
      document.head.appendChild(script);
    });
  }
  
  async function loadPDF() {
    if (!pdfjsLib || !pdfUrl) return;
    
    try {
      isLoading = true;
      error = null;
      
      const loadingTask = pdfjsLib.getDocument(pdfUrl);
      pdfDoc = await loadingTask.promise;
      totalPages = pdfDoc.numPages;
      
      await renderPage(1);
      isLoading = false;
    } catch (err) {
      console.error('Error loading PDF:', err);
      error = 'Failed to load PDF document';
      isLoading = false;
    }
  }
  
  async function renderPage(pageNum: number) {
    if (!pdfDoc || !pdfContainer) return;
    
    try {
      // Clear previous content
      pdfContainer.innerHTML = '';
      
      const page = await pdfDoc.getPage(pageNum);
      const viewport = page.getViewport({ scale });
      
      // Create canvas
      const canvas = document.createElement('canvas');
      const context = canvas.getContext('2d');
      canvas.height = viewport.height;
      canvas.width = viewport.width;
      canvas.style.maxWidth = '100%';
      canvas.style.height = 'auto';
      
      pdfContainer.appendChild(canvas);
      
      // Render page
      const renderContext = {
        canvasContext: context,
        viewport: viewport
      };
      
      await page.render(renderContext).promise;
      currentPage = pageNum;
    } catch (err) {
      console.error('Error rendering page:', err);
      error = 'Failed to render PDF page';
    }
  }
  
  async function nextPage() {
    if (currentPage < totalPages) {
      await renderPage(currentPage + 1);
    }
  }
  
  async function prevPage() {
    if (currentPage > 1) {
      await renderPage(currentPage - 1);
    }
  }
  
  async function zoomIn() {
    scale = Math.min(scale + 0.2, 3.0);
    await renderPage(currentPage);
  }
  
  async function zoomOut() {
    scale = Math.max(scale - 0.2, 0.5);
    await renderPage(currentPage);
  }
  
  // Watch for URL changes
  $effect(() => {
    if (pdfjsLib && pdfUrl) {
      loadPDF();
    }
  });
</script>

<div class="pdf-viewer bg-surface rounded-lg" style="height: {height}">
  {#if isLoading}
    <div class="flex items-center justify-center h-full">
      <div class="text-center">
        <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-purple mx-auto mb-4"></div>
        <p class="text-text-base">Loading PDF...</p>
      </div>
    </div>
  {:else if error}
    <div class="flex items-center justify-center h-full">
      <div class="text-center">
        <svg class="w-16 h-16 text-error mx-auto mb-4" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5">
          <circle cx="12" cy="12" r="10"></circle>
          <line x1="15" y1="9" x2="9" y2="15"></line>
          <line x1="9" y1="9" x2="15" y2="15"></line>
        </svg>
        <p class="text-error font-medium mb-2">PDF Loading Error</p>
        <p class="text-text-base text-sm">{error}</p>
      </div>
    </div>
  {:else}
    <!-- PDF Controls -->
    <div class="flex items-center justify-between p-3 border-b border-border bg-card">
      <div class="flex items-center gap-2">
        <button 
          class="btn-icon" 
          onclick={prevPage} 
          disabled={currentPage <= 1}
          title="Previous page"
        >
          <svg class="w-4 h-4" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <polyline points="15 18 9 12 15 6"></polyline>
          </svg>
        </button>
        
        <span class="text-sm text-text-base">
          Page {currentPage} of {totalPages}
        </span>
        
        <button 
          class="btn-icon" 
          onclick={nextPage} 
          disabled={currentPage >= totalPages}
          title="Next page"
        >
          <svg class="w-4 h-4" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <polyline points="9 18 15 12 9 6"></polyline>
          </svg>
        </button>
      </div>
      
      <div class="flex items-center gap-2">
        <button 
          class="btn-icon" 
          onclick={zoomOut}
          title="Zoom out"
        >
          <svg class="w-4 h-4" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <circle cx="11" cy="11" r="8"></circle>
            <line x1="8" y1="11" x2="14" y2="11"></line>
            <line x1="21" y1="21" x2="16.65" y2="16.65"></line>
          </svg>
        </button>
        
        <span class="text-sm text-text-base">
          {Math.round(scale * 100)}%
        </span>
        
        <button 
          class="btn-icon" 
          onclick={zoomIn}
          title="Zoom in"
        >
          <svg class="w-4 h-4" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <circle cx="11" cy="11" r="8"></circle>
            <line x1="8" y1="11" x2="14" y2="11"></line>
            <line x1="11" y1="8" x2="11" y2="14"></line>
            <line x1="21" y1="21" x2="16.65" y2="16.65"></line>
          </svg>
        </button>
      </div>
    </div>
    
    <!-- PDF Content -->
    <div class="flex-1 overflow-auto p-4 bg-gray-100 dark:bg-gray-800">
      <div class="flex justify-center">
        <div bind:this={pdfContainer} class="pdf-canvas-container shadow-lg bg-white"></div>
      </div>
    </div>
  {/if}
</div>

<style>
  .btn-icon {
    @apply p-2 text-text-base hover:text-text-hover rounded-lg hover:bg-surface transition-colors disabled:opacity-50 disabled:cursor-not-allowed;
  }
  
  .pdf-canvas-container {
    min-height: 200px;
    border-radius: 4px;
  }
</style>
</file>

<file path="src/lib/components/StudentRoster.svelte">
<script lang="ts">
  import type { Student } from '$lib/types/gradebook';
  import type { Category } from '$lib/types/gradebook';
  import { gradebookStore } from '$lib/stores/gradebook';
  import { writable, derived } from 'svelte/store';
  
  let { selectedClass } = $props<{ selectedClass: Category }>();
  
  // Create a writable store for student name
  const newStudentName = writable('');
  
  // Derive students for this class
  const students = derived(
    gradebookStore,
    $gradebookStore => {
      const allStudents = $gradebookStore.students || [];
      return selectedClass.studentIds
        .map(id => allStudents.find((s: Student) => s.id === id))
        .filter(Boolean) as Student[];
    }
  );
  
  async function addStudent(e: SubmitEvent): Promise<void> {
    e.preventDefault();
    
    if ($newStudentName.trim()) {
      const studentId = await gradebookStore.addGlobalStudent($newStudentName.trim());
      
      if (studentId) {
        await gradebookStore.assignStudentToCategory(studentId, selectedClass.id);
        newStudentName.set('');
      }
    }
  }
  
  function removeStudent(studentId: string) {
    if (confirm('Remove this student from the class?')) {
      gradebookStore.removeStudentFromCategory(studentId, selectedClass.id);
    }
  }
</script>

<div class="bg-gray-800 border border-gray-700 rounded-lg p-6">
  {#if selectedClass}
    <h2 class="text-xl font-semibold text-gray-100 mb-6">{selectedClass.name} - Student Roster</h2>
  
  <div class="mb-6">
    <form class="flex gap-2" onsubmit={addStudent}>
      <input
        type="text"
        placeholder="Student name"
        bind:value={$newStudentName}
        class="flex-1 px-3 py-2 bg-gray-700 text-gray-100 border border-gray-600 rounded-lg focus:outline-none focus:border-purple"
        required
      />
      <button
        type="submit"
        class="px-4 py-2 bg-purple text-white rounded-lg hover:bg-purple-hover transition-all duration-200"
      >
        Add Student
      </button>
    </form>
  </div>
  
  <div class="overflow-x-auto">
    <table class="w-full">
      <thead>
        <tr class="text-left border-b border-gray-700">
          <th class="p-3 text-gray-300">#</th>
          <th class="p-3 text-gray-300">Name</th>
          <th class="p-3 text-gray-300">Actions</th>
        </tr>
      </thead>
      <tbody>
        {#each $students as student, index}
          <tr class="border-b border-gray-700 hover:bg-gray-700/50">
            <td class="p-3 text-gray-400">{index + 1}</td>
            <td class="p-3 text-gray-100">{student.name}</td>
            <td class="p-3">
              <button
                onclick={() => removeStudent(student.id)}
                class="px-3 py-1 text-red-400 hover:text-white hover:bg-red-500 rounded-md transition-colors"
                aria-label={`Remove ${student.name} from class`}
                title={`Remove ${student.name} from class`}
              >
                Remove
              </button>
            </td>
          </tr>
        {/each}
      </tbody>
    </table>
    
    {#if $students.length === 0}
      <div class="text-center py-12 bg-gray-700/30 rounded-lg my-4">
        <p class="text-gray-400 mb-2">No students in this class yet</p>
        <p class="text-gray-500 text-sm">Use the form above to add students</p>
      </div>
    {/if}
  </div>
  {/if}
</div>
</file>

<file path="src/lib/components/StudentRoster.test.ts">
import { describe, test, expect, vi, beforeEach } from 'vitest';
import { render, screen, fireEvent, waitFor } from '@testing-library/svelte';
import StudentRoster from './StudentRoster.svelte';
import { gradebookStore } from '$lib/stores/gradebook';

// Mock the gradebook store
vi.mock('$lib/stores/gradebook', () => ({
  gradebookStore: {
    subscribe: vi.fn(),
    loadStudents: vi.fn(),
    addStudent: vi.fn(),
    updateStudent: vi.fn(),
    deleteStudent: vi.fn()
  }
}));

describe('StudentRoster', () => {
  const mockStudents = [
    { id: '1', name: 'John Doe', email: 'john@example.com' },
    { id: '2', name: 'Jane Smith', email: 'jane@example.com' }
  ];

  beforeEach(() => {
    vi.clearAllMocks();
    
    // Mock store subscription
    vi.mocked(gradebookStore.subscribe).mockImplementation((callback) => {
      callback({
        students: mockStudents,
        isLoading: false,
        error: null,
        categories: [],
        assignments: [],
        grades: []
      });
      return () => {}; // unsubscribe function
    });
  });

  test('should render student list', async () => {
    render(StudentRoster);
    
    await waitFor(() => {
      expect(screen.getByText('John Doe')).toBeInTheDocument();
      expect(screen.getByText('Jane Smith')).toBeInTheDocument();
    });
  });

  test('should show loading state', () => {
    vi.mocked(gradebookStore.subscribe).mockImplementation((callback) => {
      callback({
        students: [],
        isLoading: true,
        error: null,
        categories: [],
        assignments: [],
        grades: []
      });
      return () => {};
    });

    render(StudentRoster);
    
    expect(screen.getByText(/loading students/i)).toBeInTheDocument();
  });

  test('should show error state', () => {
    const errorMessage = 'Failed to load students';
    vi.mocked(gradebookStore.subscribe).mockImplementation((callback) => {
      callback({
        students: [],
        isLoading: false,
        error: errorMessage,
        categories: [],
        assignments: [],
        grades: []
      });
      return () => {};
    });

    render(StudentRoster);
    
    expect(screen.getByText(errorMessage)).toBeInTheDocument();
  });

  test('should open add student modal', async () => {
    render(StudentRoster);
    
    const addButton = screen.getByRole('button', { name: /add student/i });
    await fireEvent.click(addButton);
    
    expect(screen.getByRole('heading', { name: /add new student/i })).toBeInTheDocument();
    expect(screen.getByLabelText(/student name/i)).toBeInTheDocument();
    expect(screen.getByLabelText(/email address/i)).toBeInTheDocument();
  });

  test('should add new student', async () => {
    vi.mocked(gradebookStore.addStudent).mockResolvedValue(undefined);
    
    render(StudentRoster);
    
    // Open modal
    const addButton = screen.getByRole('button', { name: /add student/i });
    await fireEvent.click(addButton);
    
    // Fill form
    const nameInput = screen.getByLabelText(/student name/i);
    const emailInput = screen.getByLabelText(/email address/i);
    
    await fireEvent.input(nameInput, { target: { value: 'New Student' } });
    await fireEvent.input(emailInput, { target: { value: 'new@example.com' } });
    
    // Submit
    const submitButton = screen.getByRole('button', { name: /add student/i });
    await fireEvent.click(submitButton);
    
    await waitFor(() => {
      expect(gradebookStore.addStudent).toHaveBeenCalledWith({
        name: 'New Student',
        email: 'new@example.com'
      });
    });
  });

  test('should open edit modal for student', async () => {
    render(StudentRoster);
    
    await waitFor(() => {
      const editButtons = screen.getAllByRole('button', { name: /edit/i });
      expect(editButtons).toHaveLength(2);
    });
    
    const editButtons = screen.getAllByRole('button', { name: /edit/i });
    await fireEvent.click(editButtons[0]);
    
    expect(screen.getByRole('heading', { name: /edit student/i })).toBeInTheDocument();
    expect(screen.getByDisplayValue('John Doe')).toBeInTheDocument();
    expect(screen.getByDisplayValue('john@example.com')).toBeInTheDocument();
  });

  test('should update student', async () => {
    vi.mocked(gradebookStore.updateStudent).mockResolvedValue(undefined);
    
    render(StudentRoster);
    
    await waitFor(() => {
      const editButtons = screen.getAllByRole('button', { name: /edit/i });
      expect(editButtons).toHaveLength(2);
    });
    
    // Open edit modal
    const editButtons = screen.getAllByRole('button', { name: /edit/i });
    await fireEvent.click(editButtons[0]);
    
    // Update name
    const nameInput = screen.getByDisplayValue('John Doe');
    await fireEvent.clear(nameInput);
    await fireEvent.input(nameInput, { target: { value: 'John Updated' } });
    
    // Save
    const saveButton = screen.getByRole('button', { name: /save changes/i });
    await fireEvent.click(saveButton);
    
    await waitFor(() => {
      expect(gradebookStore.updateStudent).toHaveBeenCalledWith('1', {
        name: 'John Updated',
        email: 'john@example.com'
      });
    });
  });

  test('should confirm before deleting student', async () => {
    render(StudentRoster);
    
    await waitFor(() => {
      const deleteButtons = screen.getAllByRole('button', { name: /delete/i });
      expect(deleteButtons).toHaveLength(2);
    });
    
    const deleteButtons = screen.getAllByRole('button', { name: /delete/i });
    await fireEvent.click(deleteButtons[0]);
    
    expect(screen.getByText(/are you sure you want to delete/i)).toBeInTheDocument();
    expect(screen.getByText(/john doe/i)).toBeInTheDocument();
  });

  test('should delete student after confirmation', async () => {
    vi.mocked(gradebookStore.deleteStudent).mockResolvedValue(undefined);
    
    render(StudentRoster);
    
    await waitFor(() => {
      const deleteButtons = screen.getAllByRole('button', { name: /delete/i });
      expect(deleteButtons).toHaveLength(2);
    });
    
    // Click delete
    const deleteButtons = screen.getAllByRole('button', { name: /delete/i });
    await fireEvent.click(deleteButtons[0]);
    
    // Confirm deletion
    const confirmButton = screen.getByRole('button', { name: /yes, delete/i });
    await fireEvent.click(confirmButton);
    
    await waitFor(() => {
      expect(gradebookStore.deleteStudent).toHaveBeenCalledWith('1');
    });
  });

  test('should cancel delete operation', async () => {
    render(StudentRoster);
    
    await waitFor(() => {
      const deleteButtons = screen.getAllByRole('button', { name: /delete/i });
      expect(deleteButtons).toHaveLength(2);
    });
    
    // Click delete
    const deleteButtons = screen.getAllByRole('button', { name: /delete/i });
    await fireEvent.click(deleteButtons[0]);
    
    // Cancel deletion
    const cancelButton = screen.getByRole('button', { name: /cancel/i });
    await fireEvent.click(cancelButton);
    
    // Confirmation dialog should be gone
    await waitFor(() => {
      expect(screen.queryByText(/are you sure you want to delete/i)).not.toBeInTheDocument();
    });
    
    expect(gradebookStore.deleteStudent).not.toHaveBeenCalled();
  });

  test('should show empty state when no students', () => {
    vi.mocked(gradebookStore.subscribe).mockImplementation((callback) => {
      callback({
        students: [],
        isLoading: false,
        error: null,
        categories: [],
        assignments: [],
        grades: []
      });
      return () => {};
    });

    render(StudentRoster);
    
    expect(screen.getByText(/no students added yet/i)).toBeInTheDocument();
    expect(screen.getByText(/click "add student" to get started/i)).toBeInTheDocument();
  });

  test('should validate form inputs', async () => {
    render(StudentRoster);
    
    // Open modal
    const addButton = screen.getByRole('button', { name: /add student/i });
    await fireEvent.click(addButton);
    
    // Try to submit empty form
    const submitButton = screen.getByRole('button', { name: /add student/i });
    await fireEvent.click(submitButton);
    
    // Should not call addStudent
    expect(gradebookStore.addStudent).not.toHaveBeenCalled();
    
    // Fill only name
    const nameInput = screen.getByLabelText(/student name/i);
    await fireEvent.input(nameInput, { target: { value: 'Test Student' } });
    await fireEvent.click(submitButton);
    
    // Still should not call without email
    expect(gradebookStore.addStudent).not.toHaveBeenCalled();
  });

  test('should close modal on cancel', async () => {
    render(StudentRoster);
    
    // Open modal
    const addButton = screen.getByRole('button', { name: /add student/i });
    await fireEvent.click(addButton);
    
    expect(screen.getByRole('heading', { name: /add new student/i })).toBeInTheDocument();
    
    // Cancel
    const cancelButton = screen.getByRole('button', { name: /cancel/i });
    await fireEvent.click(cancelButton);
    
    await waitFor(() => {
      expect(screen.queryByRole('heading', { name: /add new student/i })).not.toBeInTheDocument();
    });
  });
});
</file>

<file path="src/lib/components/ThemeToggle.svelte">
<script lang="ts">
  import { onMount } from 'svelte';
  import { Sun, Moon } from 'lucide-svelte';

  let isDarkMode = $state(false);
  let isClient = $state(false);

  onMount(() => {
    isClient = true;
    
    // Check localStorage for user preference
    const storedTheme = localStorage.getItem('theme');
    
    if (storedTheme) {
      isDarkMode = storedTheme === 'dark';
    } else {
      // If no stored preference, use OS preference
      isDarkMode = window.matchMedia('(prefers-color-scheme: dark)').matches;
    }
    
    applyTheme(isDarkMode);
    
    // Listen for OS theme changes
    window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', (e) => {
      // Only apply if user hasn't explicitly chosen a theme
      if (!localStorage.getItem('theme')) {
        isDarkMode = e.matches;
        applyTheme(isDarkMode);
      }
    });
  });

  function toggleTheme() {
    isDarkMode = !isDarkMode;
    applyTheme(isDarkMode);
    localStorage.setItem('theme', isDarkMode ? 'dark' : 'light');
  }

  function applyTheme(dark: boolean) {
    if (!isClient) return;
    
    // Apply for Tailwind
    if (dark) {
      document.documentElement.classList.add('dark');
    } else {
      document.documentElement.classList.remove('dark');
    }
    
    // Apply for DaisyUI
    document.documentElement.setAttribute('data-theme', dark ? 'dark' : 'light');
  }
</script>

<button
  onclick={toggleTheme}
  class="p-2 rounded-full hover:bg-accent transition-colors dark:text-highlight"
  aria-label={isDarkMode ? 'Switch to light mode' : 'Switch to dark mode'}
>
  {#if isDarkMode}
    <Sun class="w-5 h-5" />
  {:else}
    <Moon class="w-5 h-5" />
  {/if}
</button>
</file>

<file path="src/lib/index.ts">
// place files you want to import through the `$lib` alias in this folder.
</file>

<file path="src/lib/services/fileService.ts">
import { supabase } from '$lib/supabaseClient';
import type { 
  FileFolder, 
  FileMetadata, 
  FileShare, 
  FileFolderWithChildren, 
  FileMetadataWithFolder,
  UserFileStats,
  FileUploadProgress 
} from '$lib/types/files';
import { validateFile, getFileType } from '$lib/types/files';

export class FileService {
  private static readonly STORAGE_BUCKET = 'teacher-files';

  // =================== FOLDER OPERATIONS ===================

  /**
   * Get all folders for the current user
   */
  async getFolders(): Promise<FileFolder[]> {
    try {
      const { data, error } = await supabase
        .from('file_folders')
        .select('*')
        .order('name');

      if (error) throw error;
      return data || [];
    } catch (error) {
      console.error('Error fetching folders:', error);
      return [];
    }
  }

  /**
   * Get folder tree structure with nested children
   */
  async getFolderTree(): Promise<FileFolderWithChildren[]> {
    try {
      const folders = await this.getFolders();
      return this.buildFolderTree(folders);
    } catch (error) {
      console.error('Error building folder tree:', error);
      return [];
    }
  }

  /**
   * Create a new folder
   */
  async createFolder(name: string, parentId?: string): Promise<FileFolder | null> {
    try {
      const { data: { user } } = await supabase.auth.getUser();
      if (!user) throw new Error('User not authenticated');

      const { data, error } = await supabase
        .from('file_folders')
        .insert({
          user_id: user.id,
          name: name.trim(),
          parent_id: parentId || null
        })
        .select()
        .single();

      if (error) throw error;
      return data;
    } catch (error) {
      console.error('Error creating folder:', error);
      return null;
    }
  }

  /**
   * Delete a folder and all its contents
   */
  async deleteFolder(folderId: string): Promise<boolean> {
    try {
      // First, delete all files in the folder
      const files = await this.getFiles(folderId);
      for (const file of files) {
        await this.deleteFile(file.id);
      }

      // Then delete the folder
      const { error } = await supabase
        .from('file_folders')
        .delete()
        .eq('id', folderId);

      if (error) throw error;
      return true;
    } catch (error) {
      console.error('Error deleting folder:', error);
      return false;
    }
  }

  /**
   * Rename a folder
   */
  async renameFolder(folderId: string, newName: string): Promise<boolean> {
    try {
      const { error } = await supabase
        .from('file_folders')
        .update({ name: newName.trim() })
        .eq('id', folderId);

      if (error) throw error;
      return true;
    } catch (error) {
      console.error('Error renaming folder:', error);
      return false;
    }
  }

  // =================== FILE OPERATIONS ===================

  /**
   * Get all files for the current user, optionally filtered by folder
   */
  async getFiles(folderId?: string): Promise<FileMetadataWithFolder[]> {
    try {
      let query = supabase
        .from('file_metadata')
        .select(`
          *,
          folder:file_folders(*)
        `)
        .order('created_at', { ascending: false });

      if (folderId) {
        query = query.eq('folder_id', folderId);
      }

      const { data, error } = await query;

      if (error) throw error;
      return data || [];
    } catch (error) {
      console.error('Error fetching files:', error);
      return [];
    }
  }

  /**
   * Upload a file to Supabase Storage
   */
  async uploadFile(
    file: File, 
    folderId?: string,
    onProgress?: (progress: number) => void
  ): Promise<FileMetadata | null> {
    try {
      // Validate file
      const validation = validateFile(file);
      if (!validation.valid) {
        throw new Error(validation.error);
      }

      const { data: { user } } = await supabase.auth.getUser();
      if (!user) throw new Error('User not authenticated');

      // Generate unique file path
      const fileType = getFileType(file.name);
      const timestamp = Date.now();
      const fileName = `${timestamp}_${file.name}`;
      const storagePath = folderId 
        ? `${user.id}/${folderId}/${fileName}`
        : `${user.id}/${fileName}`;

      // Upload to Supabase Storage
      const { data: uploadData, error: uploadError } = await supabase.storage
        .from(FileService.STORAGE_BUCKET)
        .upload(storagePath, file, {
          cacheControl: '3600',
          upsert: false
        });

      if (uploadError) throw uploadError;
      if (onProgress) onProgress(50); // Upload complete, now saving metadata

      // Save file metadata to database
      const { data: metadataData, error: metadataError } = await supabase
        .from('file_metadata')
        .insert({
          user_id: user.id,
          folder_id: folderId || null,
          storage_path: uploadData.path,
          name: file.name,
          size: file.size,
          type: fileType,
          mime_type: file.type || null
        })
        .select()
        .single();

      if (metadataError) {
        // If metadata save fails, cleanup the uploaded file
        await supabase.storage
          .from(FileService.STORAGE_BUCKET)
          .remove([uploadData.path]);
        throw metadataError;
      }

      if (onProgress) onProgress(100);
      return metadataData;

    } catch (error) {
      console.error('Error uploading file:', error);
      throw error;
    }
  }

  /**
   * Download a file from Supabase Storage
   */
  async downloadFile(fileId: string): Promise<string | null> {
    try {
      // Get file metadata
      const { data: fileData, error: fileError } = await supabase
        .from('file_metadata')
        .select('storage_path, name')
        .eq('id', fileId)
        .single();

      if (fileError) throw fileError;

      // Get signed URL for download
      const { data, error } = await supabase.storage
        .from(FileService.STORAGE_BUCKET)
        .createSignedUrl(fileData.storage_path, 3600); // 1 hour expiry

      if (error) throw error;
      return data.signedUrl;

    } catch (error) {
      console.error('Error downloading file:', error);
      return null;
    }
  }

  /**
   * Delete a file
   */
  async deleteFile(fileId: string): Promise<boolean> {
    try {
      // Get file metadata first
      const { data: fileData, error: fileError } = await supabase
        .from('file_metadata')
        .select('storage_path')
        .eq('id', fileId)
        .single();

      if (fileError) throw fileError;

      // Delete from storage
      const { error: storageError } = await supabase.storage
        .from(FileService.STORAGE_BUCKET)
        .remove([fileData.storage_path]);

      if (storageError) {
        console.warn('Error deleting from storage:', storageError);
        // Continue with metadata deletion even if storage deletion fails
      }

      // Delete metadata
      const { error: metadataError } = await supabase
        .from('file_metadata')
        .delete()
        .eq('id', fileId);

      if (metadataError) throw metadataError;
      return true;

    } catch (error) {
      console.error('Error deleting file:', error);
      return false;
    }
  }

  /**
   * Rename a file
   */
  async renameFile(fileId: string, newName: string): Promise<boolean> {
    try {
      const { error } = await supabase
        .from('file_metadata')
        .update({ name: newName.trim() })
        .eq('id', fileId);

      if (error) throw error;
      return true;
    } catch (error) {
      console.error('Error renaming file:', error);
      return false;
    }
  }

  // =================== FILE SHARING ===================

  /**
   * Share a file with another user
   */
  async shareFile(
    fileId: string, 
    shareWithEmail: string, 
    permission: 'view' | 'edit' | 'delete' = 'view',
    expiresAt?: Date
  ): Promise<FileShare | null> {
    try {
      const { data: { user } } = await supabase.auth.getUser();
      if (!user) throw new Error('User not authenticated');

      // Find the user to share with
      const { data: shareWithUser, error: userError } = await supabase
        .from('app_users')
        .select('user_id')
        .eq('email', shareWithEmail)
        .single();

      if (userError || !shareWithUser) {
        throw new Error('User not found');
      }

      const { data, error } = await supabase
        .from('file_shares')
        .insert({
          file_id: fileId,
          shared_with: shareWithUser.user_id,
          shared_by: user.id,
          permission,
          expires_at: expiresAt?.toISOString() || null
        })
        .select()
        .single();

      if (error) throw error;
      return data;
    } catch (error) {
      console.error('Error sharing file:', error);
      return null;
    }
  }

  /**
   * Get files shared with the current user
   */
  async getSharedFiles(): Promise<FileMetadataWithFolder[]> {
    try {
      const { data, error } = await supabase
        .from('file_shares')
        .select(`
          *,
          file:file_metadata(
            *,
            folder:file_folders(*)
          )
        `)
        .eq('shared_with', (await supabase.auth.getUser()).data.user?.id)
        .is('expires_at', null)
        .or('expires_at.gt.' + new Date().toISOString());

      if (error) throw error;
      return data?.map(share => share.file).filter(Boolean) || [];
    } catch (error) {
      console.error('Error fetching shared files:', error);
      return [];
    }
  }

  // =================== STATISTICS ===================

  /**
   * Get file statistics for the current user
   */
  async getUserStats(): Promise<UserFileStats | null> {
    try {
      const { data, error } = await supabase
        .from('user_file_stats')
        .select('*')
        .single();

      if (error) throw error;
      return data;
    } catch (error) {
      console.error('Error fetching user stats:', error);
      return null;
    }
  }

  // =================== HELPER METHODS ===================

  /**
   * Build a nested folder tree structure
   */
  private buildFolderTree(folders: FileFolder[]): FileFolderWithChildren[] {
    const folderMap = new Map<string, FileFolderWithChildren>();
    const rootFolders: FileFolderWithChildren[] = [];

    // Create folder map
    folders.forEach(folder => {
      folderMap.set(folder.id, { ...folder, children: [] });
    });

    // Build tree structure
    folders.forEach(folder => {
      const folderWithChildren = folderMap.get(folder.id)!;
      
      if (folder.parent_id) {
        const parent = folderMap.get(folder.parent_id);
        if (parent) {
          parent.children!.push(folderWithChildren);
        }
      } else {
        rootFolders.push(folderWithChildren);
      }
    });

    return rootFolders;
  }

  /**
   * Create default folders for a new user
   */
  async createDefaultFolders(): Promise<void> {
    try {
      const { data: { user } } = await supabase.auth.getUser();
      if (!user) throw new Error('User not authenticated');

      // Call the database function
      const { error } = await supabase.rpc('create_default_folders', {
        user_id: user.id
      });

      if (error) throw error;
    } catch (error) {
      console.error('Error creating default folders:', error);
    }
  }

  /**
   * Get a public URL for viewing a file
   */
  async getFileUrl(storagePath: string): Promise<string | null> {
    try {
      const { data } = await supabase.storage
        .from('teacher-files')
        .createSignedUrl(storagePath, 3600); // 1 hour expiry

      return data?.signedUrl || null;
    } catch (error) {
      console.error('Error getting file URL:', error);
      return null;
    }
  }

  /**
   * Move a file to a different folder
   */
  async moveFile(fileId: string, newFolderId: string | null): Promise<boolean> {
    try {
      const { error } = await supabase
        .from('file_metadata')
        .update({ 
          folder_id: newFolderId,
          updated_at: new Date().toISOString()
        })
        .eq('id', fileId);

      if (error) throw error;
      return true;
    } catch (error) {
      console.error('Error moving file:', error);
      return false;
    }
  }
}

// Export singleton instance
export const fileService = new FileService();
</file>

<file path="src/lib/services/supabaseService.test.ts">
import { describe, test, expect, vi, beforeEach } from 'vitest';
import { SupabaseService } from './supabaseService';
import type { Tables } from '$lib/types/database';

// Mock the Supabase client
vi.mock('$lib/supabaseClient', () => ({
  supabase: {
    from: vi.fn(() => ({
      select: vi.fn().mockReturnThis(),
      insert: vi.fn().mockReturnThis(),
      update: vi.fn().mockReturnThis(),
      delete: vi.fn().mockReturnThis(),
      eq: vi.fn().mockReturnThis(),
      single: vi.fn().mockReturnThis()
    })),
    auth: {
      signInWithPassword: vi.fn(),
      signUp: vi.fn(),
      signOut: vi.fn(),
      resetPasswordForEmail: vi.fn(),
      getSession: vi.fn()
    }
  }
}));

// Mock browser check
vi.mock('$app/environment', () => ({
  browser: true
}));

describe('SupabaseService', () => {
  let service: SupabaseService;

  beforeEach(() => {
    vi.clearAllMocks();
    // Clear localStorage
    if (typeof window !== 'undefined') {
      window.localStorage.clear();
    }
    service = new SupabaseService();
  });

  describe('getItems', () => {
    test('should fetch items from Supabase when available', async () => {
      const mockData = [{ id: '1', name: 'Test Item' }];
      const { supabase } = await import('$lib/supabaseClient');
      
      const mockQuery = {
        select: vi.fn().mockResolvedValue({ data: mockData, error: null })
      };
      vi.mocked(supabase.from).mockReturnValue(mockQuery as any);

      const result = await service.getItems('test_table');

      expect(supabase.from).toHaveBeenCalledWith('test_table');
      expect(result).toEqual(mockData);
    });

    test('should fallback to localStorage on Supabase error', async () => {
      const mockLocalData = [{ id: '2', name: 'Local Item' }];
      localStorage.setItem('gradebook_test_table', JSON.stringify(mockLocalData));

      const { supabase } = await import('$lib/supabaseClient');
      const mockQuery = {
        select: vi.fn().mockResolvedValue({ data: null, error: new Error('Network error') })
      };
      vi.mocked(supabase.from).mockReturnValue(mockQuery as any);

      const result = await service.getItems('test_table');

      expect(result).toEqual(mockLocalData);
    });

    test('should return empty array when no data exists', async () => {
      const { supabase } = await import('$lib/supabaseClient');
      const mockQuery = {
        select: vi.fn().mockResolvedValue({ data: null, error: new Error('Not found') })
      };
      vi.mocked(supabase.from).mockReturnValue(mockQuery as any);

      const result = await service.getItems('empty_table');

      expect(result).toEqual([]);
    });
  });

  describe('createItem', () => {
    test('should create item in Supabase and localStorage', async () => {
      const newItem = { name: 'New Item' };
      const createdItem = { id: '3', ...newItem };
      
      const { supabase } = await import('$lib/supabaseClient');
      const mockQuery = {
        insert: vi.fn().mockReturnThis(),
        select: vi.fn().mockReturnThis(),
        single: vi.fn().mockResolvedValue({ data: createdItem, error: null })
      };
      vi.mocked(supabase.from).mockReturnValue(mockQuery as any);

      const result = await service.createItem('test_table', newItem);

      expect(mockQuery.insert).toHaveBeenCalledWith(newItem);
      expect(result).toEqual(createdItem);
      
      // Check localStorage was updated
      const localData = JSON.parse(localStorage.getItem('gradebook_test_table') || '[]');
      expect(localData).toContainEqual(createdItem);
    });

    test('should handle creation errors', async () => {
      const newItem = { name: 'New Item' };
      
      const { supabase } = await import('$lib/supabaseClient');
      const mockQuery = {
        insert: vi.fn().mockReturnThis(),
        select: vi.fn().mockReturnThis(),
        single: vi.fn().mockResolvedValue({ data: null, error: new Error('Creation failed') })
      };
      vi.mocked(supabase.from).mockReturnValue(mockQuery as any);

      await expect(service.createItem('test_table', newItem)).rejects.toThrow('Creation failed');
    });
  });

  describe('updateItem', () => {
    test('should update item with single key', async () => {
      const updates = { name: 'Updated Name' };
      const updatedItem = { id: '1', name: 'Updated Name' };
      
      const { supabase } = await import('$lib/supabaseClient');
      const mockQuery = {
        update: vi.fn().mockReturnThis(),
        eq: vi.fn().mockReturnThis(),
        select: vi.fn().mockReturnThis(),
        single: vi.fn().mockResolvedValue({ data: updatedItem, error: null })
      };
      vi.mocked(supabase.from).mockReturnValue(mockQuery as any);

      const result = await service.updateItem('test_table', '1', updates);

      expect(mockQuery.update).toHaveBeenCalledWith(updates);
      expect(mockQuery.eq).toHaveBeenCalledWith('id', '1');
      expect(result).toEqual(updatedItem);
    });

    test('should update item with composite key', async () => {
      const compositeKey = { student_id: '1', assignment_id: '2' };
      const updates = { points_earned: 95 };
      const updatedItem = { ...compositeKey, points_earned: 95 };
      
      const { supabase } = await import('$lib/supabaseClient');
      const mockQuery = {
        update: vi.fn().mockReturnThis(),
        eq: vi.fn().mockReturnThis(),
        select: vi.fn().mockReturnThis(),
        single: vi.fn().mockResolvedValue({ data: updatedItem, error: null })
      };
      vi.mocked(supabase.from).mockReturnValue(mockQuery as any);

      const result = await service.updateItem('grades', compositeKey, updates);

      expect(mockQuery.update).toHaveBeenCalledWith(updates);
      expect(mockQuery.eq).toHaveBeenCalledTimes(2);
      expect(mockQuery.eq).toHaveBeenCalledWith('student_id', '1');
      expect(mockQuery.eq).toHaveBeenCalledWith('assignment_id', '2');
      expect(result).toEqual(updatedItem);
    });
  });

  describe('deleteItem', () => {
    test('should delete item from Supabase and localStorage', async () => {
      // Setup localStorage with existing data
      const existingData = [
        { id: '1', name: 'Item 1' },
        { id: '2', name: 'Item 2' }
      ];
      localStorage.setItem('gradebook_test_table', JSON.stringify(existingData));

      const { supabase } = await import('$lib/supabaseClient');
      const mockQuery = {
        delete: vi.fn().mockReturnThis(),
        eq: vi.fn().mockResolvedValue({ error: null })
      };
      vi.mocked(supabase.from).mockReturnValue(mockQuery as any);

      await service.deleteItem('test_table', '1');

      expect(mockQuery.delete).toHaveBeenCalled();
      expect(mockQuery.eq).toHaveBeenCalledWith('id', '1');
      
      // Check localStorage was updated
      const localData = JSON.parse(localStorage.getItem('gradebook_test_table') || '[]');
      expect(localData).toHaveLength(1);
      expect(localData[0].id).toBe('2');
    });
  });

  describe('Auth methods', () => {
    test('signIn should authenticate user', async () => {
      const mockAuthData = {
        user: { id: '123', email: 'test@example.com' },
        session: { access_token: 'token' }
      };

      const { supabase } = await import('$lib/supabaseClient');
      vi.mocked(supabase.auth.signInWithPassword).mockResolvedValue({
        data: mockAuthData,
        error: null
      });

      const result = await service.signIn('test@example.com', 'password');

      expect(supabase.auth.signInWithPassword).toHaveBeenCalledWith({
        email: 'test@example.com',
        password: 'password'
      });
      expect(result).toEqual(mockAuthData);
    });

    test('signUp should create new user', async () => {
      const mockAuthData = {
        user: { id: '456', email: 'new@example.com' },
        session: null
      };

      const { supabase } = await import('$lib/supabaseClient');
      vi.mocked(supabase.auth.signUp).mockResolvedValue({
        data: mockAuthData,
        error: null
      });

      const result = await service.signUp('new@example.com', 'password', { 
        full_name: 'New User' 
      });

      expect(supabase.auth.signUp).toHaveBeenCalledWith({
        email: 'new@example.com',
        password: 'password',
        options: {
          data: { full_name: 'New User' }
        }
      });
      expect(result).toEqual(mockAuthData);
    });

    test('signOut should sign out user', async () => {
      const { supabase } = await import('$lib/supabaseClient');
      vi.mocked(supabase.auth.signOut).mockResolvedValue({ error: null });

      await service.signOut();

      expect(supabase.auth.signOut).toHaveBeenCalled();
    });

    test('resetPassword should send reset email', async () => {
      const { supabase } = await import('$lib/supabaseClient');
      vi.mocked(supabase.auth.resetPasswordForEmail).mockResolvedValue({ 
        data: {}, 
        error: null 
      });

      await service.resetPassword('test@example.com');

      expect(supabase.auth.resetPasswordForEmail).toHaveBeenCalledWith('test@example.com');
    });
  });

  describe('Profile methods', () => {
    test('getProfile should fetch user profile', async () => {
      const mockProfile = { id: '123', full_name: 'Test User', role: 'teacher' };
      
      const { supabase } = await import('$lib/supabaseClient');
      const mockQuery = {
        select: vi.fn().mockReturnThis(),
        eq: vi.fn().mockReturnThis(),
        single: vi.fn().mockResolvedValue({ data: mockProfile, error: null })
      };
      vi.mocked(supabase.from).mockReturnValue(mockQuery as any);

      const result = await service.getProfile('123');

      expect(mockQuery.eq).toHaveBeenCalledWith('id', '123');
      expect(result).toEqual(mockProfile);
    });

    test('createProfile should create new profile', async () => {
      const newProfile = { 
        id: '789', 
        email: 'test@example.com', 
        full_name: 'Test User',
        role: 'teacher' as const
      };
      
      const { supabase } = await import('$lib/supabaseClient');
      const mockQuery = {
        insert: vi.fn().mockReturnThis(),
        select: vi.fn().mockReturnThis(),
        single: vi.fn().mockResolvedValue({ data: newProfile, error: null })
      };
      vi.mocked(supabase.from).mockReturnValue(mockQuery as any);

      const result = await service.createProfile(newProfile);

      expect(mockQuery.insert).toHaveBeenCalledWith(newProfile);
      expect(result).toEqual(newProfile);
    });
  });

  describe('localStorage fallback', () => {
    test('should handle localStorage when Supabase is unavailable', async () => {
      // Force service to not use Supabase
      const localService = new SupabaseService('test', false);
      
      // Test creating item only in localStorage
      const newItem = { name: 'Local Only Item' };
      const result = await localService.createItem('test_table', newItem);
      
      expect(result).toHaveProperty('id');
      expect(result.name).toBe('Local Only Item');
      
      // Verify it's in localStorage
      const localData = JSON.parse(localStorage.getItem('test_test_table') || '[]');
      expect(localData).toHaveLength(1);
      expect(localData[0].name).toBe('Local Only Item');
    });
  });
});
</file>

<file path="src/lib/services/supabaseService.ts">
import type { Database, Tables, Inserts, Updates } from '$lib/types/database';

// Type helpers
type TableRecord = Record<string, unknown>;
type FilterOptions = Record<string, unknown>;
type CompositeKey = Record<string, unknown>;
type UserMetadata = Record<string, unknown>;

// Main service class to handle all Supabase operations
export class SupabaseService {
  private useSupabase: boolean;
  private readonly storagePrefix: string;

  constructor(storagePrefix: string = 'app') {
    // Supabase is now always available with hardcoded credentials
    // Default to whatever is stored in localStorage, or true if nothing stored
    const storedValue = typeof window !== 'undefined' 
      ? localStorage.getItem(`${storagePrefix}_useSupabase`)
      : null;
      
    this.useSupabase = storedValue !== null 
      ? storedValue === 'true'
      : true; // Default to true since Supabase is now available
      
    this.storagePrefix = storagePrefix;
  }

  // Getters and setters for useSupabase flag
  public isUsingSupabase(): boolean {
    return this.useSupabase;
  }

  public setUseSupabase(value: boolean): void {
    this.useSupabase = value;
    if (typeof window !== 'undefined') {
      localStorage.setItem(`${this.storagePrefix}_useSupabase`, String(value));
    }
  }

  // LocalStorage helpers
  public loadFromStorage<T>(key: string, defaultValue: T): T {
    if (typeof window === 'undefined') return defaultValue;

    try {
      const stored = localStorage.getItem(`${this.storagePrefix}_${key}`);
      return stored ? JSON.parse(stored) : defaultValue;
    } catch (_e) {
      // Error loading ${key} from localStorage: _e
      return defaultValue;
    }
  }

  public saveToStorage<T>(key: string, value: T): void {
    if (typeof window === 'undefined') return;

    try {
      localStorage.setItem(`${this.storagePrefix}_${key}`, JSON.stringify(value));
    } catch (_e) {
      // Error saving ${key} to localStorage: _e
    }
  }

  public removeFromStorage(key: string): void {
    if (typeof window === 'undefined') return;
    
    try {
      localStorage.removeItem(`${this.storagePrefix}_${key}`);
    } catch (_e) {
      // Error removing ${key} from localStorage: _e
    }
  }

  // Generic CRUD operations with fallback to localStorage
  public async getItems<T extends keyof Database['public']['Tables']>(
    table: T, 
    options: {
      columns?: string,
      joins?: string,
      filters?: FilterOptions
    } = {}
  ): Promise<Tables<T>[]> {
    // Only try Supabase if enabled
    if (this.useSupabase) {
      try {
        // Dynamically import supabase client to ensure it's properly initialized
        const { supabase } = await import('$lib/supabaseClient');
        
        let query = supabase
          .from(table)
          .select(options.columns ?? '*');
        
        // Add joins if provided
        if (options.joins) {
          query = query.select(`*, ${options.joins}`) as any;
        }
        
        // Add filters if provided
        if (options.filters) {
          for (const [key, value] of Object.entries(options.filters)) {
            query = query.eq(key, value);
          }
        }
        
        const { data, error } = await query;
        
        if (error) throw error;
        
        return (data as unknown) as Tables<T>[];
      } catch (_err) {
        // Error fetching data from ${String(table)}: _err
        // Return localStorage data as fallback
        return this.loadFromStorage<Tables<T>[]>(`${String(table)}`, []);
      }
    } else {
      // Just use localStorage if Supabase is disabled
      return this.loadFromStorage<Tables<T>[]>(`${String(table)}`, []);
    }
  }

  public async getItemById<T extends keyof Database['public']['Tables']>(
    table: T,
    id: string,
    options: {
      columns?: string,
      joins?: string
    } = {}
  ): Promise<Tables<T> | null> {
    if (this.useSupabase) {
      try {
        // Dynamically import supabase client to ensure it's properly initialized
        const { supabase } = await import('$lib/supabaseClient');
        
        let query = supabase
          .from(table)
          .select(options.columns ?? '*')
          .eq('id', id);
        
        // Add joins if provided
        if (options.joins) {
          query = query.select(`*, ${options.joins}`) as any;
        }
        
        const { data, error } = await query.single();
        
        if (error) throw error;
        
        return (data as unknown) as Tables<T>;
      } catch (_err) {
        // Error fetching item from ${String(table)}: _err
        // Fallback to localStorage - search for the item with matching ID
        const items = this.loadFromStorage<Tables<T>[]>(`${String(table)}`, []);
        return items.find(item => (item as TableRecord).id === id) ?? null;
      }
    } else {
      // Just use localStorage if Supabase is disabled
      const items = this.loadFromStorage<Tables<T>[]>(`${String(table)}`, []);
      return items.find(item => (item as TableRecord).id === id) ?? null;
    }
  }

  public async insertItem<T extends keyof Database['public']['Tables']>(
    table: T,
    data: Inserts<T>
  ): Promise<Tables<T> | null> {
    if (this.useSupabase) {
      try {
        // Dynamically import supabase client to ensure it's properly initialized
        const { supabase } = await import('$lib/supabaseClient');
        
        const { data: insertedData, error } = await supabase
          .from(table)
          .insert(data)
          .select()
          .single();
        
        if (error) throw error;
        
        // Also update localStorage for fallback
        const existingItems = this.loadFromStorage<Tables<T>[]>(`${String(table)}`, []);
        this.saveToStorage(`${String(table)}`, [...existingItems, insertedData]);
        
        return insertedData as Tables<T>;
      } catch (_err) {
        // Error inserting into ${String(table)}: _err
        // Fallback to localStorage only
        const existingItems = this.loadFromStorage<Tables<T>[]>(`${String(table)}`, []);
        // For localStorage we need an ID - use the one provided or generate a random one
        const itemWithId = {
          ...data,
          id: (data as TableRecord).id ?? crypto.randomUUID()
        };
        const newItems = [...existingItems, itemWithId];
        this.saveToStorage(`${String(table)}`, newItems);
        return itemWithId as Tables<T>;
      }
    } else {
      // Just use localStorage if Supabase is disabled
      const existingItems = this.loadFromStorage<Tables<T>[]>(`${String(table)}`, []);
      // For localStorage we need an ID - use the one provided or generate a random one
      const itemWithId = {
        ...data,
        id: (data as TableRecord).id ?? crypto.randomUUID()
      };
      const newItems = [...existingItems, itemWithId];
      this.saveToStorage(`${String(table)}`, newItems);
      return itemWithId as Tables<T>;
    }
  }

  public async updateItem<T extends keyof Database['public']['Tables']>(
    table: T,
    id: string,
    data: Updates<T>
  ): Promise<Tables<T> | null> {
    if (this.useSupabase) {
      try {
        // Dynamically import supabase client to ensure it's properly initialized
        const { supabase } = await import('$lib/supabaseClient');
        
        const { data: updatedData, error } = await supabase
          .from(table)
          .update(data)
          .eq('id', id)
          .select()
          .single();
        
        if (error) {
          console.error('🚨 Supabase updateItem error:', error);
          console.error('🚨 Update data sent:', JSON.stringify(data, null, 2));
          console.error('🚨 Table:', table, 'ID:', id);
          throw error;
        }
        
        // Also update localStorage for fallback
        const existingItems = this.loadFromStorage<Tables<T>[]>(`${String(table)}`, []);
        const updatedItems = existingItems.map(item => 
          (item as TableRecord).id === id ? updatedData : item
        );
        this.saveToStorage(`${String(table)}`, updatedItems);
        
        return updatedData as Tables<T>;
      } catch (_err) {
        // Error updating in ${String(table)}: _err
        // Fallback to localStorage only
        const existingItems = this.loadFromStorage<Tables<T>[]>(`${String(table)}`, []);
        const item = existingItems.find(item => (item as TableRecord).id === id);
        
        if (!item) return null;
        
        const updatedItem = { ...item, ...data };
        const updatedItems = existingItems.map(item => 
          (item as TableRecord).id === id ? updatedItem : item
        );
        this.saveToStorage(`${String(table)}`, updatedItems);
        return updatedItem as Tables<T>;
      }
    } else {
      // Just use localStorage if Supabase is disabled
      const existingItems = this.loadFromStorage<Tables<T>[]>(`${String(table)}`, []);
      const item = existingItems.find(item => (item as TableRecord).id === id);
      
      if (!item) return null;
      
      const updatedItem = { ...item, ...data };
      const updatedItems = existingItems.map(item => 
        (item as TableRecord).id === id ? updatedItem : item
      );
      this.saveToStorage(`${String(table)}`, updatedItems);
      return updatedItem as Tables<T>;
    }
  }

  public async deleteItem<T extends keyof Database['public']['Tables']>(
    table: T,
    id: string | Record<string, any>
  ): Promise<boolean> {
    try {
      if (this.useSupabase) {
        // Dynamically import supabase client to ensure it's properly initialized
        const { supabase } = await import('$lib/supabaseClient');
        
        let query = supabase.from(table).delete();
        
        if (typeof id === 'string') {
          // Use regular id-based deletion
          query = query.eq('id', id);
        } else {
          // Handle composite keys
          for (const [key, value] of Object.entries(id)) {
            query = query.eq(key, value);
          }
        }
        
        const { error } = await query;
        
        if (error) throw error;
      }
      
      // Update localStorage (for fallback or when Supabase is disabled)
      if (typeof id === 'string') {
        // Regular id-based deletion from localStorage
        const existingItems = this.loadFromStorage<Tables<T>[]>(`${String(table)}`, []);
        const itemExists = existingItems.some(item => (item as TableRecord).id === id);
        
        if (itemExists) {
          const filteredItems = existingItems.filter(item => (item as TableRecord).id !== id);
          this.saveToStorage(`${String(table)}`, filteredItems);
          return true;
        }
      } else {
        // Composite key deletion from localStorage
        const existingItems = this.loadFromStorage<Tables<T>[]>(`${String(table)}`, []);
        const filteredItems = existingItems.filter(item => {
          // Only keep items that don't match ALL of the composite key values
          for (const [key, value] of Object.entries(id)) {
            if ((item as TableRecord)[key] !== value) {
              return true; // Keep this item if any key doesn't match
            }
          }
          return false; // Filter out items that match all keys
        });
        
        this.saveToStorage(`${String(table)}`, filteredItems);
        return true;
      }
      
      return false; // Item didn't exist
    } catch (_err) {
      // Error deleting from ${String(table)}: err
      return false; // Return false on error
    }
  }

  // Specialized methods for relationships and more complex operations
  public async getItemsWithRelation<T extends keyof Database['public']['Tables']>(
    table: T,
    relationTable: string,
    foreignKey: string,
    relationId: string
  ): Promise<Tables<T>[]> {
    if (this.useSupabase) {
      try {
        // Dynamically import supabase client to ensure it's properly initialized
        const { supabase } = await import('$lib/supabaseClient');
        
        const { data, error } = await supabase
          .from(table)
          .select(`*, ${relationTable}!${foreignKey}(*)`)
          .eq(`${relationTable}.${foreignKey}`, relationId);
        
        if (error) throw error;
        
        return (data as unknown) as Tables<T>[];
      } catch (_err) {
        // Error fetching related data from ${String(table)}: err
        // Fallback to localStorage - this is harder with relations
        // A proper implementation would require understanding the schema
        return [];
      }
    } else {
      // Limited localStorage implementation - would need custom logic per relationship
      return [];
    }
  }

  // Authentication helpers that leverage Supabase auth
  public async getCurrentUser() {
    if (!this.useSupabase) return null;
    
    try {
      // Dynamically import supabase client to ensure it's properly initialized
      const { supabase } = await import('$lib/supabaseClient');
      
      const { data, error } = await supabase.auth.getUser();
      if (error) throw error;
      return data.user;
    } catch (_err) {
      // Error getting current user: err
      return null;
    }
  }

  public async signIn(email: string, password: string) {
    if (!this.useSupabase) return null;
    
    // Dynamically import supabase client to ensure it's properly initialized
    const { supabase } = await import('$lib/supabaseClient');
    
    const { data, error } = await supabase.auth.signInWithPassword({
      email,
      password
    });
    
    if (error) throw error;
    return data;
  }

  public async signUp(email: string, password: string, userData: UserMetadata) {
    if (!this.useSupabase) return null;
    
    // Dynamically import supabase client to ensure it's properly initialized
    const { supabase } = await import('$lib/supabaseClient');
    
    const { data, error } = await supabase.auth.signUp({
      email,
      password,
      options: {
        data: userData
      }
    });
    
    if (error) throw error;
    return data;
  }

  public async signOut() {
    if (!this.useSupabase) return;
    
    // Dynamically import supabase client to ensure it's properly initialized
    const { supabase } = await import('$lib/supabaseClient');
    
    const { error } = await supabase.auth.signOut();
    if (error) throw error;
  }

  public async resetPassword(email: string) {
    if (!this.useSupabase) return;
    
    const { supabase } = await import('$lib/supabaseClient');
    const { error } = await supabase.auth.resetPasswordForEmail(email);
    if (error) throw error;
  }

  public async getProfile(userId: string): Promise<Tables<'app_users'> | null> {
    return this.getItemById('app_users', userId);
  }

  public async createProfile(profile: Inserts<'app_users'>): Promise<Tables<'app_users'> | null> {
    return this.insertItem('app_users', profile);
  }

  public async updateProfile(userId: string, updates: Updates<'app_users'>): Promise<Tables<'app_users'> | null> {
    return this.updateItem('app_users', userId, updates);
  }
}


// Create and export a default instance
export const supabaseService = new SupabaseService();

// Export individual model services
export const gradebookService = new SupabaseService('gradebook');
export const jeopardyService = new SupabaseService('jeopardy');
export const observationLogService = new SupabaseService('observation_log');
</file>

<file path="src/lib/stores/auth.test.ts">
import { describe, test, expect, vi, beforeEach } from 'vitest';
import { get } from 'svelte/store';
import { authStore } from './auth';
import type { AuthSession, User } from '@supabase/supabase-js';

// Mock the supabaseService
vi.mock('$lib/services/supabaseService', () => ({
  supabaseService: {
    signIn: vi.fn(),
    signUp: vi.fn(),
    signOut: vi.fn(),
    resetPassword: vi.fn(),
    updateProfile: vi.fn(),
    getProfile: vi.fn(),
    createProfile: vi.fn(),
    getSession: vi.fn()
  }
}));

// Mock Supabase client
vi.mock('$lib/supabaseClient', () => ({
  supabase: {
    auth: {
      getSession: vi.fn().mockResolvedValue({ data: { session: null }, error: null }),
      onAuthStateChange: vi.fn().mockReturnValue({
        data: { subscription: { unsubscribe: vi.fn() } }
      })
    }
  }
}));

// Mock navigation
vi.mock('$app/navigation', () => ({
  goto: vi.fn()
}));

import { supabaseService } from '$lib/services/supabaseService';

describe('authStore', () => {
  beforeEach(() => {
    vi.clearAllMocks();
  });

  test('should have initial state', () => {
    const state = get(authStore);
    expect(state.user).toBeNull();
    expect(state.session).toBeNull();
    expect(state.loading).toBe(true);
    expect(state.error).toBeNull();
  });

  test('signIn should update state on success', async () => {
    const mockUser: User = {
      id: '123',
      email: 'test@example.com',
      aud: 'authenticated',
      role: 'authenticated',
      email_confirmed_at: '2024-01-01T00:00:00.000Z',
      last_sign_in_at: '2024-01-01T00:00:00.000Z',
      app_metadata: {},
      user_metadata: {},
      identities: [],
      created_at: '2024-01-01T00:00:00.000Z',
      updated_at: '2024-01-01T00:00:00.000Z'
    };
    
    const mockSession: AuthSession = {
      access_token: 'mock-access-token',
      refresh_token: 'mock-refresh-token',
      expires_in: 3600,
      expires_at: Math.floor(Date.now() / 1000) + 3600,
      token_type: 'bearer',
      user: mockUser
    };
    
    const mockProfile = { full_name: 'Test User', role: 'teacher' };
    
    vi.mocked(supabaseService.signIn).mockResolvedValue({
      session: mockSession,
      user: mockSession.user
    });
    vi.mocked(supabaseService.getProfile).mockResolvedValue(mockProfile);

    const result = await authStore.signIn('test@example.com', 'password');
    
    expect(result).toBe(true);
    const state = get(authStore);
    expect(state.user).toEqual(mockSession.user);
    expect(state.session).toEqual(mockSession);
    expect(state.profile).toEqual(mockProfile);
    expect(state.error).toBeNull();
  });

  test('signIn should handle errors', async () => {
    vi.mocked(supabaseService.signIn).mockRejectedValue(new Error('Invalid credentials'));

    const result = await authStore.signIn('test@example.com', 'wrong-password');
    
    expect(result).toBe(false);
    const state = get(authStore);
    expect(state.user).toBeNull();
    expect(state.error).toBe('Invalid credentials');
  });

  test('signUp should create user and profile', async () => {
    const mockUser = { id: '123', email: 'newuser@example.com' };
    const mockProfile = { full_name: 'New User', role: 'teacher' };
    
    vi.mocked(supabaseService.signUp).mockResolvedValue({
      user: mockUser,
      session: null
    });
    vi.mocked(supabaseService.createProfile).mockResolvedValue(mockProfile);

    const result = await authStore.signUp('newuser@example.com', 'password', {
      full_name: 'New User'
    });
    
    expect(result).toBe(true);
    expect(supabaseService.createProfile).toHaveBeenCalledWith({
      id: '123',
      email: 'newuser@example.com',
      full_name: 'New User',
      role: 'teacher'
    });
  });

  test('signUpStudent should create student with correct role', async () => {
    const mockUser = { id: '456', email: 'student@example.com' };
    
    vi.mocked(supabaseService.signUp).mockResolvedValue({
      user: mockUser,
      session: null
    });
    vi.mocked(supabaseService.createProfile).mockResolvedValue({
      full_name: 'Student Name',
      role: 'student'
    });

    const result = await authStore.signUpStudent({
      email: 'student@example.com',
      password: 'password',
      fullName: 'Student Name',
      joinCode: 'ABC123'
    });
    
    expect(result).toBe(true);
    expect(supabaseService.createProfile).toHaveBeenCalledWith(
      expect.objectContaining({
        role: 'student',
        join_code: 'ABC123'
      })
    );
  });

  test('signOut should clear state', async () => {
    vi.mocked(supabaseService.signOut).mockResolvedValue(undefined);

    await authStore.signOut();
    
    const state = get(authStore);
    expect(state.user).toBeNull();
    expect(state.session).toBeNull();
    expect(state.profile).toBeNull();
    expect(supabaseService.signOut).toHaveBeenCalled();
  });

  test('updateProfile should update profile state', async () => {
    const updates = { full_name: 'Updated Name' };
    const mockUpdatedProfile = { full_name: 'Updated Name', role: 'teacher' };
    
    vi.mocked(supabaseService.updateProfile).mockResolvedValue(mockUpdatedProfile);

    await authStore.updateProfile(updates);
    
    const state = get(authStore);
    expect(state.profile).toEqual(mockUpdatedProfile);
    expect(supabaseService.updateProfile).toHaveBeenCalledWith(updates);
  });

  test('resetPassword should handle success', async () => {
    vi.mocked(supabaseService.resetPassword).mockResolvedValue(undefined);

    const result = await authStore.resetPassword('test@example.com');
    
    expect(result).toBe(true);
    expect(supabaseService.resetPassword).toHaveBeenCalledWith('test@example.com');
  });

  test('resetPassword should handle errors', async () => {
    vi.mocked(supabaseService.resetPassword).mockRejectedValue(new Error('Email not found'));

    const result = await authStore.resetPassword('notfound@example.com');
    
    expect(result).toBe(false);
    const state = get(authStore);
    expect(state.error).toBe('Email not found');
  });
});
</file>

<file path="src/lib/stores/auth.ts">
// src/lib/stores/auth.ts
import { writable, derived } from 'svelte/store';
import type { AuthSession, User } from '@supabase/supabase-js';

function createAuthStore() {
  const user = writable<User | null>(null);
  const session = writable<AuthSession | null>(null);
  const loading = writable(true);
  const error = writable<string | null>(null);
  const isAuthenticated = derived(user, ($user) => !!$user);

  async function initialize() {
    loading.set(true);
    error.set(null);
    try {
      const { supabase } = await import('$lib/supabaseClient');
      const { data, error: sessionError } = await supabase.auth.getSession();
      if (sessionError) throw sessionError;
      if (data?.session) {
        session.set(data.session);
        user.set(data.session.user);
      }
      const { data: authListener } = supabase.auth.onAuthStateChange(
        (_, newSession) => {
          session.set(newSession);
          user.set(newSession?.user ?? null);
        }
      );
      return () => authListener.subscription.unsubscribe();
    } catch (err) {
      error.set(err instanceof Error ? err.message : 'Auth check failed');
    } finally {
      loading.set(false);
    }
  }

  async function signIn(email: string, password: string) {
    loading.set(true);
    error.set(null);
    try {
      const { supabase } = await import('$lib/supabaseClient');
      const { data, error: signInError } = await supabase.auth.signInWithPassword({
        email,
        password
      });
      if (signInError) {
        error.set(signInError.message.includes('Invalid login') ? 
          'Invalid email or password' : signInError.message);
        return false;
      }
      if (data?.session) {
        session.set(data.session);
        user.set(data.session.user);
        return true;
      }
      error.set('Sign in failed');
      return false;
    } catch (err) {
      error.set(err instanceof Error ? err.message : 'Sign in failed');
      return false;
    } finally {
      loading.set(false);
    }
  }

  async function signUp(email: string, password: string, userData = {}) {
    loading.set(true);
    error.set(null);
    try {
      const { supabase } = await import('$lib/supabaseClient');
      const { data, error: signUpError } = await supabase.auth.signUp({
        email,
        password,
        options: { data: userData }
      });
      if (signUpError) throw signUpError;
      if (data?.session) {
        session.set(data.session);
        user.set(data.session.user);
        return true;
      }
      return { needsEmailConfirmation: true };
    } catch (err) {
      error.set(err instanceof Error ? err.message : 'Sign up failed');
      return false;
    } finally {
      loading.set(false);
    }
  }

  async function signOut() {
    loading.set(true);
    error.set(null);
    try {
      const { supabase } = await import('$lib/supabaseClient');
      const { error: signOutError } = await supabase.auth.signOut();
      if (signOutError) throw signOutError;
      session.set(null);
      user.set(null);
      return true;
    } catch (err) {
      error.set(err instanceof Error ? err.message : 'Sign out failed');
      return false;
    } finally {
      loading.set(false);
    }
  }

  async function resetPassword(email: string) {
    loading.set(true);
    error.set(null);
    try {
      const { supabase } = await import('$lib/supabaseClient');
      const { error: resetError } = await supabase.auth.resetPasswordForEmail(email);
      if (resetError) throw resetError;
      return true;
    } catch (err) {
      error.set(err instanceof Error ? err.message : 'Password reset failed');
      return false;
    } finally {
      loading.set(false);
    }
  }

  async function updateUserProfile(userData: Record<string, unknown>) {
    loading.set(true);
    error.set(null);
    try {
      const { supabase } = await import('$lib/supabaseClient');
      const { data, error: updateError } = await supabase.auth.updateUser({ data: userData });
      if (updateError) throw updateError;
      if (data?.user) user.set(data.user);
      return true;
    } catch (err) {
      error.set(err instanceof Error ? err.message : 'Profile update failed');
      return false;
    } finally {
      loading.set(false);
    }
  }

  void initialize();

  return {
    subscribe: derived(
      [user, session, loading, error, isAuthenticated],
      ([$user, $session, $loading, $error, $isAuthenticated]) => ({
        user: $user,
        session: $session,
        loading: $loading,
        error: $error,
        isAuthenticated: $isAuthenticated
      })
    ).subscribe,
    signIn,
    signUp,
    signOut,
    resetPassword,
    updateUserProfile,
    initialize
  };
}

export const authStore = createAuthStore();
export const user = derived(authStore, ($store) => $store.user);
export const session = derived(authStore, ($store) => $store.session);
export const loading = derived(authStore, ($store) => $store.loading);
export const error = derived(authStore, ($store) => $store.error);
export const isAuthenticated = derived(authStore, ($store) => $store.isAuthenticated);
</file>

<file path="src/lib/stores/files.ts">
import { writable, derived, get } from 'svelte/store';
import type { 
  FileFolder, 
  FileMetadata, 
  FileFolderWithChildren, 
  FileMetadataWithFolder,
  UserFileStats,
  FileUploadProgress 
} from '$lib/types/files';
import { fileService } from '$lib/services/fileService';

// Store state interface
interface FileStoreState {
  folders: FileFolder[];
  files: FileMetadataWithFolder[];
  currentFolderId: string | null;
  uploadProgress: FileUploadProgress[];
  userStats: UserFileStats | null;
  isLoading: boolean;
  error: string | null;
  dataLoaded: boolean;
}

// Initial state
const initialState: FileStoreState = {
  folders: [],
  files: [],
  currentFolderId: null,
  uploadProgress: [],
  userStats: null,
  isLoading: false,
  error: null,
  dataLoaded: false
};

// Create the main store
const fileStore = writable<FileStoreState>(initialState);

// Helper function to update store
function updateStore(updater: (state: FileStoreState) => FileStoreState) {
  fileStore.update(updater);
}

// Helper function to set loading state
function setLoading(loading: boolean) {
  updateStore(state => ({ ...state, isLoading: loading }));
}

// Helper function to set error
function setError(error: string | null) {
  updateStore(state => ({ ...state, error }));
}

// Derived stores for computed values
export const folders = derived(fileStore, $store => $store.folders);
export const files = derived(fileStore, $store => $store.files);
export const currentFolderId = derived(fileStore, $store => $store.currentFolderId);
export const uploadProgress = derived(fileStore, $store => $store.uploadProgress);
export const userStats = derived(fileStore, $store => $store.userStats);
export const isLoading = derived(fileStore, $store => $store.isLoading);
export const error = derived(fileStore, $store => $store.error);

// Derived store for folder tree
export const folderTree = derived(fileStore, $store => {
  return buildFolderTree($store.folders);
});

// Derived store for current folder files
export const currentFolderFiles = derived(
  [fileStore], 
  ([$store]) => {
    if ($store.currentFolderId === null) {
      // Root level files (no folder)
      return $store.files.filter(file => !file.folder_id);
    } else {
      return $store.files.filter(file => file.folder_id === $store.currentFolderId);
    }
  }
);

// Derived store for file statistics
export const fileStats = derived(fileStore, $store => {
  const totalFiles = $store.files.length;
  const totalSize = $store.files.reduce((sum, file) => sum + file.size, 0);
  const folderCount = $store.folders.length;
  
  return {
    totalFiles,
    totalSize,
    folderCount,
    formattedSize: formatFileSize(totalSize)
  };
});

// Helper function to build folder tree
function buildFolderTree(folders: FileFolder[]): FileFolderWithChildren[] {
  const folderMap = new Map<string, FileFolderWithChildren>();
  const rootFolders: FileFolderWithChildren[] = [];

  // Create folder map
  folders.forEach(folder => {
    folderMap.set(folder.id, { ...folder, children: [] });
  });

  // Build tree structure
  folders.forEach(folder => {
    const folderWithChildren = folderMap.get(folder.id)!;
    
    if (folder.parent_id) {
      const parent = folderMap.get(folder.parent_id);
      if (parent) {
        parent.children!.push(folderWithChildren);
      }
    } else {
      rootFolders.push(folderWithChildren);
    }
  });

  return rootFolders;
}

// Helper function to format file size
function formatFileSize(bytes: number): string {
  if (bytes === 0) return '0 Bytes';
  
  const k = 1024;
  const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];
  const i = Math.floor(Math.log(bytes) / Math.log(k));
  
  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
}

// =================== ACTIONS ===================

export const filesActions = {
  // Ensure data is loaded
  async ensureDataLoaded() {
    const state = get(fileStore);
    if (state.dataLoaded) return;
    await this.loadAllData();
  },

  // Load all files and folders
  async loadAllData() {
    try {
      setLoading(true);
      setError(null);

      const [folders, files, stats] = await Promise.all([
        fileService.getFolders(),
        fileService.getFiles(),
        fileService.getUserStats()
      ]);

      updateStore(state => ({
        ...state,
        folders,
        files,
        userStats: stats,
        dataLoaded: true
      }));

    } catch (err) {
      console.error('Error loading file data:', err);
      setError(err instanceof Error ? err.message : 'Failed to load files');
    } finally {
      setLoading(false);
    }
  },

  // Set current folder
  setCurrentFolder(folderId: string | null) {
    updateStore(state => ({ ...state, currentFolderId: folderId }));
  },

  // Create folder
  async createFolder(name: string, parentId?: string) {
    try {
      setError(null);
      const newFolder = await fileService.createFolder(name, parentId);
      
      if (newFolder) {
        updateStore(state => ({
          ...state,
          folders: [...state.folders, newFolder]
        }));
        return newFolder;
      }
      throw new Error('Failed to create folder');
    } catch (err) {
      console.error('Error creating folder:', err);
      setError(err instanceof Error ? err.message : 'Failed to create folder');
      return null;
    }
  },

  // Delete folder
  async deleteFolder(folderId: string) {
    try {
      setError(null);
      const success = await fileService.deleteFolder(folderId);
      
      if (success) {
        updateStore(state => ({
          ...state,
          folders: state.folders.filter(f => f.id !== folderId),
          files: state.files.filter(f => f.folder_id !== folderId)
        }));
        return true;
      }
      throw new Error('Failed to delete folder');
    } catch (err) {
      console.error('Error deleting folder:', err);
      setError(err instanceof Error ? err.message : 'Failed to delete folder');
      return false;
    }
  },

  // Upload file
  async uploadFile(file: File, folderId?: string) {
    try {
      setError(null);
      
      // Add to upload progress
      const progressItem: FileUploadProgress = {
        file,
        progress: 0,
        status: 'uploading'
      };

      updateStore(state => ({
        ...state,
        uploadProgress: [...state.uploadProgress, progressItem]
      }));

      // Upload file with progress tracking
      const uploadedFile = await fileService.uploadFile(
        file, 
        folderId,
        (progress) => {
          updateStore(state => ({
            ...state,
            uploadProgress: state.uploadProgress.map(item => 
              item.file === file ? { ...item, progress } : item
            )
          }));
        }
      );

      if (uploadedFile) {
        // Add to files list
        updateStore(state => ({
          ...state,
          files: [uploadedFile, ...state.files],
          uploadProgress: state.uploadProgress.map(item => 
            item.file === file 
              ? { ...item, progress: 100, status: 'success' } 
              : item
          )
        }));

        // Remove from progress after 2 seconds
        setTimeout(() => {
          updateStore(state => ({
            ...state,
            uploadProgress: state.uploadProgress.filter(item => item.file !== file)
          }));
        }, 2000);

        return uploadedFile;
      }
      throw new Error('Failed to upload file');

    } catch (err) {
      console.error('Error uploading file:', err);
      const errorMessage = err instanceof Error ? err.message : 'Failed to upload file';
      setError(errorMessage);

      // Update progress with error
      updateStore(state => ({
        ...state,
        uploadProgress: state.uploadProgress.map(item => 
          item.file === file 
            ? { ...item, status: 'error', error: errorMessage } 
            : item
        )
      }));

      return null;
    }
  },

  // Delete file
  async deleteFile(fileId: string) {
    try {
      setError(null);
      const success = await fileService.deleteFile(fileId);
      
      if (success) {
        updateStore(state => ({
          ...state,
          files: state.files.filter(f => f.id !== fileId)
        }));
        return true;
      }
      throw new Error('Failed to delete file');
    } catch (err) {
      console.error('Error deleting file:', err);
      setError(err instanceof Error ? err.message : 'Failed to delete file');
      return false;
    }
  },

  // Move file to different folder
  async moveFile(fileId: string, newFolderId: string | null) {
    try {
      setError(null);
      const success = await fileService.moveFile(fileId, newFolderId);
      
      if (success) {
        updateStore(state => ({
          ...state,
          files: state.files.map(f => 
            f.id === fileId 
              ? { ...f, folder_id: newFolderId }
              : f
          )
        }));
        return true;
      }
      throw new Error('Failed to move file');
    } catch (err) {
      console.error('Error moving file:', err);
      setError(err instanceof Error ? err.message : 'Failed to move file');
      return false;
    }
  },

  // Download file
  async downloadFile(fileId: string, fileName: string) {
    try {
      setError(null);
      const downloadUrl = await fileService.downloadFile(fileId);
      
      if (downloadUrl) {
        // Create download link
        const link = document.createElement('a');
        link.href = downloadUrl;
        link.download = fileName;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
        return true;
      }
      throw new Error('Failed to get download URL');
    } catch (err) {
      console.error('Error downloading file:', err);
      setError(err instanceof Error ? err.message : 'Failed to download file');
      return false;
    }
  },

  // Clear error
  clearError() {
    setError(null);
  },

  // Refresh data
  async refresh() {
    updateStore(state => ({ ...state, dataLoaded: false }));
    await this.loadAllData();
  }
};

// Export the main store
export { fileStore };
</file>

<file path="src/lib/stores/gradebook.test.ts">
import { describe, test, expect, vi, beforeEach } from 'vitest';
import { get } from 'svelte/store';
import { gradebookStore } from './gradebook';

// Mock the supabaseService
vi.mock('$lib/services/supabaseService', () => ({
  supabaseService: {
    getItems: vi.fn(),
    createItem: vi.fn(),
    updateItem: vi.fn(),
    deleteItem: vi.fn()
  }
}));

// Mock model converters
vi.mock('$lib/utils/modelConverters', () => ({
  dbStudentToAppStudent: vi.fn((db) => ({
    id: db.id,
    name: db.name,
    email: db.email,
    joinCode: db.join_code
  })),
  dbCategoryToAppCategory: vi.fn((db) => ({
    id: db.id,
    name: db.name,
    weight: db.weight
  })),
  dbAssignmentToAppAssignment: vi.fn((db) => ({
    id: db.id,
    name: db.name,
    categoryId: db.category_id,
    totalPoints: db.total_points,
    dueDate: db.due_date
  })),
  dbGradeToAppGrade: vi.fn((db) => ({
    id: db.id,
    studentId: db.student_id,
    assignmentId: db.assignment_id,
    pointsEarned: db.points_earned,
    comments: db.comments
  }))
}));

import { supabaseService } from '$lib/services/supabaseService';

describe('gradebookStore', () => {
  beforeEach(() => {
    vi.clearAllMocks();
    // Reset store state
    gradebookStore.reset();
  });

  test('should have initial state', () => {
    const state = get(gradebookStore);
    expect(state.students).toEqual([]);
    expect(state.categories).toEqual([]);
    expect(state.assignments).toEqual([]);
    expect(state.grades).toEqual([]);
    expect(state.loading).toBe(false);
    expect(state.error).toBeNull();
  });

  test('loadAllData should fetch all data', async () => {
    const mockStudents = [{ id: '1', name: 'Student 1', email: 'student1@test.com', join_code: null }];
    const mockCategories = [{ id: '1', name: 'Homework', weight: 0.3 }];
    const mockAssignments = [{ id: '1', name: 'HW1', category_id: '1', total_points: 100, due_date: null }];
    const mockGrades = [{ id: '1', student_id: '1', assignment_id: '1', points_earned: 95, comments: null }];

    vi.mocked(supabaseService.getItems)
      .mockResolvedValueOnce(mockStudents)
      .mockResolvedValueOnce(mockCategories)
      .mockResolvedValueOnce(mockAssignments)
      .mockResolvedValueOnce(mockGrades);

    await gradebookStore.loadAllData();

    const state = get(gradebookStore);
    expect(state.students).toHaveLength(1);
    expect(state.categories).toHaveLength(1);
    expect(state.assignments).toHaveLength(1);
    expect(state.grades).toHaveLength(1);
    expect(state.loading).toBe(false);
  });

  test('addStudent should create new student', async () => {
    const newStudent = { name: 'New Student', email: 'new@test.com' };
    const mockCreatedStudent = { id: '2', ...newStudent, join_code: null };

    vi.mocked(supabaseService.createItem).mockResolvedValue(mockCreatedStudent);

    await gradebookStore.addStudent(newStudent);

    expect(supabaseService.createItem).toHaveBeenCalledWith('students', newStudent);
    const state = get(gradebookStore);
    expect(state.students).toHaveLength(1);
    expect(state.students[0].name).toBe('New Student');
  });

  test('updateStudent should update existing student', async () => {
    // Setup initial student
    const initialStudent = { id: '1', name: 'Student 1', email: 'student1@test.com', join_code: null };
    vi.mocked(supabaseService.getItems).mockResolvedValueOnce([initialStudent]);
    await gradebookStore.loadStudents();

    // Update student
    const updates = { name: 'Updated Student' };
    const mockUpdatedStudent = { ...initialStudent, ...updates };
    vi.mocked(supabaseService.updateItem).mockResolvedValue(mockUpdatedStudent);

    await gradebookStore.updateStudent('1', updates);

    expect(supabaseService.updateItem).toHaveBeenCalledWith('students', '1', updates);
    const state = get(gradebookStore);
    expect(state.students[0].name).toBe('Updated Student');
  });

  test('deleteStudent should remove student', async () => {
    // Setup initial student
    const initialStudent = { id: '1', name: 'Student 1', email: 'student1@test.com', join_code: null };
    vi.mocked(supabaseService.getItems).mockResolvedValueOnce([initialStudent]);
    await gradebookStore.loadStudents();

    // Delete student
    vi.mocked(supabaseService.deleteItem).mockResolvedValue(undefined);

    await gradebookStore.deleteStudent('1');

    expect(supabaseService.deleteItem).toHaveBeenCalledWith('students', '1');
    const state = get(gradebookStore);
    expect(state.students).toHaveLength(0);
  });

  test('addCategory should create new category', async () => {
    const newCategory = { name: 'Tests', weight: 0.4 };
    const mockCreatedCategory = { id: '1', ...newCategory };

    vi.mocked(supabaseService.createItem).mockResolvedValue(mockCreatedCategory);

    await gradebookStore.addCategory(newCategory);

    expect(supabaseService.createItem).toHaveBeenCalledWith('categories', newCategory);
    const state = get(gradebookStore);
    expect(state.categories).toHaveLength(1);
    expect(state.categories[0].name).toBe('Tests');
  });

  test('addAssignment should create new assignment', async () => {
    const newAssignment = { name: 'Test 1', categoryId: '1', totalPoints: 100 };
    const mockCreatedAssignment = { 
      id: '1', 
      name: 'Test 1',
      category_id: '1',
      total_points: 100,
      due_date: null
    };

    vi.mocked(supabaseService.createItem).mockResolvedValue(mockCreatedAssignment);

    await gradebookStore.addAssignment(newAssignment);

    expect(supabaseService.createItem).toHaveBeenCalledWith('assignments', {
      name: 'Test 1',
      category_id: '1',
      total_points: 100
    });
    const state = get(gradebookStore);
    expect(state.assignments).toHaveLength(1);
  });

  test('updateGrade should update existing grade', async () => {
    const studentId = '1';
    const assignmentId = '1';
    const updates = { pointsEarned: 90 };
    
    const mockUpdatedGrade = {
      id: '1',
      student_id: studentId,
      assignment_id: assignmentId,
      points_earned: 90,
      comments: null
    };

    vi.mocked(supabaseService.updateItem).mockResolvedValue(mockUpdatedGrade);

    await gradebookStore.updateGrade(studentId, assignmentId, updates);

    expect(supabaseService.updateItem).toHaveBeenCalledWith(
      'grades',
      { student_id: studentId, assignment_id: assignmentId },
      { points_earned: 90 }
    );
  });

  test('computed values should calculate correctly', () => {
    // Setup test data using the store's internal state
    const state = get(gradebookStore);
    
    // Directly set state for testing computed values
    state.students.push({ id: '1', name: 'Student 1', email: 'test@test.com' });
    state.categories.push({ id: '1', name: 'Tests', weight: 0.5 });
    state.assignments.push({ 
      id: '1', 
      name: 'Test 1', 
      categoryId: '1', 
      totalPoints: 100,
      dueDate: null
    });
    state.grades.push({
      id: '1',
      studentId: '1',
      assignmentId: '1',
      pointsEarned: 90,
      comments: null
    });

    // Test computed values
    const computedState = get(gradebookStore);
    expect(computedState.students).toHaveLength(1);
    expect(computedState.categories).toHaveLength(1);
    expect(computedState.assignments).toHaveLength(1);
    expect(computedState.grades).toHaveLength(1);
  });

  test('error handling should update error state', async () => {
    const errorMessage = 'Failed to load students';
    vi.mocked(supabaseService.getItems).mockRejectedValue(new Error(errorMessage));

    await gradebookStore.loadStudents();

    const state = get(gradebookStore);
    expect(state.error).toBe(errorMessage);
    expect(state.loading).toBe(false);
  });
});
</file>

<file path="src/lib/stores/gradebook.ts">
// src/lib/stores/gradebook.ts
import { writable, derived, get } from 'svelte/store';
import type { Student, Category, Assignment, Grade } from '$lib/types/gradebook';
import { gradebookService } from '$lib/services/supabaseService';
import { 
  dbStudentToAppStudent, 
  dbCategoryToAppCategory, 
  dbAssignmentToAppAssignment, 
  dbGradeToAppGrade 
} from '$lib/utils/modelConverters';

function createGradebookStore() {
  // Initialize stores with empty data or data from localStorage
  const students = writable<Student[]>([]);
  const categories = writable<Category[]>([]);
  const selectedCategoryId = writable<string | null>(
    gradebookService.loadFromStorage('selectedCategoryId', null)
  );
  const assignments = writable<Assignment[]>([]);
  const grades = writable<Grade[]>([]);
  const isLoading = writable(false);
  const error = writable<string | null>(null);
  const dataLoaded = writable(false);

  // Get current state of useSupabase from service
  const useSupabase = writable(gradebookService.isUsingSupabase());

  // Create a derived store for the entire state
  const store = derived(
    [students, categories, selectedCategoryId, assignments, grades, isLoading, error, useSupabase, dataLoaded],
    ([$students, $categories, $selectedCategoryId, $assignments, $grades, $isLoading, $error, $useSupabase, $dataLoaded]) => {
      return {
        // State values
        students: $students,
        categories: $categories,
        selectedCategoryId: $selectedCategoryId,
        assignments: $assignments,
        grades: $grades,
        isLoading: $isLoading,
        error: $error,
        useSupabase: $useSupabase,
        dataLoaded: $dataLoaded,
        
        // Computed values
        getGlobalStudents: $students,
        getCategories: $categories,
        getSelectedCategory: $selectedCategoryId 
          ? $categories.find(cat => cat.id === $selectedCategoryId) || null 
          : null,
        getStudentsInSelectedCategory: $selectedCategoryId
          ? $students.filter(st => {
              const cat = $categories.find(c => c.id === $selectedCategoryId);
              return cat ? cat.studentIds.includes(st.id) : false;
            })
          : [],
        getAssignmentsForSelectedCategory: $selectedCategoryId
          ? $assignments.filter(asgn => asgn.categoryId === $selectedCategoryId)
          : []
      };
    }
  );

  // Load all data from Supabase or localStorage
  async function loadAllData() {
    isLoading.set(true);
    error.set(null);
    
    try {
      // Load students
      const studentsData = await gradebookService.getItems('students');
      
      // Load categories
      const categoriesData = await gradebookService.getItems('categories');
      
      // Load category_students relations
      const categoryStudentsData = await gradebookService.getItems('category_students');
      
      // Load assignments
      const assignmentsData = await gradebookService.getItems('assignments');
      
      // Load grades
      const gradesData = await gradebookService.getItems('grades');

      // Transform data to match our store format
      const transformedStudents = studentsData.map(dbStudentToAppStudent);
      
      const transformedCategories = categoriesData.map((cat) =>
        dbCategoryToAppCategory(cat, categoryStudentsData)
      );
      
      const transformedAssignments = assignmentsData.map(dbAssignmentToAppAssignment);
      
      const transformedGrades = gradesData.map(dbGradeToAppGrade);

      // Update stores
      students.set(transformedStudents);
      categories.set(transformedCategories);
      assignments.set(transformedAssignments);
      grades.set(transformedGrades);

      // Select first category if none selected
      if (categoriesData.length > 0 && get(selectedCategoryId) === null) {
        selectedCategoryId.set(categoriesData[0].id);
        gradebookService.saveToStorage('selectedCategoryId', categoriesData[0].id);
      }
      
      // Mark data as loaded
      dataLoaded.set(true);
      
    } catch (err: any) {
      // Error loading data: err
      error.set(err.message ?? 'Failed to load data');
    } finally {
      isLoading.set(false);
    }
  }

  // Student management
  async function addGlobalStudent(name: string): Promise<string | null> {
    const trimmed = name.trim();
    if (!trimmed) return null;
    
    try {
      // Insert into database or localStorage
      const result = await gradebookService.insertItem('students', { 
        name: trimmed
      });
      
      if (!result) throw new Error('Failed to add student');
      
      // Update local store
      const newStudent = dbStudentToAppStudent(result);
      students.update((arr: Student[]) => [...arr, newStudent]);
      
      return newStudent.id;
    } catch (err: any) {
      // Error adding student: err
      error.set(err.message ?? 'Failed to add student');
      return null;
    }
  }

  // Category management
  async function addCategory(name: string, userId?: string): Promise<void> {
    const trimmed = name.trim();
    if (!trimmed) return;
    
    try {
      // Insert into database or localStorage
      const result = await gradebookService.insertItem('categories', { 
        name: trimmed,
        user_id: userId, // Include user_id if provided
        class_id: '0c741791-d46d-4c19-978c-e0fcf4322283' // Use default class ID
      });
      
      if (!result) throw new Error('Failed to add category');
      
      // Update local store
      const newCategory: Category = {
        id: result.id,
        name: result.name,
        studentIds: []
      };

      categories.update((arr: Category[]) => [...arr, newCategory]);
      selectedCategoryId.update((cur: string | null) => cur ?? result.id);
      
      // Save selected category ID
      gradebookService.saveToStorage('selectedCategoryId', get(selectedCategoryId));
    } catch (err: any) {
      // Error adding category: err
      error.set(err.message ?? 'Failed to add category');
    }
  }

  function selectCategory(id: string | null): void {
    selectedCategoryId.set(id);
    gradebookService.saveToStorage('selectedCategoryId', id);
  }

  // Student assignment to category
  async function assignStudentToCategory(studentId: string, categoryId: string): Promise<void> {
    try {
      // Insert relationship into database or localStorage
      await gradebookService.insertItem('category_students', {
        category_id: categoryId,
        student_id: studentId
      });
      
      // Update local store
      categories.update((cats: Category[]) =>
        cats.map((cat: Category) =>
          cat.id === categoryId && !cat.studentIds.includes(studentId)
            ? { ...cat, studentIds: [...cat.studentIds, studentId] }
            : cat
        )
      );
    } catch (err: any) {
      // Error assigning student to category: err
      error.set(err.message ?? 'Failed to assign student');
    }
  }

  function removeStudentFromCategoryHelper(cat: Category, categoryId: string, studentId: string): Category {
    if (cat.id !== categoryId) return cat;
    return { ...cat, studentIds: cat.studentIds.filter((id: string) => id !== studentId) };
  }

  async function removeStudentFromCategory(studentId: string, categoryId: string): Promise<void> {
    try {
      // Get the specific category_students entry
      const categoryStudents = await gradebookService.getItems('category_students', {
        filters: {
          category_id: categoryId,
          student_id: studentId
        }
      });
      
      if (categoryStudents.length > 0) {
        // For tables that use composite keys instead of an 'id' field
        await gradebookService.deleteItem('category_students', {
          category_id: categoryId,
          student_id: studentId
        });
      }
      
      // Update local store
      categories.update((cats: Category[]) =>
        cats.map((cat: Category) => removeStudentFromCategoryHelper(cat, categoryId, studentId))
      );
    } catch (err: any) {
      // Error removing student from category: err
      error.set(err.message ?? 'Failed to remove student');
    }
  }

  // Assignment management
  async function addAssignmentToCategory(name: string, maxPoints: number, categoryId: string): Promise<void> {
    const trimmed = name.trim();
    if (!trimmed || maxPoints <= 0) return;
    
    try {
      // Insert into database or localStorage
      const result = await gradebookService.insertItem('assignments', {
        name: trimmed,
        max_points: maxPoints,
        category_id: categoryId
      });
      
      if (!result) throw new Error('Failed to add assignment');
      
      // Update local store
      const newAssignment = dbAssignmentToAppAssignment(result);
      assignments.update((arr: Assignment[]) => [...arr, newAssignment]);
    } catch (err: any) {
      // Error adding assignment: err
      error.set(err.message ?? 'Failed to add assignment');
    }
  }

  // Grade recording
  async function recordGrade(studentId: string, assignmentId: string, points: number): Promise<void> {
    const pts = Math.max(0, points);
    
    try {
      // Check if grade already exists
      const existingGrades = await gradebookService.getItems('grades', {
        filters: {
          student_id: studentId,
          assignment_id: assignmentId
        }
      });
      
      if (existingGrades.length > 0) {
        // Update existing grade
        await gradebookService.updateItem('grades', existingGrades[0].id, {
          points: pts
        });
      } else {
        // Insert new grade
        await gradebookService.insertItem('grades', {
          student_id: studentId,
          assignment_id: assignmentId,
          points: pts
        });
      }
      
      // Update local store
      grades.update((arr: Grade[]) => {
        const idx = arr.findIndex(
          (g: Grade) => g.studentId === studentId && g.assignmentId === assignmentId
        );
        if (idx > -1) {
          const newArr = [...arr];
          newArr[idx].points = pts;
          return newArr;
        }
        return [...arr, { studentId, assignmentId, points: pts }];
      });
    } catch (err: any) {
      // Error recording grade: err
      error.set(err.message ?? 'Failed to record grade');
    }
  }

  // Student average calculation (no change needed - works with local data)
  function studentAverageInCategory(studentId: string, categoryId: string): number {
    const assigns = get(assignments).filter((a: Assignment) => a.categoryId === categoryId);
    if (assigns.length === 0) return 0;

    const currentGrades = get(grades);
    let earned = 0;
    let possible = 0;

    for (const a of assigns) {
      const g = currentGrades.find((gr: Grade) => gr.assignmentId === a.id && gr.studentId === studentId);
      if (g) earned += g.points;
      possible += a.maxPoints;
    }

    return possible > 0 ? parseFloat(((earned / possible) * 100).toFixed(1)) : 0;
  }

  // Clear all data
  async function clearAllData(): Promise<void> {
    try {
      // Clear all from database or localStorage
      const tables = ['grades', 'category_students', 'assignments', 'categories', 'students'];
      
      for (const table of tables) {
        const items = await gradebookService.getItems(table as any);
        for (const item of items) {
          await gradebookService.deleteItem(table as any, item.id);
        }
      }
      
      // Clear local stores
      students.set([]);
      categories.set([]);
      selectedCategoryId.set(null);
      assignments.set([]);
      grades.set([]);
      
      // Clear localStorage
      gradebookService.removeFromStorage('selectedCategoryId');
    } catch (err: any) {
      // Error clearing data: err
      error.set(err.message ?? 'Failed to clear data');
    }
  }

  // Toggle storage mode
  function setUseSupabase(value: boolean): void {
    useSupabase.set(value);
    gradebookService.setUseSupabase(value);
    if (value) {
      // If enabling Supabase, load data from it
      void loadAllData();
    }
  }

  // Lazy loading - don't load data until explicitly requested
  async function ensureDataLoaded() {
    try {
      // Check if data is already loaded
      if (get(dataLoaded)) {
        // GradebookStore: Data already loaded
        return true;
      }

      // Check if we should use Supabase
      if (!get(useSupabase)) {
        // GradebookStore: Not using Supabase, loading from localStorage
        dataLoaded.set(true);
        return true;
      }

      // Import supabase client dynamically if needed to ensure it's initialized
      const { supabase } = await import('$lib/supabaseClient');

      // Check authentication state
      const { data: authData } = await supabase.auth.getSession();
      const isAuthenticated = !!authData?.session?.user;

      // Log auth state and proceed with loading
      // GradebookStore: User is/is not authenticated
      
      // Load data
      // GradebookStore: Loading data from Supabase...
      await loadAllData();
      return true;
    } catch (err) {
      // GradebookStore: Error ensuring data loaded: err
      error.set(err instanceof Error ? err.message : String(err));
      throw err;
    }
  }

  // Return both the store and methods to update it
  return {
    subscribe: store.subscribe,
    loadAllData,
    addGlobalStudent,
    addCategory,
    selectCategory,
    assignStudentToCategory,
    removeStudentFromCategory,
    addAssignmentToCategory,
    recordGrade,
    clearAllData,
    setUseSupabase,
    ensureDataLoaded,
    studentAverageInCategory
  };
}

export const gradebookStore = createGradebookStore();
</file>

<file path="src/lib/stores/jeopardy.test.ts">
import { describe, test, expect, vi, beforeEach } from 'vitest';
import { get } from 'svelte/store';
import { jeopardyStore } from './jeopardy';

// Mock the supabaseService
vi.mock('$lib/services/supabaseService', () => ({
  supabaseService: {
    getItems: vi.fn(),
    createItem: vi.fn(),
    updateItem: vi.fn(),
    deleteItem: vi.fn()
  }
}));

// Mock model converters
vi.mock('$lib/utils/modelConverters', () => ({
  dbGameToAppGame: vi.fn((game, categories, questions) => ({
    id: game.id,
    name: game.name,
    description: game.description,
    isPublic: game.is_public,
    createdBy: game.created_by,
    categories: categories.map(cat => ({
      id: cat.id,
      name: cat.name,
      orderIndex: cat.order_index,
      questions: questions
        .filter(q => q.category_id === cat.id)
        .map(q => ({
          id: q.id,
          categoryId: q.category_id,
          question: q.question,
          answer: q.answer,
          pointValue: q.point_value,
          isDoubleJeopardy: q.is_double_jeopardy
        }))
    }))
  })),
  appGameToDbGame: vi.fn((game) => ({
    game: {
      id: game.id,
      name: game.name,
      description: game.description,
      is_public: game.isPublic,
      created_by: game.createdBy
    },
    categories: game.categories.map(cat => ({
      id: cat.id,
      game_id: game.id,
      name: cat.name,
      order_index: cat.orderIndex
    })),
    questions: game.categories.flatMap(cat => 
      cat.questions.map(q => ({
        id: q.id,
        category_id: cat.id,
        question: q.question,
        answer: q.answer,
        point_value: q.pointValue,
        is_double_jeopardy: q.isDoubleJeopardy
      }))
    )
  }))
}));

import { supabaseService } from '$lib/services/supabaseService';

describe('jeopardyStore', () => {
  beforeEach(() => {
    vi.clearAllMocks();
    // Reset store state
    jeopardyStore.resetStore();
  });

  test('should have initial state', () => {
    const state = get(jeopardyStore);
    expect(state.games).toEqual([]);
    expect(state.currentGame).toBeNull();
    expect(state.loading).toBe(false);
    expect(state.error).toBeNull();
    expect(state.currentTeam).toBeNull();
    expect(state.gameState).toBe('setup');
  });

  test('loadGames should fetch and set games', async () => {
    const mockGames = [
      { id: 'game1', name: 'Test Game 1', description: 'Description 1', is_public: true, created_by: 'user1' }
    ];
    const mockCategories = [
      { id: 'cat1', game_id: 'game1', name: 'Category 1', order_index: 0 }
    ];
    const mockQuestions = [
      { 
        id: 'q1', 
        category_id: 'cat1', 
        question: 'Test Question', 
        answer: 'Test Answer', 
        point_value: 100, 
        is_double_jeopardy: false 
      }
    ];

    vi.mocked(supabaseService.getItems)
      .mockResolvedValueOnce(mockGames)
      .mockResolvedValueOnce(mockCategories)
      .mockResolvedValueOnce(mockQuestions);

    await jeopardyStore.loadGames();

    const state = get(jeopardyStore);
    expect(state.games).toHaveLength(1);
    expect(state.games[0].name).toBe('Test Game 1');
    expect(state.games[0].categories).toHaveLength(1);
    expect(state.games[0].categories[0].questions).toHaveLength(1);
    expect(state.loading).toBe(false);
  });

  test('createGame should create a new game', async () => {
    const newGame = {
      name: 'New Game',
      description: 'New game description',
      isPublic: true,
      createdBy: 'user123',
      categories: []
    };

    const mockCreatedGame = {
      id: 'game2',
      name: 'New Game',
      description: 'New game description',
      is_public: true,
      created_by: 'user123'
    };

    vi.mocked(supabaseService.createItem).mockResolvedValue(mockCreatedGame);

    const createdGame = await jeopardyStore.createGame(newGame);

    expect(supabaseService.createItem).toHaveBeenCalledWith('games', {
      name: 'New Game',
      description: 'New game description',
      is_public: true,
      created_by: 'user123'
    });
    expect(createdGame.id).toBe('game2');
  });

  test('updateGame should update existing game', async () => {
    // Setup initial game
    const initialGame = {
      id: 'game1',
      name: 'Original Name',
      description: 'Original description',
      isPublic: true,
      createdBy: 'user123',
      categories: []
    };

    // Add game to store
    const state = get(jeopardyStore);
    state.games.push(initialGame);

    // Update game
    const updates = { name: 'Updated Name' };
    const mockUpdatedGame = {
      id: 'game1',
      name: 'Updated Name',
      description: 'Original description',
      is_public: true,
      created_by: 'user123'
    };

    vi.mocked(supabaseService.updateItem).mockResolvedValue(mockUpdatedGame);

    await jeopardyStore.updateGame('game1', updates);

    expect(supabaseService.updateItem).toHaveBeenCalledWith('games', 'game1', updates);
    const updatedState = get(jeopardyStore);
    expect(updatedState.games[0].name).toBe('Updated Name');
  });

  test('deleteGame should remove game and associated data', async () => {
    // Setup game with categories and questions
    const game = {
      id: 'game1',
      name: 'Game to Delete',
      description: 'Will be deleted',
      isPublic: false,
      createdBy: 'user123',
      categories: [
        {
          id: 'cat1',
          name: 'Category 1',
          orderIndex: 0,
          questions: [
            {
              id: 'q1',
              categoryId: 'cat1',
              question: 'Question 1',
              answer: 'Answer 1',
              pointValue: 100,
              isDoubleJeopardy: false
            }
          ]
        }
      ]
    };

    const state = get(jeopardyStore);
    state.games.push(game);

    vi.mocked(supabaseService.deleteItem).mockResolvedValue(undefined);

    await jeopardyStore.deleteGame('game1');

    // Verify deletions were called
    expect(supabaseService.deleteItem).toHaveBeenCalledWith('questions', 'q1');
    expect(supabaseService.deleteItem).toHaveBeenCalledWith('game_categories', 'cat1');
    expect(supabaseService.deleteItem).toHaveBeenCalledWith('games', 'game1');

    // Verify game was removed from store
    const updatedState = get(jeopardyStore);
    expect(updatedState.games).toHaveLength(0);
  });

  test('addCategory should add category to game', async () => {
    const game = {
      id: 'game1',
      name: 'Test Game',
      description: 'Test',
      isPublic: true,
      createdBy: 'user123',
      categories: []
    };

    const state = get(jeopardyStore);
    state.games.push(game);

    const newCategory = { name: 'New Category' };
    const mockCreatedCategory = {
      id: 'cat2',
      game_id: 'game1',
      name: 'New Category',
      order_index: 0
    };

    vi.mocked(supabaseService.createItem).mockResolvedValue(mockCreatedCategory);

    await jeopardyStore.addCategory('game1', newCategory);

    expect(supabaseService.createItem).toHaveBeenCalledWith('game_categories', {
      game_id: 'game1',
      name: 'New Category',
      order_index: 0
    });

    const updatedState = get(jeopardyStore);
    expect(updatedState.games[0].categories).toHaveLength(1);
    expect(updatedState.games[0].categories[0].name).toBe('New Category');
  });

  test('addQuestion should add question to category', async () => {
    const game = {
      id: 'game1',
      name: 'Test Game',
      description: 'Test',
      isPublic: true,
      createdBy: 'user123',
      categories: [
        {
          id: 'cat1',
          name: 'Category 1',
          orderIndex: 0,
          questions: []
        }
      ]
    };

    const state = get(jeopardyStore);
    state.games.push(game);

    const newQuestion = {
      question: 'New Question',
      answer: 'New Answer',
      pointValue: 200,
      isDoubleJeopardy: false
    };

    const mockCreatedQuestion = {
      id: 'q2',
      category_id: 'cat1',
      question: 'New Question',
      answer: 'New Answer',
      point_value: 200,
      is_double_jeopardy: false
    };

    vi.mocked(supabaseService.createItem).mockResolvedValue(mockCreatedQuestion);

    await jeopardyStore.addQuestion('game1', 'cat1', newQuestion);

    expect(supabaseService.createItem).toHaveBeenCalledWith('questions', {
      category_id: 'cat1',
      question: 'New Question',
      answer: 'New Answer',
      point_value: 200,
      is_double_jeopardy: false
    });

    const updatedState = get(jeopardyStore);
    expect(updatedState.games[0].categories[0].questions).toHaveLength(1);
    expect(updatedState.games[0].categories[0].questions[0].question).toBe('New Question');
  });

  test('selectGame should set current game', () => {
    const game = {
      id: 'game1',
      name: 'Selected Game',
      description: 'Test',
      isPublic: true,
      createdBy: 'user123',
      categories: []
    };

    const state = get(jeopardyStore);
    state.games.push(game);

    jeopardyStore.selectGame('game1');

    const updatedState = get(jeopardyStore);
    expect(updatedState.currentGame).toEqual(game);
  });

  test('game state transitions should work correctly', () => {
    // Start game
    jeopardyStore.startGame();
    let state = get(jeopardyStore);
    expect(state.gameState).toBe('playing');

    // End game
    jeopardyStore.endGame();
    state = get(jeopardyStore);
    expect(state.gameState).toBe('ended');

    // Reset game
    jeopardyStore.resetGame();
    state = get(jeopardyStore);
    expect(state.gameState).toBe('setup');
  });

  test('setCurrentTeam should update current team', () => {
    const team = { id: 'team1', name: 'Team A', score: 0 };
    
    jeopardyStore.setCurrentTeam(team);
    
    const state = get(jeopardyStore);
    expect(state.currentTeam).toEqual(team);
  });

  test('error handling should update error state', async () => {
    const errorMessage = 'Failed to load games';
    vi.mocked(supabaseService.getItems).mockRejectedValue(new Error(errorMessage));

    await jeopardyStore.loadGames();

    const state = get(jeopardyStore);
    expect(state.error).toBe(errorMessage);
    expect(state.loading).toBe(false);
  });

  test('should handle localStorage fallback', async () => {
    // Mock localStorage data
    const localGames = [
      {
        id: 'local-game1',
        name: 'Local Game',
        description: 'From localStorage',
        isPublic: false,
        createdBy: 'user123',
        categories: []
      }
    ];

    global.localStorage.setItem('jeopardy_games', JSON.stringify(localGames));
    global.localStorage.setItem('jeopardy_game_categories', JSON.stringify([]));
    global.localStorage.setItem('jeopardy_questions', JSON.stringify([]));

    // Make supabase fail
    vi.mocked(supabaseService.getItems).mockRejectedValue(new Error('Network error'));

    await jeopardyStore.loadGames();

    const state = get(jeopardyStore);
    expect(state.games).toHaveLength(1);
    expect(state.games[0].name).toBe('Local Game');
  });

  test('updateQuestion should update specific question', async () => {
    const game = {
      id: 'game1',
      name: 'Test Game',
      description: 'Test',
      isPublic: true,
      createdBy: 'user123',
      categories: [
        {
          id: 'cat1',
          name: 'Category 1',
          orderIndex: 0,
          questions: [
            {
              id: 'q1',
              categoryId: 'cat1',
              question: 'Original Question',
              answer: 'Original Answer',
              pointValue: 100,
              isDoubleJeopardy: false
            }
          ]
        }
      ]
    };

    const state = get(jeopardyStore);
    state.games.push(game);

    const updates = { question: 'Updated Question' };
    const mockUpdatedQuestion = {
      id: 'q1',
      category_id: 'cat1',
      question: 'Updated Question',
      answer: 'Original Answer',
      point_value: 100,
      is_double_jeopardy: false
    };

    vi.mocked(supabaseService.updateItem).mockResolvedValue(mockUpdatedQuestion);

    await jeopardyStore.updateQuestion('game1', 'cat1', 'q1', updates);

    expect(supabaseService.updateItem).toHaveBeenCalledWith('questions', 'q1', updates);
    
    const updatedState = get(jeopardyStore);
    expect(updatedState.games[0].categories[0].questions[0].question).toBe('Updated Question');
  });
});
</file>

<file path="src/lib/stores/jeopardy.ts">
// src/lib/stores/jeopardy.ts
import { writable, derived, get } from 'svelte/store';
import { v4 as uuidv4 } from 'uuid';
import { supabaseService } from '$lib/services/supabaseService';
import { authStore } from './auth';
import type { User } from '@supabase/supabase-js';
import type {
	JeopardyGame,
	Category,
	Question,
	Team,
	GameSettings,
	GameTemplate
} from '$lib/types/jeopardy';
import type { Tables } from '$lib/types/database';

function createJeopardyStore() {
	// Core state stores
	const games = writable<JeopardyGame[]>([]);
	const activeGameId = writable<string | null>(null);
	const activeQuestionId = writable<string | null>(null);
	const editMode = writable<boolean>(true);
	const timerActive = writable<boolean>(false);
	const timerSeconds = writable<number>(30);
	const wagerAmount = writable<number>(0);
	const loading = writable<boolean>(false);
	const error = writable<string | null>(null);
	const dataLoaded = writable<boolean>(false);

	// Store for temporary holding of new game being created
	const draftGame = writable<JeopardyGame | null>(null);

	// Derived stores
	const getGames = derived(games, $games => $games);
	
	const getActiveGame = derived(
		[games, activeGameId],
		([$games, $activeGameId]) => {
			if (!$activeGameId) return null;
			return $games.find(game => game.id === $activeGameId) || null;
		}
	);

	const getActiveQuestion = derived(
		[getActiveGame, activeQuestionId],
		([$activeGame, $activeQuestionId]) => {
			if (!$activeGame || !$activeQuestionId) return null;
			
			for (const category of $activeGame.categories) {
				const question = category.questions.find(q => q.id === $activeQuestionId);
				if (question) {
					return {
						...question,
						categoryId: category.id,
						categoryName: category.name
					};
				}
			}
			return null;
		}
	);

	const getLeadingTeam = derived(
		getActiveGame,
		($activeGame) => {
			if (!$activeGame || $activeGame.teams.length === 0) return null;
			return $activeGame.teams.reduce((leader, team) => 
				team.score > leader.score ? team : leader
			);
		}
	);

	// Helper function to get current user
	async function getCurrentUser(): Promise<User | null> {
		const { user } = await authStore.getSession();
		return user;
	}

	// Load all games for the current user
	async function loadAllGames() {
		loading.set(true);
		error.set(null);
		
		try {
			const user = await getCurrentUser();
			if (!user) {
				games.set([]);
				return;
			}

			// Load games
			const dbGames = await supabaseService.getItems('games', {
				filter: { user_id: user.id }
			});

			// Load all related data and construct full game objects
			const fullGames: JeopardyGame[] = [];
			
			for (const dbGame of dbGames) {
				// Load categories for this game
				const categories = await supabaseService.getItems('game_categories', {
					filter: { game_id: dbGame.id },
					orderBy: { field: 'order_index', ascending: true }
				});

				// Load teams for this game
				const teams = await supabaseService.getItems('teams', {
					filter: { game_id: dbGame.id }
				});

				// Load questions for all categories
				const fullCategories: Category[] = [];
				for (const cat of categories) {
					const questions = await supabaseService.getItems('questions', {
						filter: { category_id: cat.id },
						orderBy: { field: 'order_index', ascending: true }
					});

					fullCategories.push({
						id: cat.id,
						name: cat.name,
						questions: questions.map(q => ({
							id: q.id,
							text: q.question,
							answer: q.answer,
							pointValue: q.points,
							isDoubleJeopardy: false,
							answered: false,
							timeLimit: 30
						}))
					});
				}

				fullGames.push({
					id: dbGame.id,
					name: dbGame.name,
					categories: fullCategories,
					teams: teams.map(t => ({
						id: t.id,
						name: t.name,
						score: t.score,
						color: t.color
					})),
					settings: dbGame.settings || {
						useTimer: true,
						timerSize: 'large',
						defaultTimeLimit: 30,
						readingTime: 5,
						autoShowAnswer: false
					},
					lastModified: dbGame.updated_at || dbGame.created_at || new Date().toISOString()
				});
			}

			games.set(fullGames);
		} catch (err: any) {
			// Error loading games: err
			error.set(err.message || 'Failed to load games');
		} finally {
			loading.set(false);
		}
	}

	// Ensure data is loaded before using the store
	async function ensureDataLoaded() {
		if (get(dataLoaded)) return;
		await loadAllGames();
		dataLoaded.set(true);
	}

	// Save or update a game in Supabase
	async function saveGameToSupabase(game: JeopardyGame) {
		try {
			const user = await getCurrentUser();
			if (!user) throw new Error('User not authenticated');

			// Save or update the main game record
			const gameData = {
				name: game.name,
				settings: game.settings,
				last_modified: new Date().toISOString(),
				is_public: false, // Default to private
				owner_role: 'teacher' as const // Default to teacher
			};
			
			console.log('🔍 Saving game data:', JSON.stringify(gameData, null, 2));

			let savedGame;
			
			// Check if game exists in database first
			let gameExistsInDb = false;
			if (game.id && game.id !== 'new') {
				try {
					const existingGame = await supabaseService.getItems('games', { 
						filters: { id: game.id } 
					});
					gameExistsInDb = existingGame.length > 0;
				} catch (e) {
					// If error checking, assume it doesn't exist and insert
					gameExistsInDb = false;
				}
			}
			
			if (gameExistsInDb) {
				// Update existing game
				savedGame = await supabaseService.updateItem('games', game.id, gameData);
			} else {
				// Insert new game
				const newGameData = {
					...gameData,
					user_id: user.id,
					id: game.id || uuidv4() // Use existing ID or generate new one
				};
				savedGame = await supabaseService.insertItem('games', newGameData);
			}

			if (!savedGame) throw new Error('Failed to save game');

			// Save categories
			for (let i = 0; i < game.categories.length; i++) {
				const cat = game.categories[i];
				const categoryData = {
					game_id: savedGame.id,
					category_name: cat.name,
					order_index: i
				};

				let savedCategory;
				
				// Check if category exists in database
				let categoryExistsInDb = false;
				if (cat.id && cat.id !== 'new') {
					try {
						const existingCategory = await supabaseService.getItems('game_categories', { 
							filters: { id: cat.id } 
						});
						categoryExistsInDb = existingCategory.length > 0;
					} catch (e) {
						categoryExistsInDb = false;
					}
				}
				
				if (categoryExistsInDb) {
					savedCategory = await supabaseService.updateItem('game_categories', cat.id, categoryData);
				} else {
					savedCategory = await supabaseService.insertItem('game_categories', {
						...categoryData,
						id: cat.id || uuidv4()
					});
				}

				if (!savedCategory) continue;

				// Save questions
				for (let j = 0; j < cat.questions.length; j++) {
					const q = cat.questions[j];
					const questionData = {
						category_id: savedCategory.id,
						question_text: q.text,
						answer_text: q.answer,
						point_value: q.pointValue,
						order_index: j
					};

					// Check if question exists in database
					let questionExistsInDb = false;
					if (q.id && q.id !== 'new') {
						try {
							const existingQuestion = await supabaseService.getItems('questions', { 
								filters: { id: q.id } 
							});
							questionExistsInDb = existingQuestion.length > 0;
						} catch (e) {
							questionExistsInDb = false;
						}
					}
					
					if (questionExistsInDb) {
						await supabaseService.updateItem('questions', q.id, questionData);
					} else {
						await supabaseService.insertItem('questions', {
							...questionData,
							id: q.id || uuidv4()
						});
					}
				}
			}

			// Save teams
			for (const team of game.teams) {
				const teamData = {
					game_id: savedGame.id,
					name: team.name,
					score: team.score,
					color: team.color
				};

				// Check if team exists in database
				let teamExistsInDb = false;
				if (team.id && team.id !== 'new') {
					try {
						const existingTeam = await supabaseService.getItems('teams', { 
							filters: { id: team.id } 
						});
						teamExistsInDb = existingTeam.length > 0;
					} catch (e) {
						teamExistsInDb = false;
					}
				}
				
				if (teamExistsInDb) {
					await supabaseService.updateItem('teams', team.id, teamData);
				} else {
					await supabaseService.insertItem('teams', {
						...teamData,
						id: team.id || uuidv4()
					});
				}
			}

			return savedGame.id;
		} catch (err: any) {
			console.error('🚨 Error saving game:', err);
			console.error('🚨 Error details:', JSON.stringify(err, null, 2));
			throw err;
		}
	}

	// Game CRUD operations
	function createGame(name: string): string {
		const gameId = uuidv4();
		const newGame: JeopardyGame = {
			id: gameId,
			name,
			categories: [],
			teams: [],
			settings: {
				useTimer: true,
				timerSize: 'large' as const,
				defaultTimeLimit: 30,
				readingTime: 5,
				autoShowAnswer: false
			},
			lastModified: new Date().toISOString()
		};
		
		games.update(g => [...g, newGame]);
		setActiveGame(gameId);
		
		// Save to Supabase asynchronously
		saveGameToSupabase(newGame).catch(err => {
			// Error saving new game: err
		});
		
		return gameId;
	}

	async function deleteGame(gameId: string): Promise<void> {
		try {
			await supabaseService.deleteItem('games', gameId);
			games.update(g => g.filter(game => game.id !== gameId));
			
			if (get(activeGameId) === gameId) {
				activeGameId.set(null);
			}
		} catch (err: any) {
			// Error deleting game: err
			error.set(err.message || 'Failed to delete game');
		}
	}

	// Category operations
	function addCategory(gameId: string, categoryName: string): void {
		const newCategory: Category = {
			id: uuidv4(),
			name: categoryName,
			questions: []
		};
		
		games.update(allGames => 
			allGames.map(game => 
				game.id === gameId
					? { ...game, categories: [...game.categories, newCategory], lastModified: new Date().toISOString() }
					: game
			)
		);
		
		// Save to Supabase asynchronously
		const game = get(games).find(g => g.id === gameId);
		if (game) {
			saveGameToSupabase(game).catch(err => {
				// Error saving game: err
			});
		}
	}

	function deleteCategory(categoryId: string): void {
		games.update(allGames => 
			allGames.map(game => ({
				...game,
				categories: game.categories.filter(cat => cat.id !== categoryId),
				lastModified: new Date().toISOString()
			}))
		);
		
		// Delete from Supabase asynchronously
		supabaseService.deleteItem('game_categories', categoryId).catch(err => {
			// Error deleting category: err
		});
	}

	// Question operations
	function addQuestion(categoryId: string, question: Omit<Question, 'id'>): void {
		const newQuestion: Question = {
			id: uuidv4(),
			...question
		};
		
		games.update(allGames =>
			allGames.map(game => ({
				...game,
				categories: game.categories.map(cat =>
					cat.id === categoryId
						? { ...cat, questions: [...cat.questions, newQuestion] }
						: cat
				),
				lastModified: new Date().toISOString()
			}))
		);
		
		// Save to Supabase asynchronously
		const game = get(games).find(g => g.categories.some(c => c.id === categoryId));
		if (game) {
			saveGameToSupabase(game).catch(err => {
				// Error saving game: err
			});
		}
	}

	function updateQuestion(categoryId: string, questionId: string, updatedQuestion: Partial<Question>): void {
		games.update(allGames =>
			allGames.map(game => ({
				...game,
				categories: game.categories.map(cat =>
					cat.id === categoryId
						? {
							...cat,
							questions: cat.questions.map(q =>
								q.id === questionId ? { ...q, ...updatedQuestion } : q
							)
						}
						: cat
				),
				lastModified: new Date().toISOString()
			}))
		);
		
		// Update in Supabase asynchronously
		const game = get(games).find(g => g.categories.some(c => c.id === categoryId));
		if (game) {
			saveGameToSupabase(game).catch(err => {
				// Error saving game: err
			});
		}
	}

	function deleteQuestion(categoryId: string, questionId: string): void {
		games.update(allGames =>
			allGames.map(game => ({
				...game,
				categories: game.categories.map(cat =>
					cat.id === categoryId
						? { ...cat, questions: cat.questions.filter(q => q.id !== questionId) }
						: cat
				),
				lastModified: new Date().toISOString()
			}))
		);
		
		// Delete from Supabase asynchronously
		supabaseService.deleteItem('questions', questionId).catch(err => {
			// Error deleting question: err
		});
	}

	// Team operations
	function addTeam(gameId: string, teamName: string): void {
		const colors = ['#3b82f6', '#10b981', '#f59e0b', '#ef4444', '#8b5cf6', '#ec4899'];
		const existingColors = get(games)
			.find(g => g.id === gameId)
			?.teams.map(t => t.color) || [];
		
		const availableColors = colors.filter(c => !existingColors.includes(c));
		const teamColor = availableColors[0] || colors[Math.floor(Math.random() * colors.length)];
		
		const newTeam: Team = {
			id: uuidv4(),
			name: teamName,
			score: 0,
			color: teamColor
		};
		
		games.update(allGames =>
			allGames.map(game =>
				game.id === gameId
					? { ...game, teams: [...game.teams, newTeam], lastModified: new Date().toISOString() }
					: game
			)
		);
		
		// Save to Supabase asynchronously
		const game = get(games).find(g => g.id === gameId);
		if (game) {
			saveGameToSupabase(game).catch(err => {
				// Error saving game: err
			});
		}
	}

	function deleteTeam(teamId: string): void {
		games.update(allGames =>
			allGames.map(game => ({
				...game,
				teams: game.teams.filter(team => team.id !== teamId),
				lastModified: new Date().toISOString()
			}))
		);
		
		// Delete from Supabase asynchronously
		supabaseService.deleteItem('teams', teamId).catch(err => {
			// Error deleting team: err
		});
	}

	function updateTeamScore(teamId: string, points: number): void {
		games.update(allGames =>
			allGames.map(game => ({
				...game,
				teams: game.teams.map(team =>
					team.id === teamId
						? { ...team, score: team.score + points }
						: team
				),
				lastModified: new Date().toISOString()
			}))
		);
		
		// Update in Supabase asynchronously
		const game = get(games).find(g => g.teams.some(t => t.id === teamId));
		if (game) {
			saveGameToSupabase(game).catch(err => {
				// Error saving game: err
			});
		}
	}

	// Settings operations
	function updateGameSettings(gameId: string, settings: Partial<GameSettings>): void {
		games.update(allGames =>
			allGames.map(game =>
				game.id === gameId
					? { ...game, settings: { ...game.settings, ...settings }, lastModified: new Date().toISOString() }
					: game
			)
		);
		
		// Save to Supabase asynchronously
		const game = get(games).find(g => g.id === gameId);
		if (game) {
			saveGameToSupabase(game).catch(err => {
				// Error saving game: err
			});
		}
	}

	// Game state operations
	function setActiveGame(gameId: string | null): void {
		activeGameId.set(gameId);
	}

	function setActiveQuestion(question: (Question & { categoryId: string; categoryName: string }) | null): void {
		activeQuestionId.set(question?.id || null);
	}

	function markQuestionAnswered(categoryId: string, questionId: string): void {
		games.update(allGames =>
			allGames.map(game => ({
				...game,
				categories: game.categories.map(cat =>
					cat.id === categoryId
						? {
							...cat,
							questions: cat.questions.map(q =>
								q.id === questionId ? { ...q, answered: true } : q
							)
						}
						: cat
				),
				lastModified: new Date().toISOString()
			}))
		);
		
		// Update in Supabase asynchronously
		const game = get(games).find(g => g.categories.some(c => c.id === categoryId));
		if (game) {
			saveGameToSupabase(game).catch(err => {
				// Error saving game: err
			});
		}
	}

	function setWagerAmount(amount: number): void {
		wagerAmount.set(amount);
	}

	// Reset operations
	function resetAllScores(): void {
		games.update(allGames =>
			allGames.map(game => ({
				...game,
				teams: game.teams.map(team => ({ ...team, score: 0 })),
				lastModified: new Date().toISOString()
			}))
		);
		
		// Update in Supabase asynchronously
		const game = get(getActiveGame);
		if (game) {
			saveGameToSupabase(game).catch(err => {
				// Error saving game: err
			});
		}
	}

	function resetGameBoard(): void {
		games.update(allGames =>
			allGames.map(game => ({
				...game,
				categories: game.categories.map(cat => ({
					...cat,
					questions: cat.questions.map(q => ({ ...q, answered: false }))
				})),
				teams: game.teams.map(team => ({ ...team, score: 0 })),
				lastModified: new Date().toISOString()
			}))
		);
		
		// Update in Supabase asynchronously
		const game = get(getActiveGame);
		if (game) {
			saveGameToSupabase(game).catch(err => {
				// Error saving game: err
			});
		}
	}

	// Import/Export operations
	function importGameData(gameId: string, jsonData: Record<string, unknown>): boolean {
		try {
			// Validate the required structure
			if (!jsonData || typeof jsonData !== 'object') {
				// Invalid JSON format
				return false;
			}

			// Check for categories array
			if (!Array.isArray(jsonData.categories)) {
				// Missing or invalid categories array
				return false;
			}

			const categories: Category[] = [];
			
			for (const catData of jsonData.categories) {
				if (!catData.name || !Array.isArray(catData.questions)) {
					// Invalid category structure
					continue;
				}

				const questions: Question[] = [];
				
				for (const qData of catData.questions) {
					if (!qData.text || !qData.answer || typeof qData.pointValue !== 'number') {
						// Invalid question structure
						continue;
					}

					questions.push({
						id: uuidv4(),
						text: qData.text,
						answer: qData.answer,
						pointValue: qData.pointValue,
						isDoubleJeopardy: Boolean(qData.isDoubleJeopardy),
						timeLimit: typeof qData.timeLimit === 'number' ? qData.timeLimit : undefined,
						answered: false
					});
				}

				categories.push({
					id: uuidv4(),
					name: catData.name,
					questions
				});
			}

			// Update the game with imported data
			games.update(allGames =>
				allGames.map(game =>
					game.id === gameId
						? { ...game, categories, lastModified: new Date().toISOString() }
						: game
				)
			);
			
			// Save to Supabase asynchronously
			const game = get(games).find(g => g.id === gameId);
			if (game) {
				saveGameToSupabase(game).catch(err => {
				// Error saving game: err
			});
			}
			
			return true;
		} catch (error) {
			// Error importing game data: error
			return false;
		}
	}

	function exportGameData(gameId: string): string {
		const game = get(games).find(g => g.id === gameId);
		if (!game) return '';

		const exportData = {
			name: game.name,
			categories: game.categories.map(cat => ({
				name: cat.name,
				questions: cat.questions.map(q => ({
					text: q.text,
					answer: q.answer,
					pointValue: q.pointValue,
					isDoubleJeopardy: q.isDoubleJeopardy,
					timeLimit: q.timeLimit
				}))
			}))
		};

		return JSON.stringify(exportData, null, 2);
	}

	// Game Templates
	function getGameTemplates(): GameTemplate[] {
		return [
			{
				id: 'science',
				name: 'Science Trivia',
				description: 'A collection of science questions across various topics',
				categories: [
					{
						name: 'Biology',
						questions: [
							{ text: 'What is the largest organ in the human body?', answer: 'Skin', pointValue: 100 },
							{ text: 'How many chambers does a human heart have?', answer: 'Four', pointValue: 200 },
							{ text: 'What is the process by which plants make their own food?', answer: 'Photosynthesis', pointValue: 300 },
							{ text: 'What is the powerhouse of the cell?', answer: 'Mitochondria', pointValue: 400 },
							{ text: 'What type of blood cells carry oxygen?', answer: 'Red blood cells', pointValue: 500 }
						]
					},
					{
						name: 'Chemistry',
						questions: [
							{ text: 'What is the chemical symbol for gold?', answer: 'Au', pointValue: 100 },
							{ text: 'What is the most abundant element in the universe?', answer: 'Hydrogen', pointValue: 200 },
							{ text: 'What is the pH of pure water?', answer: '7', pointValue: 300 },
							{ text: 'What are the three states of matter?', answer: 'Solid, liquid, gas', pointValue: 400 },
							{ text: 'What is the chemical formula for water?', answer: 'H2O', pointValue: 500 }
						]
					}
				]
			},
			{
				id: 'history',
				name: 'World History',
				description: 'Historical events and figures from around the world',
				categories: [
					{
						name: 'Ancient History',
						questions: [
							{ text: 'Which ancient wonder of the world still stands today?', answer: 'Great Pyramid of Giza', pointValue: 100 },
							{ text: 'Who was the first emperor of Rome?', answer: 'Augustus', pointValue: 200 },
							{ text: 'What year did the Roman Empire fall?', answer: '476 AD', pointValue: 300 },
							{ text: 'Which civilization built Machu Picchu?', answer: 'Inca', pointValue: 400 },
							{ text: 'Who wrote "The Art of War"?', answer: 'Sun Tzu', pointValue: 500 }
						]
					}
				]
			}
		];
	}

	function applyGameTemplate(gameId: string, templateId: string): void {
		const template = getGameTemplates().find(t => t.id === templateId);
		if (!template) return;

		const categories: Category[] = template.categories.map(cat => ({
			id: uuidv4(),
			name: cat.name,
			questions: cat.questions.map(q => ({
				id: uuidv4(),
				...q,
				isDoubleJeopardy: false,
				answered: false
			}))
		}));

		games.update(allGames =>
			allGames.map(game =>
				game.id === gameId
					? { ...game, categories, lastModified: new Date().toISOString() }
					: game
			)
		);
		
		// Save to Supabase asynchronously
		const game = get(games).find(g => g.id === gameId);
		if (game) {
			saveGameToSupabase(game).catch(err => {
				// Error saving game: err
			});
		}
	}

	// Return public API
	return {
		// Stores
		subscribe: games.subscribe,
		getGames,
		getActiveGame,
		getActiveQuestion,
		getLeadingTeam,
		wagerAmount,
		loading: { subscribe: loading.subscribe },
		error: { subscribe: error.subscribe },
		
		// Data loading
		ensureDataLoaded,
		loadAllGames,
		
		// Game CRUD
		createGame,
		deleteGame,
		
		// Category operations
		addCategory,
		deleteCategory,
		
		// Question operations
		addQuestion,
		updateQuestion,
		deleteQuestion,
		
		// Team operations
		addTeam,
		deleteTeam,
		updateTeamScore,
		
		// Settings
		updateGameSettings,
		
		// Game state
		setActiveGame,
		setActiveQuestion,
		markQuestionAnswered,
		setWagerAmount,
		
		// Reset operations
		resetAllScores,
		resetGameBoard,
		
		// Import/Export
		importGameData,
		exportGameData,
		
		// Templates
		getGameTemplates,
		applyGameTemplate
	};
}

export const jeopardyStore = createJeopardyStore();
</file>

<file path="src/lib/stores/log-entries.ts">
import { writable } from 'svelte/store';
import type { LogEntry, LogEntryFilters } from '$lib/types/log-entries';
import { v4 as uuidv4 } from 'uuid';

const STORAGE_KEY = 'teaching-tools-log-entries';
const TABLE_NAME = 'log_entries';

interface LogEntriesState {
  logs: LogEntry[];
  loaded: boolean;
  loading: boolean;
  error: string | null;
}

function createLogEntriesStore() {
  // Initial state
  const initialData: LogEntriesState = {
    logs: [],
    loaded: false,
    loading: false,
    error: null
  };

  const { subscribe, update } = writable<LogEntriesState>(initialData);

  // Load data from Supabase
  const loadFromSupabase = async () => {
    update(state => ({ ...state, loading: true, error: null }));
    
    try {
      // Dynamically import supabase client
      const { supabase } = await import('$lib/supabaseClient');
      
      const { data, error } = await supabase
        .from(TABLE_NAME)
        .select('*')
        .order('date', { ascending: false });
      
      if (error) throw error;
      
      update(state => ({ 
        ...state, 
        logs: data || [], 
        loaded: true,
        loading: false
      }));
      
      // Also update localStorage as fallback
      if (typeof window !== 'undefined' && data) {
        localStorage.setItem(STORAGE_KEY, JSON.stringify(data));
      }
    } catch (error) {
      // Failed to load log entries from Supabase: error
      
      // Fall back to localStorage if Supabase fails
      if (typeof window !== 'undefined') {
        try {
          const storedData = localStorage.getItem(STORAGE_KEY);
          if (storedData) {
            const logs = JSON.parse(storedData);
            update(state => ({ 
              ...state, 
              logs, 
              loaded: true,
              loading: false,
              error: 'Failed to fetch from Supabase. Using cached data.' 
            }));
            return; // Exit early if we have localStorage data
          }
        } catch (localError) {
          // Failed to load log entries from localStorage: localError
        }
      }
      
      update(state => ({ 
        ...state, 
        loading: false, 
        error: 'Failed to load log entries. Check your connection.' 
      }));
    }
  };

  // CRUD operations
  return {
    subscribe,
    
    // Initialize the store
    init: () => {
      void loadFromSupabase(); // void operator to explicitly ignore the promise
    },
    
    // Get all logs
    getLogs: () => {
      let result: LogEntry[] = [];
      const unsubscribe = subscribe(state => {
        result = state.logs;
      });
      unsubscribe();
      return result;
    },

    // Get a single log by ID
    getLog: (id: string) => {
      let result: LogEntry | undefined;
      const unsubscribe = subscribe(state => {
        result = state.logs.find(log => log.id === id);
      });
      unsubscribe();
      return result;
    },

    // Add a new log
    addLog: async (log: Omit<LogEntry, 'id'>) => {
      const newLog: LogEntry = {
        ...log,
        id: uuidv4()
      };
      
      // Optimistic update
      update(state => ({
        ...state,
        logs: [...state.logs, newLog]
      }));
      
      try {
        // Dynamically import supabase client
        const { supabase } = await import('$lib/supabaseClient');
        
        const { data, error } = await supabase
          .from(TABLE_NAME)
          .insert(newLog)
          .select()
          .single();
          
        if (error) throw error;
        
        // Update with server data
        if (data) {
          update(state => ({
            ...state,
            logs: state.logs.map(l => l.id === newLog.id ? data : l)
          }));
        }
        
        // Update localStorage
        const unsubscribe = subscribe(state => {
          if (typeof window !== 'undefined') {
            localStorage.setItem(STORAGE_KEY, JSON.stringify(state.logs));
          }
        });
        unsubscribe();
        
      } catch (error) {
        // Failed to add log entry to Supabase: error
        // Keep the optimistic update for UX
        
        // Make sure localStorage is updated
        const unsubscribe = subscribe(state => {
          if (typeof window !== 'undefined') {
            localStorage.setItem(STORAGE_KEY, JSON.stringify(state.logs));
          }
        });
        unsubscribe();
      }
    },

    // Update an existing log
    updateLog: async (id: string, updatedLog: Partial<LogEntry>) => {
      // Optimistic update
      update(state => ({
        ...state,
        logs: state.logs.map(log => 
          log.id === id ? { ...log, ...updatedLog } : log
        )
      }));
      
      try {
        // Dynamically import supabase client
        const { supabase } = await import('$lib/supabaseClient');
        
        const { error } = await supabase
          .from(TABLE_NAME)
          .update(updatedLog)
          .eq('id', id);
          
        if (error) throw error;
        
        // Update localStorage
        const unsubscribe = subscribe(state => {
          if (typeof window !== 'undefined') {
            localStorage.setItem(STORAGE_KEY, JSON.stringify(state.logs));
          }
        });
        unsubscribe();
        
      } catch (error) {
        // Failed to update log entry in Supabase: error
        // Keep the optimistic update
        
        // Make sure localStorage is updated
        const unsubscribe = subscribe(state => {
          if (typeof window !== 'undefined') {
            localStorage.setItem(STORAGE_KEY, JSON.stringify(state.logs));
          }
        });
        unsubscribe();
      }
    },

    // Delete a log
    deleteLog: async (id: string) => {
      // Optimistic update
      update(state => ({
        ...state,
        logs: state.logs.filter(log => log.id !== id)
      }));
      
      try {
        // Dynamically import supabase client
        const { supabase } = await import('$lib/supabaseClient');
        
        const { error } = await supabase
          .from(TABLE_NAME)
          .delete()
          .eq('id', id);
          
        if (error) throw error;
        
        // Update localStorage
        const unsubscribe = subscribe(state => {
          if (typeof window !== 'undefined') {
            localStorage.setItem(STORAGE_KEY, JSON.stringify(state.logs));
          }
        });
        unsubscribe();
        
      } catch (error) {
        // Failed to delete log entry from Supabase: error
        // Keep the optimistic update
        
        // Make sure localStorage is updated
        const unsubscribe = subscribe(state => {
          if (typeof window !== 'undefined') {
            localStorage.setItem(STORAGE_KEY, JSON.stringify(state.logs));
          }
        });
        unsubscribe();
      }
    },

    // Filter logs based on search criteria
    filterLogs: (filters: LogEntryFilters) => {
      let result: LogEntry[] = [];
      
      // Helper function to apply filters
      function applyFilters(log: LogEntry): boolean {
        // Search query filter
        if (filters.searchQuery) {
          const query = filters.searchQuery.toLowerCase();
          
          // Helper function to check if a tag contains the search query
          function tagContainsQuery(tag: string): boolean {
            return tag.toLowerCase().includes(query);
          }
          
          // Check if student name, observation, or any tag matches the query
          const studentMatch = log.student.toLowerCase().includes(query);
          const observationMatch = log.observation.toLowerCase().includes(query);
          const tagMatch = log.tags?.some(tagContainsQuery) || false;
          
          const matchesSearch = studentMatch || observationMatch || tagMatch;
          
          if (!matchesSearch) return false;
        }

        // Date range filters
        if (filters.dateFrom && new Date(log.date) < new Date(filters.dateFrom)) {
          return false;
        }

        if (filters.dateTo && new Date(log.date) > new Date(filters.dateTo)) {
          return false;
        }

        // Student filter
        if (filters.student && log.student !== filters.student) {
          return false;
        }

        // Tags filter
        if (filters.tags && filters.tags.length > 0) {
          // Helper function to check if a tag matches the filter tag (case insensitive)
          function tagMatches(logTag: string, filterTag: string): boolean {
            return logTag.toLowerCase() === filterTag.toLowerCase();
          }
          
          // Helper function to check if any log tag matches a specific filter tag
          function hasTagMatch(filterTag: string): boolean {
            return log.tags?.some(logTag => tagMatches(logTag, filterTag)) || false;
          }
          
          // Check if any filter tag matches any log tag
          const hasMatchingTag = filters.tags.some(hasTagMatch);
          
          if (!hasMatchingTag) return false;
        }

        return true;
      }
      
      // Apply filters to all logs
      const unsubscribe = subscribe(state => {
        result = state.logs.filter(applyFilters);
      });
      unsubscribe();
      
      return result;
    },

    // Get unique values for filtering
    getUniqueStudents: () => {
      let result: string[] = [];
      const unsubscribe = subscribe(state => {
        const allStudents = [...new Set(state.logs.map(log => log.student))];
        // Create a new array and sort it to avoid mutating the original
        result = [...allStudents].sort((a, b) => 
          a.localeCompare(b, undefined, { sensitivity: 'base' })
        );
      });
      unsubscribe();
      return result;
    },

    getUniqueTags: () => {
      let result: string[] = [];
      const unsubscribe = subscribe(state => {
        const allTags = state.logs.flatMap(log => log.tags || []);
        const uniqueTags = [...new Set(allTags)].filter(tag => tag !== null) as string[];
        // Create a new array and sort it to avoid mutating the original
        result = [...uniqueTags].sort((a, b) => 
          a.localeCompare(b, undefined, { sensitivity: 'base' })
        );
      });
      unsubscribe();
      return result;
    },

    // Clear all logs
    clearAll: async () => {
      update(state => ({ ...state, logs: [], error: null }));
      
      try {
        // Dynamically import supabase client
        const { supabase } = await import('$lib/supabaseClient');
        
        const { error } = await supabase
          .from(TABLE_NAME)
          .delete()
          .gte('id', '0'); // Delete all
          
        if (error) throw error;
        
        // Update localStorage
        if (typeof window !== 'undefined') {
          localStorage.removeItem(STORAGE_KEY);
        }
      } catch (error) {
        // Failed to clear log entries from Supabase: error
        
        // Make sure localStorage is cleared anyway
        if (typeof window !== 'undefined') {
          localStorage.removeItem(STORAGE_KEY);
        }
      }
    },
    
    // Reload logs from Supabase
    refresh: () => {
      void loadFromSupabase(); // void operator to explicitly ignore the promise
    }
  };
}

export const logEntriesStore = createLogEntriesStore();
</file>

<file path="src/lib/stores/scattergories.ts">
import { writable, derived } from 'svelte/store';
import { browser } from '$app/environment';

export type GameState = 'ready' | 'playing' | 'paused' | 'game-over';

export interface Category {
	id: string;
	category: string;
	isCustom?: boolean;
}

interface ScattergoriesState {
	gameState: GameState;
	currentLetter: string;
	timeLimit: number;
	timeRemaining: number;
	numberOfWords: number;
	categories: Category[];
	currentCategories: Category[];
	customCategories: Category[];
	isKidFriendly: boolean;
}

const DEFAULT_CATEGORIES: Category[] = [
	{ id: '1', category: 'Things in a kitchen' },
	{ id: '2', category: 'Animals' },
	{ id: '3', category: 'Things that are round' },
	{ id: '4', category: 'Things you find in a school' },
	{ id: '5', category: 'Foods' },
	{ id: '6', category: 'Things that fly' },
	{ id: '7', category: 'Things that are hot' },
	{ id: '8', category: 'Sports' },
	{ id: '9', category: 'Things you wear' },
	{ id: '10', category: 'Movies' },
	{ id: '11', category: 'Board games' },
	{ id: '12', category: 'Things in the bathroom' },
	{ id: '13', category: 'School subjects' },
	{ id: '14', category: 'Song titles' },
	{ id: '15', category: 'Parts of the body' },
	{ id: '16', category: 'Things you shout' },
	{ id: '17', category: 'Things in a park' },
	{ id: '18', category: 'Foreign countries' },
	{ id: '19', category: 'Things you plug in' },
	{ id: '20', category: 'Ice cream flavors' },
	{ id: '21', category: 'Things made of metal' },
	{ id: '22', category: 'Occupations' },
	{ id: '23', category: 'Cartoon characters' },
	{ id: '24', category: 'Types of drinks' },
	{ id: '25', category: 'Musical instruments' },
	{ id: '26', category: 'Things you find at the beach' },
	{ id: '27', category: 'Items in a refrigerator' },
	{ id: '28', category: 'Things with wheels' },
	{ id: '29', category: 'Things that are sticky' },
	{ id: '30', category: 'Board games' },
];

const KID_FRIENDLY_CATEGORIES: Category[] = [
	{ id: 'k1', category: 'Animals' },
	{ id: 'k2', category: 'Foods' },
	{ id: 'k3', category: 'Colors' },
	{ id: 'k4', category: 'Toys' },
	{ id: 'k5', category: 'Things in a classroom' },
	{ id: 'k6', category: 'Cartoon characters' },
	{ id: 'k7', category: 'Things that are soft' },
	{ id: 'k8', category: 'Things you can eat' },
	{ id: 'k9', category: 'Things you wear' },
	{ id: 'k10', category: 'Things that fly' },
	{ id: 'k11', category: 'Things that are round' },
	{ id: 'k12', category: 'Things at a playground' },
	{ id: 'k13', category: 'Things in your bedroom' },
	{ id: 'k14', category: 'Things that make noise' },
	{ id: 'k15', category: 'Things in the sky' },
];

const initialState: ScattergoriesState = {
	gameState: 'ready',
	currentLetter: '',
	timeLimit: 180, // 3 minutes in seconds
	timeRemaining: 180,
	numberOfWords: 12,
	categories: DEFAULT_CATEGORIES,
	currentCategories: [],
	customCategories: [],
	isKidFriendly: false,
};

function createScattergoriesStore() {
	const { subscribe, set, update } = writable<ScattergoriesState>(initialState);

	let timer: ReturnType<typeof setInterval> | null = null;

	const generateLetter = (): string => {
		const letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
		// Exclude Q, U, X, Z for better gameplay
		const filteredLetters = 'ABCDEFGHIJKLMNOPRSTUVWY';
		return filteredLetters[Math.floor(Math.random() * filteredLetters.length)];
	};

	const selectRandomCategories = (categories: Category[], count: number): Category[] => {
		const shuffled = [...categories].sort(() => 0.5 - Math.random());
		return shuffled.slice(0, count);
	};

	return {
		subscribe,
		
		// Game controls
		startGame: () => update(state => {
			if (state.gameState === 'ready') {
				state.currentLetter = generateLetter();
				state.currentCategories = selectRandomCategories(state.categories, state.numberOfWords);
			}
			state.gameState = 'playing';
			state.timeRemaining = state.timeLimit;
			
			// Start timer (only in browser)
			if (browser) {
				if (timer) clearInterval(timer);
				timer = setInterval(() => {
					update(s => {
						s.timeRemaining--;
						if (s.timeRemaining <= 0) {
							s.gameState = 'game-over';
							if (timer) clearInterval(timer);
						}
						return s;
					});
				}, 1000);
			}
			
			return state;
		}),

		pauseGame: () => update(state => {
			state.gameState = 'paused';
			if (browser && timer) {
				clearInterval(timer);
				timer = null;
			}
			return state;
		}),

		resetGame: () => update(state => {
			if (browser && timer) {
				clearInterval(timer);
				timer = null;
			}
			return {
				...state,
				gameState: 'ready',
				currentLetter: '',
				timeRemaining: state.timeLimit,
				currentCategories: [],
			};
		}),

		// Letter management
		generateNewLetter: () => update(state => {
			state.currentLetter = generateLetter();
			return state;
		}),

		// Time management
		setTimeLimit: (minutes: number) => update(state => {
			const seconds = minutes * 60;
			state.timeLimit = seconds;
			if (state.gameState === 'ready') {
				state.timeRemaining = seconds;
			}
			return state;
		}),

		// Category management
		setNumberOfWords: (count: number) => update(state => {
			state.numberOfWords = Math.max(1, Math.min(30, count));
			return state;
		}),

		addCustomCategory: (categoryText: string) => {
			if (!categoryText.trim()) return;
			
			update(state => {
				const newCategory: Category = {
					id: `custom-${Date.now()}`,
					category: categoryText.trim(),
					isCustom: true,
				};
				state.customCategories.push(newCategory);
				state.categories.push(newCategory);
				return state;
			});
		},

		removeCategory: (categoryId: string) => update(state => {
			state.categories = state.categories.filter(c => c.id !== categoryId);
			state.customCategories = state.customCategories.filter(c => c.id !== categoryId);
			return state;
		}),

		toggleKidFriendly: () => update(state => {
			state.isKidFriendly = !state.isKidFriendly;
			if (state.isKidFriendly) {
				state.categories = [...KID_FRIENDLY_CATEGORIES, ...state.customCategories];
			} else {
				state.categories = [...DEFAULT_CATEGORIES, ...state.customCategories];
			}
			return state;
		}),

		removeAllCategories: () => update(state => {
			state.categories = [...state.customCategories];
			return state;
		}),

		resetToDefaults: () => update(state => {
			state.categories = state.isKidFriendly 
				? [...KID_FRIENDLY_CATEGORIES, ...state.customCategories]
				: [...DEFAULT_CATEGORIES, ...state.customCategories];
			return state;
		}),
	};
}

export const scattergories = createScattergoriesStore();

// Derived stores for computed values
export const timeFormatted = derived(scattergories, ($scattergories) => {
	const minutes = Math.floor($scattergories.timeRemaining / 60);
	const seconds = $scattergories.timeRemaining % 60;
	return `${minutes}:${seconds.toString().padStart(2, '0')}`;
});

export const isPlaying = derived(scattergories, ($scattergories) => 
	$scattergories.gameState === 'playing'
);

export const canStart = derived(scattergories, ($scattergories) => 
	$scattergories.categories.length > 0 && $scattergories.gameState !== 'playing'
);
</file>

<file path="src/lib/supabaseClient.ts">
import { createClient } from '@supabase/supabase-js';

// Create the Supabase client
const supabaseUrl = import.meta.env.PUBLIC_SUPABASE_URL ?? 'https://yutlcpluuhjxwudfathv.supabase.co';
const supabaseAnonKey = import.meta.env.PUBLIC_SUPABASE_ANON_KEY ?? 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Inl1dGxjcGx1dWhqeHd1ZGZhdGh2Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDcxMDk0MTgsImV4cCI6MjA2MjY4NTQxOH0.xUbla5RpsoqK9SKTL14li9lroXgimK4Zy8brPfzpVHc';

// Log a warning if using fallback credentials
if (!import.meta.env.PUBLIC_SUPABASE_URL || !import.meta.env.PUBLIC_SUPABASE_ANON_KEY) {
  console.warn('Using fallback Supabase credentials. Set PUBLIC_SUPABASE_URL and PUBLIC_SUPABASE_ANON_KEY environment variables for production use.');
}

export const supabase = createClient(
  supabaseUrl,
  supabaseAnonKey,
  {
    db: {
      schema: 'public'
    },
    auth: {
      persistSession: true,
      autoRefreshToken: true
    }
  }
);

// Initialize with minimal logic - no table creation or automatic login
export const initializeDB = async () => {
  try {
    // Check connection to Supabase
    const { data, error } = await supabase.from('app_users').select('count').limit(1);
    if (error) throw error;
    console.info('Supabase connection successful');
    return { success: true };
  } catch (error) {
    // Error in Supabase initialization
    console.error('Failed to initialize Supabase connection:', error);
    return { success: false, error };
  }
};
</file>

<file path="src/lib/types/auth.ts">
// Authentication types with role support
import type { User } from '@supabase/supabase-js';
import type { UserRole } from './database';

export interface AppUser extends User {
  role?: UserRole;
  full_name?: string;
  avatar_url?: string;
}

export interface AuthState {
  user: AppUser | null;
  role: UserRole | null;
  isAuthenticated: boolean;
  isTeacher: boolean;
  isStudent: boolean;
  loading: boolean;
  error: string | null;
}

export interface StudentSignupData {
  email: string;
  password: string;
  fullName: string;
  joinCode?: string; // Optional class join code
}

export interface TeacherSignupData {
  email: string;
  password: string;
  fullName: string;
  schoolName?: string;
}
</file>

<file path="src/lib/types/database.ts">
export type Json =
  | string
  | number
  | boolean
  | null
  | { [key: string]: Json | undefined }
  | Json[]

export type Database = {
  public: {
    Tables: {
      app_users: {
        Row: {
          avatar_url: string | null
          created_at: string
          email: string
          full_name: string
          id: string
          role: string | null
          updated_at: string
        }
        Insert: {
          avatar_url?: string | null
          created_at?: string
          email: string
          full_name: string
          id?: string
          role?: string | null
          updated_at?: string
        }
        Update: {
          avatar_url?: string | null
          created_at?: string
          email?: string
          full_name?: string
          id?: string
          role?: string | null
          updated_at?: string
        }
        Relationships: []
      }
      assignments: {
        Row: {
          category_id: string
          created_at: string | null
          id: string
          max_points: number
          name: string
          updated_at: string | null
        }
        Insert: {
          category_id: string
          created_at?: string | null
          id?: string
          max_points: number
          name: string
          updated_at?: string | null
        }
        Update: {
          category_id?: string
          created_at?: string | null
          id?: string
          max_points?: number
          name?: string
          updated_at?: string | null
        }
        Relationships: [
          {
            foreignKeyName: "assignments_category_id_fkey"
            columns: ["category_id"]
            isOneToOne: false
            referencedRelation: "gradebook_categories"
            referencedColumns: ["id"]
          },
        ]
      }
      categories: {
        Row: {
          class_id: string
          created_at: string
          description: string | null
          id: string
          name: string
          updated_at: string
          user_id: string | null
          weight: number | null
        }
        Insert: {
          class_id?: string
          created_at?: string
          description?: string | null
          id?: string
          name: string
          updated_at?: string
          user_id?: string | null
          weight?: number | null
        }
        Update: {
          class_id?: string
          created_at?: string
          description?: string | null
          id?: string
          name?: string
          updated_at?: string
          user_id?: string | null
          weight?: number | null
        }
        Relationships: [
          {
            foreignKeyName: "categories_class_id_fkey"
            columns: ["class_id"]
            isOneToOne: false
            referencedRelation: "classes"
            referencedColumns: ["id"]
          },
          {
            foreignKeyName: "categories_user_id_fkey"
            columns: ["user_id"]
            isOneToOne: false
            referencedRelation: "app_users"
            referencedColumns: ["id"]
          },
        ]
      }
      category_students: {
        Row: {
          category_id: string
          created_at: string
          student_id: string
        }
        Insert: {
          category_id: string
          created_at?: string
          student_id: string
        }
        Update: {
          category_id?: string
          created_at?: string
          student_id?: string
        }
        Relationships: [
          {
            foreignKeyName: "category_students_category_id_fkey"
            columns: ["category_id"]
            isOneToOne: false
            referencedRelation: "categories"
            referencedColumns: ["id"]
          },
          {
            foreignKeyName: "category_students_student_id_fkey"
            columns: ["student_id"]
            isOneToOne: false
            referencedRelation: "students"
            referencedColumns: ["id"]
          },
        ]
      }
      classes: {
        Row: {
          created_at: string
          description: string | null
          grade_level: string | null
          id: string
          join_code: string | null
          name: string
          school_year: string | null
          subject: string | null
          term: string | null
          updated_at: string
          user_id: string | null
        }
        Insert: {
          created_at?: string
          description?: string | null
          grade_level?: string | null
          id?: string
          join_code?: string | null
          name: string
          school_year?: string | null
          subject?: string | null
          term?: string | null
          updated_at?: string
          user_id?: string | null
        }
        Update: {
          created_at?: string
          description?: string | null
          grade_level?: string | null
          id?: string
          join_code?: string | null
          name?: string
          school_year?: string | null
          subject?: string | null
          term?: string | null
          updated_at?: string
          user_id?: string | null
        }
        Relationships: [
          {
            foreignKeyName: "classes_owner_id_fkey"
            columns: ["user_id"]
            isOneToOne: false
            referencedRelation: "app_users"
            referencedColumns: ["id"]
          },
        ]
      }
      games: {
        Row: {
          created_at: string | null
          id: string
          is_public: boolean | null
          last_modified: string | null
          name: string
          owner_role: string | null
          settings: Json | null
          user_id: string | null
        }
        Insert: {
          created_at?: string | null
          id?: string
          is_public?: boolean | null
          last_modified?: string | null
          name: string
          owner_role?: string | null
          settings?: Json | null
          user_id?: string | null
        }
        Update: {
          created_at?: string | null
          id?: string
          is_public?: boolean | null
          last_modified?: string | null
          name?: string
          owner_role?: string | null
          settings?: Json | null
          user_id?: string | null
        }
        Relationships: [
          {
            foreignKeyName: "games_user_id_fkey"
            columns: ["user_id"]
            isOneToOne: false
            referencedRelation: "app_users"
            referencedColumns: ["id"]
          },
        ]
      }
      game_categories: {
        Row: {
          category_name: string
          created_at: string | null
          game_id: string | null
          id: string
          order_index: number
        }
        Insert: {
          category_name: string
          created_at?: string | null
          game_id?: string | null
          id?: string
          order_index: number
        }
        Update: {
          category_name?: string
          created_at?: string | null
          game_id?: string | null
          id?: string
          order_index?: number
        }
        Relationships: [
          {
            foreignKeyName: "game_categories_game_id_fkey"
            columns: ["game_id"]
            isOneToOne: false
            referencedRelation: "games"
            referencedColumns: ["id"]
          },
        ]
      }
      grades: {
        Row: {
          assignment_id: string
          created_at: string | null
          id: string
          points: number
          student_id: string
          updated_at: string | null
        }
        Insert: {
          assignment_id: string
          created_at?: string | null
          id?: string
          points: number
          student_id: string
          updated_at?: string | null
        }
        Update: {
          assignment_id?: string
          created_at?: string | null
          id?: string
          points?: number
          student_id?: string
          updated_at?: string | null
        }
        Relationships: [
          {
            foreignKeyName: "grades_assignment_id_fkey"
            columns: ["assignment_id"]
            isOneToOne: false
            referencedRelation: "assignments"
            referencedColumns: ["id"]
          },
          {
            foreignKeyName: "grades_student_id_fkey"
            columns: ["student_id"]
            isOneToOne: false
            referencedRelation: "students"
            referencedColumns: ["id"]
          },
        ]
      }
      log_entries: {
        Row: {
          actions: string | null
          date: string
          follow_up: string | null
          id: string
          log_entry: string
          student: string
          tags: string[]
        }
        Insert: {
          actions?: string | null
          date: string
          follow_up?: string | null
          id: string
          log_entry: string
          student: string
          tags?: string[]
        }
        Update: {
          actions?: string | null
          date?: string
          follow_up?: string | null
          id?: string
          log_entry?: string
          student?: string
          tags?: string[]
        }
        Relationships: []
      }
      questions: {
        Row: {
          answer_text: string
          answered: boolean | null
          category_id: string | null
          created_at: string | null
          id: string
          is_daily_double: boolean | null
          is_double_jeopardy: boolean | null
          order_index: number
          point_value: number
          question_text: string
          time_limit: number | null
        }
        Insert: {
          answer_text: string
          answered?: boolean | null
          category_id?: string | null
          created_at?: string | null
          id?: string
          is_daily_double?: boolean | null
          is_double_jeopardy?: boolean | null
          order_index: number
          point_value: number
          question_text: string
          time_limit?: number | null
        }
        Update: {
          answer_text?: string
          answered?: boolean | null
          category_id?: string | null
          created_at?: string | null
          id?: string
          is_daily_double?: boolean | null
          is_double_jeopardy?: boolean | null
          order_index?: number
          point_value?: number
          question_text?: string
          time_limit?: number | null
        }
        Relationships: [
          {
            foreignKeyName: "questions_category_id_fkey"
            columns: ["category_id"]
            isOneToOne: false
            referencedRelation: "game_categories"
            referencedColumns: ["id"]
          },
        ]
      }
      students: {
        Row: {
          auth_user_id: string | null
          created_at: string | null
          email: string | null
          id: string
          name: string
          notes: string | null
          student_id: string | null
          updated_at: string | null
          user_id: string | null
        }
        Insert: {
          auth_user_id?: string | null
          created_at?: string | null
          email?: string | null
          id?: string
          name: string
          notes?: string | null
          student_id?: string | null
          updated_at?: string | null
          user_id?: string | null
        }
        Update: {
          auth_user_id?: string | null
          created_at?: string | null
          email?: string | null
          id?: string
          name?: string
          notes?: string | null
          student_id?: string | null
          updated_at?: string | null
          user_id?: string | null
        }
        Relationships: [
          {
            foreignKeyName: "students_owner_id_fkey"
            columns: ["user_id"]
            isOneToOne: false
            referencedRelation: "app_users"
            referencedColumns: ["id"]
          },
        ]
      }
    }
    Views: {
      [_ in never]: never
    }
    Functions: {
      [_ in never]: never
    }
    Enums: {
      user_role: "teacher" | "student"
    }
  }
}

// Helper types for easier access
export type Tables<T extends keyof Database['public']['Tables']> = Database['public']['Tables'][T]['Row']
export type Inserts<T extends keyof Database['public']['Tables']> = Database['public']['Tables'][T]['Insert']
export type Updates<T extends keyof Database['public']['Tables']> = Database['public']['Tables'][T]['Update']

// Export user role type for convenience
export type UserRole = Database['public']['Enums']['user_role']
</file>

<file path="src/lib/types/files.ts">
// File Storage System Types

export interface FileFolder {
  id: string;
  user_id: string;
  name: string;
  parent_id: string | null;
  created_at: string;
  updated_at: string;
}

export interface FileMetadata {
  id: string;
  user_id: string;
  folder_id: string | null;
  storage_path: string;
  name: string;
  size: number; // Size in bytes
  type: string; // File extension (pdf, docx, etc.)
  mime_type: string | null;
  created_at: string;
  updated_at: string;
}

export interface FileShare {
  id: string;
  file_id: string;
  shared_with: string;
  shared_by: string;
  permission: 'view' | 'edit' | 'delete';
  created_at: string;
  expires_at: string | null;
}

// Extended types with relations
export interface FileFolderWithChildren extends FileFolder {
  children?: FileFolderWithChildren[];
  files?: FileMetadata[];
}

export interface FileMetadataWithFolder extends FileMetadata {
  folder?: FileFolder | null;
}

export interface FileShareWithDetails extends FileShare {
  file?: FileMetadata;
  shared_with_user?: {
    id: string;
    email: string;
    full_name?: string;
  };
  shared_by_user?: {
    id: string;
    email: string;
    full_name?: string;
  };
}

// File upload progress tracking
export interface FileUploadProgress {
  file: File;
  progress: number; // 0-100
  status: 'pending' | 'uploading' | 'success' | 'error';
  error?: string;
}

// File stats for dashboard
export interface UserFileStats {
  user_id: string;
  total_files: number;
  total_folders: number;
  total_size_bytes: number;
  total_size_mb: number;
}

// Helper type for file icons
export const FILE_TYPE_ICONS: Record<string, string> = {
  // Documents
  pdf: '📄',
  doc: '📝',
  docx: '📝',
  txt: '📃',
  rtf: '📝',
  
  // Spreadsheets
  xls: '📊',
  xlsx: '📊',
  csv: '📊',
  
  // Presentations
  ppt: '📊',
  pptx: '📊',
  
  // Images
  jpg: '🖼️',
  jpeg: '🖼️',
  png: '🖼️',
  gif: '🖼️',
  svg: '🖼️',
  
  // Videos
  mp4: '🎥',
  avi: '🎥',
  mov: '🎥',
  wmv: '🎥',
  
  // Audio
  mp3: '🎵',
  wav: '🎵',
  m4a: '🎵',
  
  // Archives
  zip: '📦',
  rar: '📦',
  '7z': '📦',
  tar: '📦',
  
  // Code
  js: '💻',
  ts: '💻',
  html: '🌐',
  css: '🎨',
  json: '📋',
  
  // Default
  default: '📎'
};

// Helper function to get file icon
export function getFileIcon(fileType: string): string {
  return FILE_TYPE_ICONS[fileType.toLowerCase()] || FILE_TYPE_ICONS.default;
}

// Helper function to format file size
export function formatFileSize(bytes: number): string {
  if (bytes === 0) return '0 Bytes';
  
  const k = 1024;
  const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];
  const i = Math.floor(Math.log(bytes) / Math.log(k));
  
  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
}

// Helper function to get file type from name
export function getFileType(fileName: string): string {
  const parts = fileName.split('.');
  return parts.length > 1 ? parts[parts.length - 1].toLowerCase() : 'unknown';
}

// Storage limits (can be adjusted based on your needs)
export const STORAGE_LIMITS = {
  MAX_FILE_SIZE: 50 * 1024 * 1024, // 50MB per file
  MAX_TOTAL_STORAGE: 1024 * 1024 * 1024, // 1GB total per user
  ALLOWED_FILE_TYPES: [
    // Documents
    'pdf', 'doc', 'docx', 'txt', 'rtf', 'odt',
    // Spreadsheets
    'xls', 'xlsx', 'csv', 'ods',
    // Presentations
    'ppt', 'pptx', 'odp',
    // Images
    'jpg', 'jpeg', 'png', 'gif', 'svg', 'webp',
    // Videos
    'mp4', 'avi', 'mov', 'wmv', 'webm',
    // Audio
    'mp3', 'wav', 'm4a', 'ogg',
    // Archives
    'zip', 'rar', '7z', 'tar', 'gz',
    // Other
    'json', 'xml'
  ]
};

// Validate file before upload
export function validateFile(file: File): { valid: boolean; error?: string } {
  // Check file size
  if (file.size > STORAGE_LIMITS.MAX_FILE_SIZE) {
    return {
      valid: false,
      error: `File size exceeds limit of ${formatFileSize(STORAGE_LIMITS.MAX_FILE_SIZE)}`
    };
  }
  
  // Check file type
  const fileType = getFileType(file.name);
  if (!STORAGE_LIMITS.ALLOWED_FILE_TYPES.includes(fileType)) {
    return {
      valid: false,
      error: `File type '${fileType}' is not allowed`
    };
  }
  
  return { valid: true };
}
</file>

<file path="src/lib/types/gradebook.ts">
export interface Student {
  id: string;
  name: string;
}
export interface Category {
  id: string;
  name: string;
  studentIds: string[];
}
export interface Assignment {
  id: string;
  name: string;
  maxPoints: number;
  categoryId: string;
}
export interface Grade {
  studentId: string;
  assignmentId: string;
  points: number;
}
</file>

<file path="src/lib/types/jeopardy.ts">
// src/lib/types/jeopardy.ts
export interface Question {
  id: string;
  text: string;
  answer: string;
  pointValue: number;
  isAnswered: boolean;
  isDoubleJeopardy?: boolean;
  wager?: number;
  timeLimit?: number; // Time limit in seconds
}

export interface Category {
  id: string;
  name: string;
  questions: Question[];
}

export interface Team {
  id: string;
  name: string;
  score: number;
  color: string; // CSS color for the team
}

export interface JeopardyGame {
  id: string;
  name: string;
  description?: string;
  categories: Category[];
  teams: Team[];
  dateCreated: string;
  lastModified: string;
  settings?: GameSettings;
}

export type TimerSize = 'large' | 'medium' | 'small';

export interface GameSettings {
  defaultTimeLimit?: number; // Default time limit in seconds for questions
  useTimer?: boolean; // Whether to use timer by default
  readingTime?: number; // Reading time in seconds before countdown starts (default 5)
  autoShowAnswer?: boolean; // Whether to automatically show answer when timer expires
  timerSize?: TimerSize; // Size of the timer display (large, medium, small)
  allowWagers?: boolean; // Whether to allow wagers for double jeopardy
}

export interface GameTemplate {
  id: string;
  name: string;
  description: string;
  categories: {
    name: string;
    questions: {
      text: string;
      answer: string;
      pointValue: number;
      isDoubleJeopardy?: boolean;
    }[];
  }[];
}
</file>

<file path="src/lib/types/log-entries.ts">
export interface LogEntry {
  id: string;
  observer: string;
  date: string;
  student: string;
  subject: string | null;
  objective: string | null;
  observation: string;
  actions: string | null;
  follow_up: string | null;
  tags: string[] | null;
}

export interface LogEntryFilters {
  searchQuery?: string;
  dateFrom?: string;
  dateTo?: string;
  student?: string;
  tags?: string[];
}
</file>

<file path="src/lib/utils/authGuard.ts">
import { redirect } from '@sveltejs/kit';
import type { LoadEvent } from '@sveltejs/kit';

/**
 * Authentication guard for protected routes
 * Redirects to login if not authenticated
 */
export async function authGuard({ url }: LoadEvent) {
  // Dynamically import supabase client to ensure it's properly initialized
  const { supabase } = await import('$lib/supabaseClient');
  
  const { data } = await supabase.auth.getSession();
  
  if (!data.session) {
    // Not authenticated, redirect to login
    throw redirect(303, `/auth/login?redirectTo=${url.pathname}`);
  }
  
  // User is authenticated, continue
  return {
    user: data.session.user
  };
}
</file>

<file path="src/lib/utils/dragAndDrop.ts">
import type { FileMetadata } from '$lib/types/files';

export interface DragData {
  type: 'file';
  file: FileMetadata;
}

export interface DropTarget {
  type: 'folder';
  folderId: string | null;
  folderName: string;
}

// Drag and drop state management
export function createDragHandlers() {
  let draggedItem: DragData | null = null;
  let isDragging = false;

  function startDrag(file: FileMetadata) {
    draggedItem = { type: 'file', file };
    isDragging = true;
  }

  function endDrag() {
    draggedItem = null;
    isDragging = false;
  }

  function getDraggedItem() {
    return draggedItem;
  }

  function getIsDragging() {
    return isDragging;
  }

  return {
    startDrag,
    endDrag,
    getDraggedItem,
    getIsDragging
  };
}

// HTML5 Drag and Drop handlers
export function createDragEventHandlers(
  file: FileMetadata,
  onDragStart: (file: FileMetadata) => void,
  onDragEnd: () => void
) {
  return {
    draggable: true,
    ondragstart: (e: DragEvent) => {
      if (e.dataTransfer) {
        e.dataTransfer.effectAllowed = 'move';
        e.dataTransfer.setData('application/json', JSON.stringify({
          type: 'file',
          file
        }));
      }
      onDragStart(file);
    },
    ondragend: () => {
      onDragEnd();
    }
  };
}

export function createDropEventHandlers(
  target: DropTarget,
  onDrop: (dragData: DragData, target: DropTarget) => void,
  onDragOver?: (isOver: boolean) => void
) {
  return {
    ondragover: (e: DragEvent) => {
      e.preventDefault();
      if (e.dataTransfer) {
        e.dataTransfer.dropEffect = 'move';
      }
      onDragOver?.(true);
    },
    ondragenter: (e: DragEvent) => {
      e.preventDefault();
      onDragOver?.(true);
    },
    ondragleave: (e: DragEvent) => {
      e.preventDefault();
      // Only trigger leave if we're actually leaving the element
      if (!e.currentTarget.contains(e.relatedTarget as Node)) {
        onDragOver?.(false);
      }
    },
    ondrop: (e: DragEvent) => {
      e.preventDefault();
      onDragOver?.(false);
      
      if (e.dataTransfer) {
        try {
          const dragData = JSON.parse(e.dataTransfer.getData('application/json')) as DragData;
          if (dragData.type === 'file') {
            onDrop(dragData, target);
          }
        } catch (error) {
          console.error('Error parsing drag data:', error);
        }
      }
    }
  };
}
</file>

<file path="src/lib/utils/modelConverters.test.ts">
import { describe, test, expect } from 'vitest';
import {
  dbStudentToAppStudent,
  appStudentToDbStudent,
  dbCategoryToAppCategory,
  appCategoryToDbCategory,
  dbAssignmentToAppAssignment,
  appAssignmentToDbAssignment,
  dbGradeToAppGrade,
  appGradeToDbGrade,
  dbObservationLogToAppLogEntry,
  appLogEntryToDbObservationLog,
  dbGameToAppGame,
  appGameToDbGame,
  dbQuestionToAppQuestion,
  appQuestionToDbQuestion
} from './modelConverters';

describe('modelConverters', () => {
  describe('Student converters', () => {
    test('dbStudentToAppStudent should convert correctly', () => {
      const dbStudent = {
        id: '123',
        name: 'John Doe',
        email: 'john@example.com',
        join_code: 'ABC123',
        created_at: '2024-01-01T00:00:00Z',
        user_id: 'user123'
      };

      const appStudent = dbStudentToAppStudent(dbStudent);

      expect(appStudent).toEqual({
        id: '123',
        name: 'John Doe',
        email: 'john@example.com',
        joinCode: 'ABC123'
      });
    });

    test('appStudentToDbStudent should convert correctly', () => {
      const appStudent = {
        id: '123',
        name: 'John Doe',
        email: 'john@example.com',
        joinCode: 'ABC123'
      };

      const dbStudent = appStudentToDbStudent(appStudent);

      expect(dbStudent).toEqual({
        id: '123',
        name: 'John Doe',
        email: 'john@example.com',
        join_code: 'ABC123'
      });
    });

    test('should handle null join_code', () => {
      const dbStudent = {
        id: '123',
        name: 'John Doe',
        email: 'john@example.com',
        join_code: null,
        created_at: '2024-01-01T00:00:00Z',
        user_id: 'user123'
      };

      const appStudent = dbStudentToAppStudent(dbStudent);

      expect(appStudent.joinCode).toBeUndefined();
    });
  });

  describe('Category converters', () => {
    test('dbCategoryToAppCategory should convert correctly', () => {
      const dbCategory = {
        id: '456',
        name: 'Homework',
        weight: 0.3,
        created_at: '2024-01-01T00:00:00Z',
        user_id: 'user123'
      };

      const appCategory = dbCategoryToAppCategory(dbCategory);

      expect(appCategory).toEqual({
        id: '456',
        name: 'Homework',
        weight: 0.3
      });
    });

    test('appCategoryToDbCategory should convert correctly', () => {
      const appCategory = {
        id: '456',
        name: 'Homework',
        weight: 0.3
      };

      const dbCategory = appCategoryToDbCategory(appCategory);

      expect(dbCategory).toEqual({
        id: '456',
        name: 'Homework',
        weight: 0.3
      });
    });
  });

  describe('Assignment converters', () => {
    test('dbAssignmentToAppAssignment should convert correctly', () => {
      const dbAssignment = {
        id: '789',
        name: 'Math HW 1',
        category_id: 'cat123',
        total_points: 100,
        due_date: '2024-12-31',
        created_at: '2024-01-01T00:00:00Z',
        user_id: 'user123'
      };

      const appAssignment = dbAssignmentToAppAssignment(dbAssignment);

      expect(appAssignment).toEqual({
        id: '789',
        name: 'Math HW 1',
        categoryId: 'cat123',
        totalPoints: 100,
        dueDate: '2024-12-31'
      });
    });

    test('should handle null due_date', () => {
      const dbAssignment = {
        id: '789',
        name: 'Math HW 1',
        category_id: 'cat123',
        total_points: 100,
        due_date: null,
        created_at: '2024-01-01T00:00:00Z',
        user_id: 'user123'
      };

      const appAssignment = dbAssignmentToAppAssignment(dbAssignment);

      expect(appAssignment.dueDate).toBeNull();
    });
  });

  describe('Grade converters', () => {
    test('dbGradeToAppGrade should convert correctly', () => {
      const dbGrade = {
        id: '999',
        student_id: 'student123',
        assignment_id: 'assign123',
        points_earned: 95,
        comments: 'Great work!',
        created_at: '2024-01-01T00:00:00Z',
        user_id: 'user123'
      };

      const appGrade = dbGradeToAppGrade(dbGrade);

      expect(appGrade).toEqual({
        id: '999',
        studentId: 'student123',
        assignmentId: 'assign123',
        pointsEarned: 95,
        comments: 'Great work!'
      });
    });

    test('should handle null comments', () => {
      const dbGrade = {
        id: '999',
        student_id: 'student123',
        assignment_id: 'assign123',
        points_earned: 95,
        comments: null,
        created_at: '2024-01-01T00:00:00Z',
        user_id: 'user123'
      };

      const appGrade = dbGradeToAppGrade(dbGrade);

      expect(appGrade.comments).toBeNull();
    });
  });

  describe('ObservationLog converters', () => {
    test('dbObservationLogToAppLogEntry should convert correctly', () => {
      const dbLog = {
        id: '111',
        student_id: 'student123',
        observer_name: 'Teacher Name',
        observation_date: '2024-01-15',
        behavior_type: 'positive',
        behavior_description: 'Helped classmate',
        context: 'During math class',
        action_taken: 'Praised student',
        follow_up_required: true,
        created_at: '2024-01-15T10:00:00Z',
        user_id: 'user123'
      };

      const appLogEntry = dbObservationLogToAppLogEntry(dbLog);

      expect(appLogEntry).toEqual({
        id: '111',
        studentId: 'student123',
        observerName: 'Teacher Name',
        observationDate: '2024-01-15',
        behaviorType: 'positive',
        behaviorDescription: 'Helped classmate',
        context: 'During math class',
        actionTaken: 'Praised student',
        followUpRequired: true
      });
    });

    test('should handle optional fields', () => {
      const dbLog = {
        id: '111',
        student_id: 'student123',
        observer_name: 'Teacher Name',
        observation_date: '2024-01-15',
        behavior_type: 'neutral',
        behavior_description: 'Arrived late',
        context: null,
        action_taken: null,
        follow_up_required: false,
        created_at: '2024-01-15T10:00:00Z',
        user_id: 'user123'
      };

      const appLogEntry = dbObservationLogToAppLogEntry(dbLog);

      expect(appLogEntry.context).toBeUndefined();
      expect(appLogEntry.actionTaken).toBeUndefined();
      expect(appLogEntry.followUpRequired).toBe(false);
    });
  });

  describe('Game converters', () => {
    test('dbGameToAppGame should convert correctly with categories', () => {
      const dbGame = {
        id: 'game123',
        name: 'Science Jeopardy',
        description: 'Test your science knowledge',
        is_public: true,
        created_by: 'user123',
        created_at: '2024-01-01T00:00:00Z',
        updated_at: '2024-01-02T00:00:00Z'
      };

      const dbCategories = [
        {
          id: 'cat1',
          game_id: 'game123',
          name: 'Biology',
          order_index: 0
        }
      ];

      const dbQuestions = [
        {
          id: 'q1',
          category_id: 'cat1',
          question: 'What is photosynthesis?',
          answer: 'Process by which plants make food',
          point_value: 100,
          is_double_jeopardy: false
        }
      ];

      const appGame = dbGameToAppGame(dbGame, dbCategories, dbQuestions);

      expect(appGame).toEqual({
        id: 'game123',
        name: 'Science Jeopardy',
        description: 'Test your science knowledge',
        isPublic: true,
        createdBy: 'user123',
        categories: [
          {
            id: 'cat1',
            name: 'Biology',
            orderIndex: 0,
            questions: [
              {
                id: 'q1',
                categoryId: 'cat1',
                question: 'What is photosynthesis?',
                answer: 'Process by which plants make food',
                pointValue: 100,
                isDoubleJeopardy: false
              }
            ]
          }
        ]
      });
    });

    test('appGameToDbGame should separate game, categories, and questions', () => {
      const appGame = {
        id: 'game123',
        name: 'Math Jeopardy',
        description: 'Test your math skills',
        isPublic: false,
        createdBy: 'user456',
        categories: [
          {
            id: 'cat1',
            name: 'Algebra',
            orderIndex: 0,
            questions: [
              {
                id: 'q1',
                categoryId: 'cat1',
                question: 'Solve for x: 2x + 5 = 15',
                answer: 'x = 5',
                pointValue: 200,
                isDoubleJeopardy: false
              }
            ]
          }
        ]
      };

      const { game, categories, questions } = appGameToDbGame(appGame);

      expect(game).toEqual({
        id: 'game123',
        name: 'Math Jeopardy',
        description: 'Test your math skills',
        is_public: false,
        created_by: 'user456'
      });

      expect(categories).toEqual([
        {
          id: 'cat1',
          game_id: 'game123',
          name: 'Algebra',
          order_index: 0
        }
      ]);

      expect(questions).toEqual([
        {
          id: 'q1',
          category_id: 'cat1',
          question: 'Solve for x: 2x + 5 = 15',
          answer: 'x = 5',
          point_value: 200,
          is_double_jeopardy: false
        }
      ]);
    });
  });

  describe('Question converters', () => {
    test('dbQuestionToAppQuestion should convert correctly', () => {
      const dbQuestion = {
        id: 'q123',
        category_id: 'cat456',
        question: 'What is the capital of France?',
        answer: 'Paris',
        point_value: 300,
        is_double_jeopardy: true
      };

      const appQuestion = dbQuestionToAppQuestion(dbQuestion);

      expect(appQuestion).toEqual({
        id: 'q123',
        categoryId: 'cat456',
        question: 'What is the capital of France?',
        answer: 'Paris',
        pointValue: 300,
        isDoubleJeopardy: true
      });
    });

    test('appQuestionToDbQuestion should convert correctly', () => {
      const appQuestion = {
        id: 'q123',
        categoryId: 'cat456',
        question: 'What is 2 + 2?',
        answer: '4',
        pointValue: 100,
        isDoubleJeopardy: false
      };

      const dbQuestion = appQuestionToDbQuestion(appQuestion);

      expect(dbQuestion).toEqual({
        id: 'q123',
        category_id: 'cat456',
        question: 'What is 2 + 2?',
        answer: '4',
        point_value: 100,
        is_double_jeopardy: false
      });
    });
  });

  describe('Edge cases', () => {
    test('should handle undefined optional fields', () => {
      const appStudent = {
        id: '123',
        name: 'Jane Doe',
        email: 'jane@example.com'
      };

      const dbStudent = appStudentToDbStudent(appStudent);

      expect(dbStudent.join_code).toBeUndefined();
    });

    test('should preserve all required fields', () => {
      const dbGrade = {
        id: '999',
        student_id: 'student123',
        assignment_id: 'assign123',
        points_earned: 0, // Test zero value
        comments: null,
        created_at: '2024-01-01T00:00:00Z',
        user_id: 'user123'
      };

      const appGrade = dbGradeToAppGrade(dbGrade);
      const dbGradeConverted = appGradeToDbGrade(appGrade);

      expect(dbGradeConverted.points_earned).toBe(0);
      expect(dbGradeConverted.student_id).toBe('student123');
      expect(dbGradeConverted.assignment_id).toBe('assign123');
    });
  });
});
</file>

<file path="src/lib/utils/modelConverters.ts">
import type { Tables } from '$lib/types/database';
import type { 
  Student, 
  Category, 
  Assignment, 
  Grade 
} from '$lib/types/gradebook';

import type {
  JeopardyGame,
  Category as JeopardyCategory,
  Team,
  GameSettings
} from '$lib/types/jeopardy';

import type {
  LogEntry
} from '$lib/types/log-entries';

// Type aliases for better readability and to fix type inference
type DBStudent = Tables<'students'>;
type DBCategory = Tables<'categories'>;
type DBCategoryStudent = Tables<'category_students'>;
type DBAssignment = Tables<'assignments'>;
type DBGrade = Tables<'grades'>;
type DBObservationLog = Tables<'log_entries'>;
type DBGame = Tables<'games'>;
type DBGameCategory = Tables<'game_categories'>;
type DBQuestion = Tables<'questions'>;

// Gradebook model converters
export function dbStudentToAppStudent(dbStudent: DBStudent): Student {
  return {
    id: dbStudent.id,
    name: dbStudent.name
  };
}

export function dbCategoryToAppCategory(
  dbCategory: DBCategory, 
  categoryStudents: DBCategoryStudent[]
): Category {
  // Handle categories from both schema versions
  return {
    id: dbCategory.id,
    name: dbCategory.name,
    // Filter category_students relationships for this category
    studentIds: categoryStudents
      .filter(cs => cs.category_id === dbCategory.id)
      .map(cs => cs.student_id)
  };
}

export function dbAssignmentToAppAssignment(dbAssignment: DBAssignment): Assignment {
  return {
    id: dbAssignment.id,
    name: dbAssignment.name,
    maxPoints: dbAssignment.max_points,
    categoryId: dbAssignment.category_id
  };
}

export function dbGradeToAppGrade(dbGrade: DBGrade): Grade {
  return {
    studentId: dbGrade.student_id,
    assignmentId: dbGrade.assignment_id,
    points: dbGrade.points ?? 0 // Handle null as 0 for Grade type compatibility
  };
}

// Define explicit interfaces for the database models we're working with
interface JeopardyGameDB {
  id: string;
  name: string;
  description?: string;
  owner_id: string;
  date_created: string;
  last_modified: string;
  settings?: any;
}

interface JeopardyCategoryDB {
  id: string;
  game_id: string;
  name: string;
  display_order: number;
}

interface JeopardyQuestionDB {
  id: string;
  category_id: string;
  text: string;
  answer: string;
  point_value: number;
  is_answered: boolean;
  is_double_jeopardy: boolean;
  time_limit?: number;
}

interface JeopardyTeamDB {
  id: string;
  game_id: string;
  name: string;
  score: number;
  color: string;
}


// Jeopardy model converters with explicit type casting
export function dbGameToAppGame(
  dbGame: any,
  dbCategories: any[],
  dbQuestions: any[],
  dbTeams: any[]
): JeopardyGame {
  // Cast to known types
  const typedDbGame = dbGame as JeopardyGameDB;
  const typedDbCategories = dbCategories as JeopardyCategoryDB[];
  const typedDbQuestions = dbQuestions as JeopardyQuestionDB[];
  const typedDbTeams = dbTeams as JeopardyTeamDB[];
  // Convert settings from JSON to typed object
  const settings: GameSettings = {
    defaultTimeLimit: 30,
    useTimer: true,
    readingTime: 5,
    autoShowAnswer: true,
    timerSize: 'large',
    allowWagers: true,
    ...(typedDbGame.settings as Record<string, any> ?? {})
  };

  // Get categories for this game
  const gameCategories = typedDbCategories
    .filter(cat => cat.game_id === typedDbGame.id)
    .sort((a, b) => a.display_order - b.display_order);

  // Process categories with their questions
  const categories: JeopardyCategory[] = gameCategories.map(dbCat => {
    // Get questions for this category
    const categoryQuestions = typedDbQuestions
      .filter(q => q.category_id === dbCat.id)
      .map(dbQuestion => ({
        id: dbQuestion.id,
        text: dbQuestion.text,
        answer: dbQuestion.answer,
        pointValue: dbQuestion.point_value,
        isAnswered: dbQuestion.is_answered,
        isDoubleJeopardy: dbQuestion.is_double_jeopardy,
        timeLimit: dbQuestion.time_limit ?? undefined
      }));
    
    return {
      id: dbCat.id,
      name: dbCat.name,
      questions: categoryQuestions
    };
  });

  // Get teams for this game
  const teams: Team[] = typedDbTeams
    .filter(team => team.game_id === typedDbGame.id)
    .map(dbTeam => ({
      id: dbTeam.id,
      name: dbTeam.name,
      score: dbTeam.score,
      color: dbTeam.color
    }));

  return {
    id: typedDbGame.id,
    name: typedDbGame.name,
    description: typedDbGame.description ?? undefined,
    categories,
    teams,
    dateCreated: typedDbGame.date_created,
    lastModified: typedDbGame.last_modified,
    settings
  };
}

// Convert from app model to database model for creating/updating
export function appGameToDbModels(game: JeopardyGame, userId: string): {
  gameData: any,
  categoriesData: any[],
  questionsData: any[],
  teamsData: any[]
} {
  // Prepare game data
  const gameData: any = {
    owner_id: userId,
    name: game.name,
    description: game.description ?? null,
    date_created: game.dateCreated,
    last_modified: game.lastModified,
    settings: game.settings as any
  };

  // Prepare categories data
  const categoriesData: any[] = 
    game.categories.map((cat, index) => ({
      game_id: game.id,
      name: cat.name,
      display_order: index,
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString()
    }));

  // Prepare questions data
  const questionsData: any[] = 
    game.categories.flatMap((cat) => 
      cat.questions.map(q => ({
        category_id: cat.id,
        text: q.text,
        answer: q.answer,
        point_value: q.pointValue,
        is_answered: q.isAnswered,
        is_double_jeopardy: q.isDoubleJeopardy ?? false,
        time_limit: q.timeLimit ?? null,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      }))
    );

  // Prepare teams data
  const teamsData: any[] = 
    game.teams.map(team => ({
      game_id: game.id,
      name: team.name,
      score: team.score,
      color: team.color,
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString()
    }));

  return {
    gameData,
    categoriesData,
    questionsData,
    teamsData
  };
}

// Log entries model converters
export function dbLogToAppLog(dbLog: DBObservationLog): LogEntry {
  return {
    id: dbLog.id,
    observer: '', // Not in database, needs to be added or derived
    date: dbLog.date,
    student: dbLog.student,
    subject: null, // Not in database
    objective: null, // Not in database
    observation: dbLog.log_entry, // Database uses 'log_entry' field
    actions: dbLog.actions,
    follow_up: dbLog.follow_up,
    tags: dbLog.tags ?? null
  };
}

export function appLogToDbLog(log: Partial<LogEntry>): Partial<DBObservationLog> {
  return {
    date: log.date,
    student: log.student,
    log_entry: log.observation || '', // Map 'observation' to 'log_entry'
    actions: log.actions ?? null,
    follow_up: log.follow_up ?? null,
    tags: log.tags ?? []
  };
}
</file>

<file path="src/lib/utils/performance.ts">
import * as Sentry from '@sentry/sveltekit';

/**
 * Custom performance utilities for manual instrumentation
 */

/**
 * Track async operations like API calls
 */
export async function trackAsyncOperation<T>(
  name: string,
  operation: () => Promise<T>,
  tags?: Record<string, string>
): Promise<T> {
  return Sentry.startSpan(
    {
      name,
      op: 'function',
      tags,
    },
    async () => {
      try {
        const result = await operation();
        Sentry.setTag('operation.success', 'true');
        return result;
      } catch (error) {
        Sentry.setTag('operation.success', 'false');
        Sentry.captureException(error);
        throw error;
      }
    }
  );
}

/**
 * Track component rendering performance
 */
export function trackComponentRender(componentName: string) {
  return Sentry.startSpan({
    name: `${componentName} render`,
    op: 'ui.svelte.render',
  });
}

/**
 * Track user interactions
 */
export function trackUserInteraction(action: string, target?: string) {
  Sentry.addBreadcrumb({
    message: `User ${action}`,
    category: 'user',
    data: {
      target,
      timestamp: Date.now(),
    },
    level: 'info',
  });
}

/**
 * Track database operations
 */
export async function trackDatabaseOperation<T>(
  table: string,
  operation: string,
  dbOperation: () => Promise<T>
): Promise<T> {
  return trackAsyncOperation(
    `db.${operation}`,
    dbOperation,
    {
      'db.table': table,
      'db.operation': operation,
    }
  );
}

/**
 * Track route changes manually (in addition to automatic tracking)
 */
export function trackRouteChange(from: string, to: string) {
  Sentry.startSpan({
    name: `Route change: ${from} → ${to}`,
    op: 'navigation',
    tags: {
      'route.from': from,
      'route.to': to,
    },
  });
}
</file>

<file path="src/routes/+layout.svelte">
<script lang="ts">
  import '../app.css';
  // Core imports
  import '@fontsource/inter/400.css';
  import '@fontsource/inter/500.css';
  import '@fontsource/inter/600.css';
  import ThemeToggle from '$lib/components/ThemeToggle.svelte';

  import { goto } from '$app/navigation';
  import { navigating } from '$app/stores';
  import LoadingBounce from '$lib/components/LoadingBounce.svelte';
  
  // Use regular imports - we'll fix the store files after
  import { authStore, isAuthenticated } from '$lib/stores/auth';
  import { gradebookStore } from '$lib/stores/gradebook';
  
  // Vercel Speed Insights
  import { injectSpeedInsights } from '@vercel/speed-insights/sveltekit';
  
  injectSpeedInsights();
  
  // Vercel Analytics
  import { dev } from '$app/environment';
  import { injectAnalytics } from '@vercel/analytics/sveltekit';
  
  injectAnalytics({ mode: dev ? 'development' : 'production' });

  // Get children prop for Svelte 5
  let { children } = $props();

  // Local state using $state
  let newClassName = $state('');
  let sidebarCollapsed = $state(false);
  let userMenuOpen = $state(false);

  function handleAddClass() {
    if (newClassName.trim()) {
      gradebookStore.addCategory(newClassName);
      newClassName = '';
    }
  }

  function handleSelectClass(categoryId) {
    gradebookStore.selectCategory(categoryId);
    goto('/gradebook');
  }

  function toggleUserMenu() {
    userMenuOpen = !userMenuOpen;
  }

  function handleSignOut() {
    authStore.signOut();
    goto('/auth/login');
  }

  // Setup with $effect instead of onMount
  $effect(() => {
    // Set dark mode
    document.documentElement.classList.add('dark');
    document.documentElement.setAttribute('data-ag-theme-mode', 'dark');

    // Close user menu when clicking outside
    function handleClickOutside(event) {
      const target = event.target;
      if (userMenuOpen && !target.closest('.user-menu')) {
        userMenuOpen = false;
      }
    }

    document.addEventListener('click', handleClickOutside);

    return () => {
      document.removeEventListener('click', handleClickOutside);
    };
  });

  // Ensure data is loaded
  $effect(() => {
    gradebookStore.ensureDataLoaded();
  });
</script>

<div class="min-h-screen bg-bg-base text-text-base flex flex-col transition-colors">
  <nav class="bg-surface/80 backdrop-blur-md border-b border-border/50 relative z-50">
    <div class="max-w-7xl mx-auto px-6 py-4 flex justify-between items-center">
      <div class="flex items-center gap-3">
        <div class="h-8 w-8 bg-gradient-to-br from-purple to-purple-light rounded-md flex items-center justify-center shadow-glow">
          <svg class="w-5 h-5 text-white" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <path d="M12 2L2 7l10 5 10-5-10-5zM2 17l10 5 10-5M2 12l10 5 10-5"></path>
          </svg>
        </div>
        <h1 class="text-xl font-bold tracking-wide text-highlight">
          Teacher <span class="text-purple">Dashboard</span>
        </h1>
      </div>

      <div class="flex items-center gap-8">
        <div class="flex gap-6">
          <a href="/dashboard" class="nav-button">Dashboard</a>
          <a href="/files" class="nav-button">Files</a>
          <a href="/chat" class="nav-button">Chat</a>
          <a href="/gradebook" class="nav-button">Gradebook</a>
          <a href="/jeopardy" class="nav-button">Jeopardy</a>
          <a href="/log-entries" class="nav-button">Log Entries</a>
        </div>

        <div class="flex items-center gap-3">
          <ThemeToggle />
          
          <div class="relative user-menu">
            {#if $isAuthenticated}
              <button
                onclick={toggleUserMenu}
                class="flex items-center gap-3 hover:bg-accent/20 p-1 rounded-lg"
              >
                <div class="w-8 h-8 bg-purple rounded-full flex items-center justify-center text-white font-medium">
                  {$authStore.user?.user_metadata?.full_name?.[0] || $authStore.user?.email?.[0]?.toUpperCase() || 'T'}
                </div>
                <span class="text-sm text-gray-300">{$authStore.user?.user_metadata?.full_name || 'Teacher'}</span>
                <svg class="w-4 h-4 text-gray-300" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
                </svg>
              </button>
              
              {#if userMenuOpen}
                <div class="absolute right-0 mt-2 w-48 bg-card border border-border rounded-lg shadow-dropdown z-[100]">
                  <div class="py-1">
                    <a href="/settings/profile" class="menu-item text-sm" onclick={() => userMenuOpen = false}>
                      <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
                      </svg>
                      <span>Profile</span>
                    </a>
                    <a href="/settings" class="menu-item text-sm" onclick={() => userMenuOpen = false}>
                      <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z"></path>
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                      </svg>
                      <span>Settings</span>
                    </a>
                    <a href="/test-sentry" class="menu-item text-sm" onclick={() => userMenuOpen = false}>
                      <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                      </svg>
                      <span>Test Sentry</span>
                    </a>
                    <div class="separator mx-2 my-1"></div>
                    <button
                      onclick={() => {
                        userMenuOpen = false;
                        handleSignOut();
                      }}
                      class="menu-item danger text-sm w-full text-left"
                    >
                      <svg class="w-4 h-4 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1"></path>
                      </svg>
                      <span>Sign out</span>
                    </button>
                  </div>
                </div>
              {/if}
            {:else}
              <a href="/auth/login" class="text-gray-300 hover:text-highlight transition-all duration-300 font-medium px-3 py-2 rounded-md hover:bg-purple-bg">
                Sign in
              </a>
            {/if}
          </div>
        </div>
      </div>
    </div>
  </nav>

  <div class="flex flex-grow relative">
    <!-- Left sidebar - hidden on smaller screens -->
    <aside class="hidden md:block bg-surface/80 backdrop-blur-md border-r border-border/50 transition-[width] duration-150 relative"
           class:collapsed={sidebarCollapsed}
           style="width: {sidebarCollapsed ? '3.5rem' : '14rem'}">
      <!-- Toggle button -->
      <button
        onclick={() => sidebarCollapsed = !sidebarCollapsed}
        class="absolute -right-3 top-6 z-10 w-6 h-6 bg-surface border border-border rounded-md text-muted hover:text-highlight hover:border-highlight transition-all duration-200"
        aria-label={sidebarCollapsed ? 'Expand sidebar' : 'Collapse sidebar'}
      >
        <svg class="w-full h-full p-1" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2.5">
          <path stroke-linecap="round" stroke-linejoin="round" d={sidebarCollapsed ? "M13 5l7 7-7 7" : "M11 19l-7-7 7-7"} />
        </svg>
      </button>
      
      <div class="space-y-6 transition-[padding] duration-150" class:p-4={!sidebarCollapsed} class:px-0={sidebarCollapsed} class:py-4={sidebarCollapsed}>
        <div>
          {#if !sidebarCollapsed}
            <h3 class="text-gray-400 uppercase text-xs font-semibold mb-3 px-3">Menu</h3>
          {/if}
          <div class="space-y-1">
            <a
              href="/dashboard"
              class="menu-item relative group hover:bg-purple-bg"
              class:px-3={!sidebarCollapsed}
              class:px-1={sidebarCollapsed}
              class:justify-center={sidebarCollapsed}
              title="Dashboard"
            >
              <svg
                class="w-5 h-5 flex-shrink-0"
                xmlns="http://www.w3.org/2000/svg"
                fill="none"
                viewBox="0 0 24 24"
                stroke="currentColor"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6"
                />
              </svg>
              {#if !sidebarCollapsed}
                <span>Dashboard</span>
              {:else}
                <span class="absolute left-full ml-2 px-2 py-1 bg-card border border-border rounded-lg text-sm text-text-hover opacity-0 group-hover:opacity-100 transition-opacity whitespace-nowrap z-10 shadow-dropdown">Dashboard</span>
              {/if}
            </a>
            
            <a
              href="/files"
              class="menu-item relative group hover:bg-purple-bg"
              class:px-3={!sidebarCollapsed}
              class:px-1={sidebarCollapsed}
              class:justify-center={sidebarCollapsed}
              title="Files"
            >
              <svg class="w-5 h-5 flex-shrink-0" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"></path>
                <polyline points="14 2 14 8 20 8"></polyline>
                <line x1="16" y1="13" x2="8" y2="13"></line>
                <line x1="16" y1="17" x2="8" y2="17"></line>
                <polyline points="10 9 9 9 8 9"></polyline>
              </svg>
              {#if !sidebarCollapsed}
                <span>Files</span>
              {:else}
                <span class="absolute left-full ml-2 px-2 py-1 bg-card border border-border rounded-lg text-sm text-text-hover opacity-0 group-hover:opacity-100 transition-opacity whitespace-nowrap z-10 shadow-dropdown">Files</span>
              {/if}
            </a>
            
            <a
              href="/chat"
              class="menu-item relative group hover:bg-purple-bg"
              class:px-3={!sidebarCollapsed}
              class:px-1={sidebarCollapsed}
              class:justify-center={sidebarCollapsed}
              title="Chat"
            >
              <svg class="w-5 h-5 flex-shrink-0" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M21 11.5a8.38 8.38 0 0 1-.9 3.8 8.5 8.5 0 0 1-7.6 4.7 8.38 8.38 0 0 1-3.8-.9L3 21l1.9-5.7a8.38 8.38 0 0 1-.9-3.8 8.5 8.5 0 0 1 4.7-7.6 8.38 8.38 0 0 1 3.8-.9h.5a8.48 8.48 0 0 1 8 8v.5z"></path>
              </svg>
              {#if !sidebarCollapsed}
                <span>Chat</span>
              {:else}
                <span class="absolute left-full ml-2 px-2 py-1 bg-card border border-border rounded-lg text-sm text-text-hover opacity-0 group-hover:opacity-100 transition-opacity whitespace-nowrap z-10 shadow-dropdown">Chat</span>
              {/if}
            </a>
            
            <a
              href="/classes"
              class="menu-item relative group hover:bg-purple-bg"
              class:px-3={!sidebarCollapsed}
              class:px-1={sidebarCollapsed}
              class:justify-center={sidebarCollapsed}
              title="Classes"
            >
              <svg class="w-5 h-5 flex-shrink-0" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197M13 7a4 4 0 11-8 0 4 4 0 018 0z" />
              </svg>
              {#if !sidebarCollapsed}
                <span>Classes</span>
              {:else}
                <span class="absolute left-full ml-2 px-2 py-1 bg-card border border-border rounded-lg text-sm text-text-hover opacity-0 group-hover:opacity-100 transition-opacity whitespace-nowrap z-10 shadow-dropdown">Classes</span>
              {/if}
            </a>
            
            <a
              href="/gradebook"
              class="menu-item relative group hover:bg-purple-bg"
              class:px-3={!sidebarCollapsed}
              class:px-1={sidebarCollapsed}
              class:justify-center={sidebarCollapsed}
              title="Gradebook"
            >
              <svg class="w-5 h-5 flex-shrink-0" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-3 7h3m-3 4h3m-6-4h.01M9 16h.01" />
              </svg>
              {#if !sidebarCollapsed}
                <span>Gradebook</span>
              {:else}
                <span class="absolute left-full ml-2 px-2 py-1 bg-card border border-border rounded-lg text-sm text-text-hover opacity-0 group-hover:opacity-100 transition-opacity whitespace-nowrap z-10 shadow-dropdown">Gradebook</span>
              {/if}
            </a>
            
            <a
              href="/jeopardy"
              class="menu-item relative group"
              class:px-3={!sidebarCollapsed}
              class:px-1={sidebarCollapsed}
              class:justify-center={sidebarCollapsed}
              title="Jeopardy"
            >
              <svg class="w-5 h-5 flex-shrink-0" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19.428 15.428a2 2 0 00-1.022-.547l-2.387-.477a6 6 0 00-3.86.517l-.318.158a6 6 0 01-3.86.517L6.05 15.21a2 2 0 00-1.806.547M8 4h8l-1 1v5.172a2 2 0 00.586 1.414l5 5c1.26 1.26.367 3.414-1.415 3.414H4.828c-1.782 0-2.674-2.154-1.414-3.414l5-5A2 2 0 009 10.172V5L8 4z" />
              </svg>
              {#if !sidebarCollapsed}
                <span>Jeopardy</span>
              {:else}
                <span class="absolute left-full ml-2 px-2 py-1 bg-card border border-border rounded-lg text-sm text-text-hover opacity-0 group-hover:opacity-100 transition-opacity whitespace-nowrap z-10 shadow-dropdown">Jeopardy</span>
              {/if}
            </a>
            
            <a
              href="/log-entries"
              class="menu-item relative group"
              class:px-3={!sidebarCollapsed}
              class:px-1={sidebarCollapsed}
              class:justify-center={sidebarCollapsed}
              title="Log Entries"
            >
              <svg class="w-5 h-5 flex-shrink-0" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.747 0 3.332.477 4.5 1.253v13C19.832 18.477 18.247 18 16.5 18c-1.746 0-3.332.477-4.5 1.253" />
              </svg>
              {#if !sidebarCollapsed}
                <span>Log Entries</span>
              {:else}
                <span class="absolute left-full ml-2 px-2 py-1 bg-card border border-border rounded-lg text-sm text-text-hover opacity-0 group-hover:opacity-100 transition-opacity whitespace-nowrap z-10 shadow-dropdown">Log Entries</span>
              {/if}
            </a>
            
            <a
              href="/class-dojo-remake"
              class="menu-item relative group"
              class:px-3={!sidebarCollapsed}
              class:px-1={sidebarCollapsed}
              class:justify-center={sidebarCollapsed}
              title="Class Dojo"
            >
              <svg class="w-5 h-5 flex-shrink-0" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14.828 14.828a4 4 0 01-5.656 0M9 10h.01M15 10h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
              {#if !sidebarCollapsed}
                <span>Class Dojo</span>
              {:else}
                <span class="absolute left-full ml-2 px-2 py-1 bg-card border border-border rounded-lg text-sm text-text-hover opacity-0 group-hover:opacity-100 transition-opacity whitespace-nowrap z-10 shadow-dropdown">Class Dojo</span>
              {/if}
            </a>
            
            <a
              href="/lesson-planner"
              class="menu-item relative group"
              class:px-3={!sidebarCollapsed}
              class:px-1={sidebarCollapsed}
              class:justify-center={sidebarCollapsed}
              title="Lesson Planner"
            >
              <svg class="w-5 h-5 flex-shrink-0" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
              </svg>
              {#if !sidebarCollapsed}
                <span>Lesson Planner</span>
              {:else}
                <span class="absolute left-full ml-2 px-2 py-1 bg-card border border-border rounded-lg text-sm text-text-hover opacity-0 group-hover:opacity-100 transition-opacity whitespace-nowrap z-10 shadow-dropdown">Lesson Planner</span>
              {/if}
            </a>
          </div>
        </div>

        {#if $isAuthenticated}
          <div>
            {#if !sidebarCollapsed}
              <h3 class="text-gray-400 uppercase text-xs font-semibold mb-3 px-3">Classes</h3>
            {/if}
            <div class="space-y-1">
              {#each $gradebookStore.getCategories as category (category.id)}
                <button
                  onclick={() => handleSelectClass(category.id)}
                  class="w-full menu-item text-left relative group"
                  title={category.name}
                >
                  {#if !sidebarCollapsed}
                    <span>{category.name}</span>
                    <span class="bg-purple text-white text-xs rounded-full px-2 py-1"
                      >{category.studentIds.length}</span
                    >
                  {:else}
                    <span class="text-xs">{category.name.slice(0, 2).toUpperCase()}</span>
                    <span class="absolute left-full ml-2 px-2 py-1 bg-card border border-border rounded-lg text-sm text-text-hover opacity-0 group-hover:opacity-100 transition-opacity whitespace-nowrap z-10 shadow-dropdown">
                      {category.name} ({category.studentIds.length} students)
                    </span>
                  {/if}
                </button>
              {:else}
                {#if !sidebarCollapsed}
                  <p class="text-gray-400 text-sm px-3">No classes added yet</p>
                {/if}
              {/each}

              {#if !sidebarCollapsed}
                <div class="mt-3 pt-3 separator">
                  <div class="flex items-center px-3 gap-2">
                    <input
                      type="text"
                      bind:value={newClassName}
                      placeholder="New class name"
                      class="w-full bg-bg-base text-text-hover border border-border rounded-lg p-2 text-sm focus:ring-2 focus:ring-accent-hover focus:border-accent-hover transition-all duration-200 placeholder:text-muted"
                    />
                    <button
                      onclick={handleAddClass}
                      class="bg-purple text-white p-2 rounded-lg text-sm hover:bg-purple-hover transition-all duration-300"
                      aria-label="Add new class"
                    >
                      +
                    </button>
                  </div>
                </div>
              {/if}
            </div>
          </div>
        {/if}
      </div>
    </aside>

    <!-- Main content area -->
    <main class="flex-grow p-6 overflow-y-auto relative z-0">
      {#if $navigating}
        <div class="absolute inset-0 bg-bg-base/80 backdrop-blur-sm flex items-center justify-center z-50">
          <LoadingBounce />
        </div>
      {/if}
      {@render children?.()}
    </main>
  </div>

  <footer
    class="bg-card/80 backdrop-blur-sm text-center text-muted text-xs py-4 border-t border-border/50 px-6"
  >
    Teacher Dashboard • {new Date().getFullYear()}
  </footer>
</div>
</file>

<file path="src/routes/+layout.ts">
import { authStore } from '$lib/stores/auth';
import { initializeDB } from '$lib/supabaseClient';

// Initialize Supabase client and auth store with minimal approach
if (typeof window !== 'undefined') {
  // Initialize Supabase client
  initializeDB();
  
  // Initialize auth store to check existing session only
  authStore.initialize();
}

// Set prerender to false to allow auth state to be determined at runtime
export const prerender = false;
</file>

<file path="src/routes/+page.svelte">
<script lang="ts">
  import { onMount } from 'svelte';
  import { goto } from '$app/navigation';

  // Redirect to dashboard on page load
  onMount(() => {
    goto('/dashboard');
  });
</script>

<div class="flex items-center justify-center h-screen">
  <div class="text-center">
    <h1 class="text-2xl font-bold text-white mb-4">Teacher Dashboard</h1>
    <p class="text-dark-muted mb-6">Redirecting to dashboard...</p>
    <div
      class="w-12 h-12 border-4 border-dark-purple border-t-dark-highlight rounded-full animate-spin mx-auto"
    ></div>
    <a href="/dashboard" class="text-dark-lavender hover:text-dark-highlight mt-6 inline-block"
      >Click here if you are not redirected</a
    >
  </div>
</div>
</file>

<file path="src/routes/auth/login/+page.svelte">
<script lang="ts">
  import LoginForm from '$lib/components/auth/LoginForm.svelte';
  import { goto } from '$app/navigation';
  import { authStore } from '$lib/stores/auth';
  import { page } from '$app/stores';
  
  // Redirect if already authenticated
  $effect(() => {
    if ($authStore.isAuthenticated) {
      const role = $authStore.role;
      const redirectTo = role === 'student' ? '/student/dashboard' : '/dashboard';
      goto(redirectTo);
    }
  });

  // Handle auth errors from the redirect
  $effect(() => {
    if ($page.url) {
      const error = $page.url.searchParams.get('error');
      const error_description = $page.url.searchParams.get('error_description');
      if (error) {
        console.error('Auth error:', error, error_description);
      }
    }
  });
</script>

<div class="min-h-screen bg-dark-bg flex items-center justify-center p-6">
  <div class="w-full max-w-md">
    <div class="text-center mb-8">
      <h1 class="text-3xl font-bold text-white">Teacher Dashboard</h1>
      <p class="text-gray-400 mt-2">Sign in to continue</p>
    </div>
    
    <LoginForm />
    
    <div class="text-center mt-6">
      <p class="text-gray-400">
        Don't have an account? 
        <a href="/auth/signup" class="text-dark-highlight hover:underline font-medium">
          Sign up
        </a>
      </p>
      <p class="text-gray-400 mt-2">
        <a href="/auth/reset-password" class="text-dark-highlight hover:underline">
          Forgot password?
        </a>
      </p>
    </div>

    <!-- Development mode warning -->
    {#if import.meta.env.DEV}
      <div class="mt-8 p-4 bg-yellow-900/20 border border-yellow-900/50 rounded-lg">
        <p class="text-yellow-400 text-sm">
          <strong>Development Mode:</strong> If Supabase is not configured, you can use the app in offline mode. 
          Go to <a href="/settings" class="underline">Settings</a> to toggle data storage mode.
        </p>
      </div>
    {/if}
  </div>
</div>
</file>

<file path="src/routes/auth/reset-password/+page.svelte">
<script lang="ts">
  import ResetPasswordForm from '$lib/components/auth/ResetPasswordForm.svelte';
  import { goto } from '$app/navigation';
  import { isAuthenticated } from '$lib/stores/auth';
  
  // Redirect if already authenticated
  $effect(() => {
    if ($isAuthenticated) {
      goto('/dashboard');
    }
  });
</script>

<div class="min-h-screen bg-dark-bg flex items-center justify-center p-6">
  <div class="w-full max-w-md">
    <div class="text-center mb-8">
      <h1 class="text-3xl font-bold text-white">Reset Password</h1>
      <p class="text-gray-400 mt-2">Enter your email to receive a reset link</p>
    </div>
    
    <ResetPasswordForm />
    
    <div class="text-center mt-6">
      <p class="text-gray-400">
        Remember your password? 
        <a href="/auth/login" class="text-dark-highlight hover:underline font-medium">
          Sign in
        </a>
      </p>
    </div>
  </div>
</div>
</file>

<file path="src/routes/auth/signup/+page.svelte">
<script lang="ts">
  import RoleSignupForm from '$lib/components/auth/RoleSignupForm.svelte';
  import { goto } from '$app/navigation';
  import { authStore } from '$lib/stores/auth';
  import { page } from '$app/stores';
  
  // Redirect if already authenticated
  $effect(() => {
    if ($authStore.isAuthenticated && $page.url) {
      const role = $authStore.role;
      const redirectTo = role === 'student' ? '/student/dashboard' : '/dashboard';
      goto(redirectTo);
    }
  });
</script>

<div class="min-h-screen bg-dark-bg flex items-center justify-center p-6">
  <div class="w-full max-w-md">
    <div class="text-center mb-8">
      <h1 class="text-3xl font-bold text-white">Teacher Dashboard</h1>
      <p class="text-gray-400 mt-2">Create your account</p>
    </div>
    
    <RoleSignupForm />
    
    <div class="text-center mt-6">
      <p class="text-gray-400">
        Already have an account? 
        <a href="/auth/login" class="text-dark-highlight hover:underline font-medium">
          Sign in
        </a>
      </p>
    </div>
  </div>
</div>
</file>

<file path="src/routes/chat/+page.svelte">
<script lang="ts">
  import { onMount } from 'svelte';
  import { authStore } from '$lib/stores/auth';
  
  // Chat state
  let conversations = $state([
    { id: '1', name: 'Emily Johnson', unread: 2, lastMessage: 'When is the science project due?', time: '10:45 AM', avatar: 'EJ', online: true },
    { id: '2', name: 'Michael Smith', unread: 0, lastMessage: 'I submitted my math homework', time: '9:30 AM', avatar: 'MS', online: false },
    { id: '3', name: 'Sarah Williams', unread: 1, lastMessage: 'Can we review the test questions?', time: 'Yesterday', avatar: 'SW', online: true },
    { id: '4', name: 'Math 101 Class', unread: 5, lastMessage: 'David: I have a question about problem #3', time: 'Yesterday', avatar: 'M1', isGroup: true, members: 24 },
    { id: '5', name: 'Science Team', unread: 0, lastMessage: 'You: Let\'s meet after school tomorrow', time: 'Monday', avatar: 'ST', isGroup: true, members: 8 },
    { id: '6', name: 'James Wilson', unread: 0, lastMessage: 'Thanks for the feedback!', time: 'Monday', avatar: 'JW', online: false },
    { id: '7', name: 'Parent Conference', unread: 0, lastMessage: 'You: Looking forward to meeting everyone', time: 'Last week', avatar: 'PC', isGroup: true, members: 15 }
  ]);
  
  let activeConversation = $derived(conversations.find(c => c.id === '1') || conversations[0]);
  
  let messages = $state([
    { id: '1', sender: 'other', text: 'Good morning! I had a question about the science project.', time: '10:30 AM' },
    { id: '2', sender: 'me', text: 'Good morning, Emily! What would you like to know?', time: '10:32 AM' },
    { id: '3', sender: 'other', text: 'When is the final due date? I\'m a bit confused because the syllabus says next Friday but you mentioned next Monday in class.', time: '10:35 AM' },
    { id: '4', sender: 'me', text: 'The correct due date is next Monday. I\'ll update the syllabus to reflect that. Thanks for bringing this to my attention!', time: '10:38 AM' },
    { id: '5', sender: 'other', text: 'Great, thank you! One more question - do we need to include a bibliography for the research portion?', time: '10:40 AM' },
    { id: '6', sender: 'me', text: 'Yes, please include a bibliography with at least 3 sources. They should be properly formatted in MLA style.', time: '10:42 AM' },
    { id: '7', sender: 'other', text: 'When is the science project due?', time: '10:45 AM' }
  ]);
  
  let newMessage = $state('');
  let searchQuery = $state('');
  let showEmojiPicker = $state(false);
  let showAttachMenu = $state(false);
  let messagesContainer;
  
  // Filtered conversations
  let filteredConversations = $derived(
    searchQuery 
      ? conversations.filter(c => c.name.toLowerCase().includes(searchQuery.toLowerCase()))
      : conversations
  );
  
  onMount(() => {
    scrollToBottom();
  });
  
  $effect(() => {
    // Scroll to bottom when messages change
    scrollToBottom();
  });
  
  function scrollToBottom() {
    if (messagesContainer) {
      setTimeout(() => {
        messagesContainer.scrollTop = messagesContainer.scrollHeight;
      }, 0);
    }
  }
  
  function sendMessage() {
    if (!newMessage.trim()) return;
    
    const message = {
      id: (messages.length + 1).toString(),
      sender: 'me',
      text: newMessage.trim(),
      time: new Date().toLocaleString('en-US', { hour: 'numeric', minute: 'numeric', hour12: true })
    };
    
    messages = [...messages, message];
    newMessage = '';
    
    // Update last message in conversation list
    conversations = conversations.map(c => 
      c.id === activeConversation.id 
        ? { ...c, lastMessage: `You: ${message.text}`, time: 'Just now', unread: 0 }
        : c
    );
    
    // Simulate reply after 2 seconds
    if (activeConversation.id === '1') {
      setTimeout(() => {
        const reply = {
          id: (messages.length + 1).toString(),
          sender: 'other',
          text: 'Thank you for the clarification! I\'ll make sure to include the bibliography.',
          time: new Date().toLocaleString('en-US', { hour: 'numeric', minute: 'numeric', hour12: true })
        };
        
        messages = [...messages, reply];
        
        // Update conversation
        conversations = conversations.map(c => 
          c.id === activeConversation.id 
            ? { ...c, lastMessage: reply.text, time: 'Just now' }
            : c
        );
      }, 2000);
    }
  }
  
  function selectConversation(conversation) {
    activeConversation = conversation;
    
    // Mark as read
    conversations = conversations.map(c => 
      c.id === conversation.id 
        ? { ...c, unread: 0 }
        : c
    );
    
    // Reset UI states
    showEmojiPicker = false;
    showAttachMenu = false;
  }
  
  function addEmoji(emoji) {
    newMessage += emoji;
    showEmojiPicker = false;
  }
  
  // Common emojis
  const emojis = ['😊', '👍', '👏', '🎉', '👨‍🏫', '📚', '✏️', '📝', '🧪', '🔍', '⭐', '❤️'];
  
  // Close dropdown menus when clicking outside
  function handleClickOutside(event) {
    if (showEmojiPicker && !event.target.closest('.emoji-picker-container')) {
      showEmojiPicker = false;
    }
    
    if (showAttachMenu && !event.target.closest('.attach-menu-container')) {
      showAttachMenu = false;
    }
  }

  // Handle keydown event for message input
  function handleKeydown(event: KeyboardEvent) {
    if (event.key === 'Enter') {
      sendMessage();
    }
  }
</script>

<svelte:window on:click={handleClickOutside} />

<div class="min-h-screen">
  <div class="container mx-auto px-4 py-8">
    <!-- Header -->
    <div class="mb-8">
      <h1 class="text-3xl font-bold text-highlight mb-2">Chat</h1>
      <p class="text-text-base">Communicate with students and classes</p>
    </div>
    
    <!-- Chat Interface -->
    <div class="card-dark p-0 overflow-hidden">
      <div class="flex h-[calc(100vh-12rem)]">
        <!-- Sidebar -->
        <div class="w-80 border-r border-border flex flex-col">
          <!-- Search -->
          <div class="p-4 border-b border-border">
            <div class="relative">
              <input 
                type="text" 
                bind:value={searchQuery}
                placeholder="Search conversations..."
                class="input w-full pl-10 py-2"
              />
              <svg class="w-5 h-5 text-muted absolute left-3 top-1/2 transform -translate-y-1/2" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <circle cx="11" cy="11" r="8"></circle>
                <line x1="21" y1="21" x2="16.65" y2="16.65"></line>
              </svg>
            </div>
          </div>
          
          <!-- Conversation List -->
          <div class="flex-1 overflow-y-auto">
            {#each filteredConversations as conversation}
              <button 
                class={`w-full text-left p-4 border-b border-border/50 hover:bg-surface/50 transition-colors flex items-center gap-3 ${activeConversation.id === conversation.id ? 'bg-purple-bg' : ''}`}
                onclick={() => selectConversation(conversation)}
                aria-label={`Chat with ${conversation.name}`}
              >
                <div class="relative">
                  <div class="w-10 h-10 rounded-full bg-purple-bg text-purple flex items-center justify-center font-medium">
                    {conversation.avatar}
                  </div>
                  {#if conversation.online}
                    <div class="absolute bottom-0 right-0 w-3 h-3 bg-green-500 rounded-full border-2 border-card"></div>
                  {/if}
                </div>
                
                <div class="flex-1 min-w-0">
                  <div class="flex justify-between items-center mb-1">
                    <div class="font-medium text-highlight truncate">
                      {conversation.name}
                      {#if conversation.isGroup}
                        <span class="text-xs text-text-base ml-1">({conversation.members})</span>
                      {/if}
                    </div>
                    <div class="text-xs text-text-base">{conversation.time}</div>
                  </div>
                  <div class="flex justify-between items-center">
                    <div class="text-sm text-text-base truncate">{conversation.lastMessage}</div>
                    {#if conversation.unread > 0}
                      <div class="bg-purple text-white text-xs rounded-full w-5 h-5 flex items-center justify-center">
                        {conversation.unread}
                      </div>
                    {/if}
                  </div>
                </div>
              </button>
            {/each}
            
            {#if filteredConversations.length === 0}
              <div class="p-4 text-center text-text-base">
                No conversations found
              </div>
            {/if}
          </div>
          
          <!-- New Chat Button -->
          <div class="p-4 border-t border-border">
            <button class="btn btn-primary w-full" aria-label="Start new chat">
              <svg class="w-5 h-5 mr-2" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M21 11.5a8.38 8.38 0 0 1-.9 3.8 8.5 8.5 0 0 1-7.6 4.7 8.38 8.38 0 0 1-3.8-.9L3 21l1.9-5.7a8.38 8.38 0 0 1-.9-3.8 8.5 8.5 0 0 1 4.7-7.6 8.38 8.38 0 0 1 3.8-.9h.5a8.48 8.48 0 0 1 8 8v.5z"></path>
                <line x1="12" y1="11" x2="12" y2="17"></line>
                <line x1="9" y1="14" x2="15" y2="14"></line>
              </svg>
              New Chat
            </button>
          </div>
        </div>
        
        <!-- Chat Area -->
        <div class="flex-1 flex flex-col">
          <!-- Chat Header -->
          <div class="p-4 border-b border-border flex justify-between items-center">
            <div class="flex items-center gap-3">
              <div class="relative">
                <div class="w-10 h-10 rounded-full bg-purple-bg text-purple flex items-center justify-center font-medium">
                  {activeConversation.avatar}
                </div>
                {#if activeConversation.online}
                  <div class="absolute bottom-0 right-0 w-3 h-3 bg-green-500 rounded-full border-2 border-card"></div>
                {/if}
              </div>
              
              <div>
                <div class="font-medium text-highlight">
                  {activeConversation.name}
                  {#if activeConversation.isGroup}
                    <span class="text-xs text-text-base ml-1">({activeConversation.members} members)</span>
                  {/if}
                </div>
                {#if activeConversation.online && !activeConversation.isGroup}
                  <div class="text-xs text-green-500">Online</div>
                {/if}
              </div>
            </div>
            
            <div class="flex gap-2">
              <button class="p-2 text-text-base hover:text-text-hover rounded-full hover:bg-surface transition-colors" aria-label="Start voice call">
                <svg class="w-5 h-5" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <path d="M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"></path>
                </svg>
              </button>
              <button class="p-2 text-text-base hover:text-text-hover rounded-full hover:bg-surface transition-colors" aria-label="Start video call">
                <svg class="w-5 h-5" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <polygon points="23 7 16 12 23 17 23 7"></polygon>
                  <rect x="1" y="5" width="15" height="14" rx="2" ry="2"></rect>
                </svg>
              </button>
              <button class="p-2 text-text-base hover:text-text-hover rounded-full hover:bg-surface transition-colors" aria-label="View chat information">
                <svg class="w-5 h-5" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <circle cx="12" cy="12" r="10"></circle>
                  <line x1="12" y1="16" x2="12" y2="12"></line>
                  <line x1="12" y1="8" x2="12.01" y2="8"></line>
                </svg>
              </button>
            </div>
          </div>
          
          <!-- Messages -->
          <div class="flex-1 overflow-y-auto p-4 space-y-4" bind:this={messagesContainer}>
            {#each messages as message}
              <div class={`flex ${message.sender === 'me' ? 'justify-end' : 'justify-start'}`}>
                <div class={`max-w-[70%] ${message.sender === 'me' ? 'bg-purple text-white' : 'bg-surface text-text-hover'} rounded-lg px-4 py-2 shadow-sm`}>
                  <div class="text-sm mb-1">{message.text}</div>
                  <div class="text-xs opacity-70 text-right">{message.time}</div>
                </div>
              </div>
            {/each}
          </div>
          
          <!-- Message Input -->
          <div class="p-4 border-t border-border">
            <div class="relative">
              <input 
                type="text" 
                bind:value={newMessage}
                placeholder="Type a message..."
                class="input w-full pr-24"
                onkeydown={handleKeydown}
              />
              
              <div class="absolute right-2 top-1/2 transform -translate-y-1/2 flex gap-1">
                <div class="relative emoji-picker-container">
                  <button 
                    class="p-2 text-text-base hover:text-text-hover rounded-full hover:bg-surface transition-colors"
                    onclick={() => showEmojiPicker = !showEmojiPicker}
                    aria-label="Open emoji picker"
                  >
                    <svg class="w-5 h-5" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                      <circle cx="12" cy="12" r="10"></circle>
                      <path d="M8 14s1.5 2 4 2 4-2 4-2"></path>
                      <line x1="9" y1="9" x2="9.01" y2="9"></line>
                      <line x1="15" y1="9" x2="15.01" y2="9"></line>
                    </svg>
                  </button>
                  
                  {#if showEmojiPicker}
                    <div class="absolute bottom-10 right-0 bg-card border border-border rounded-lg p-2 shadow-dropdown z-10">
                      <div class="grid grid-cols-6 gap-1">
                        {#each emojis as emoji}
                          <button 
                            class="w-8 h-8 text-lg hover:bg-surface rounded"
                            onclick={() => addEmoji(emoji)}
                            aria-label={`Add emoji ${emoji}`}
                          >
                            {emoji}
                          </button>
                        {/each}
                      </div>
                    </div>
                  {/if}
                </div>
                
                <div class="relative attach-menu-container">
                  <button 
                    class="p-2 text-text-base hover:text-text-hover rounded-full hover:bg-surface transition-colors"
                    onclick={() => showAttachMenu = !showAttachMenu}
                    aria-label="Open attachment menu"
                  >
                    <svg class="w-5 h-5" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                      <path d="M21.44 11.05l-9.19 9.19a6 6 0 0 1-8.49-8.49l9.19-9.19a4 4 0 0 1 5.66 5.66l-9.2 9.19a2 2 0 0 1-2.83-2.83l8.49-8.48"></path>
                    </svg>
                  </button>
                  
                  {#if showAttachMenu}
                    <div class="absolute bottom-10 right-0 bg-card border border-border rounded-lg shadow-dropdown z-10">
                      <div class="py-1">
                        <button class="flex items-center gap-2 px-4 py-2 hover:bg-surface w-full text-left" aria-label="Attach image">
                          <svg class="w-5 h-5 text-purple" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                            <rect x="3" y="3" width="18" height="18" rx="2" ry="2"></rect>
                            <circle cx="8.5" cy="8.5" r="1.5"></circle>
                            <polyline points="21 15 16 10 5 21"></polyline>
                          </svg>
                          <span class="text-text-hover">Image</span>
                        </button>
                        <button class="flex items-center gap-2 px-4 py-2 hover:bg-surface w-full text-left" aria-label="Attach document">
                          <svg class="w-5 h-5 text-purple" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                            <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"></path>
                            <polyline points="14 2 14 8 20 8"></polyline>
                          </svg>
                          <span class="text-text-hover">Document</span>
                        </button>
                        <button class="flex items-center gap-2 px-4 py-2 hover:bg-surface w-full text-left" aria-label="Attach video">
                          <svg class="w-5 h-5 text-purple" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                            <polygon points="23 7 16 12 23 17 23 7"></polygon>
                            <rect x="1" y="5" width="15" height="14" rx="2" ry="2"></rect>
                          </svg>
                          <span class="text-text-hover">Video</span>
                        </button>
                      </div>
                    </div>
                  {/if}
                </div>
                
                <button 
                  class="p-2 text-text-base hover:text-purple rounded-full hover:bg-surface transition-colors"
                  onclick={sendMessage}
                  disabled={!newMessage.trim()}
                  aria-label="Send message"
                >
                  <svg class="w-5 h-5" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <line x1="22" y1="2" x2="11" y2="13"></line>
                    <polygon points="22 2 15 22 11 13 2 9 22 2"></polygon>
                  </svg>
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>
</file>

<file path="src/routes/class-dojo-remake/+page.svelte">
<script lang="ts">
  // Behavior logic can be added here
</script>

<section class="space-y-6">
  <h1 class="text-2xl font-bold text-primary-600 dark:text-primary-400">Class Dojo Remake</h1>

  <div class="bg-white dark:bg-dark-surface rounded-lg shadow p-6">
    <p class="text-gray-700 dark:text-gray-300">
      Use this tool to manage student behavior, award points, and track engagement in your class.
    </p>

    <!-- Placeholder behavior point tracker -->
    <div class="mt-6 space-y-4">
      <div
        class="flex justify-between items-center border-b border-gray-200 dark:border-gray-700 pb-2"
      >
        <span class="font-medium">John Doe</span>
        <span class="text-green-600 dark:text-green-400 font-semibold">+3</span>
      </div>
      <div
        class="flex justify-between items-center border-b border-gray-200 dark:border-gray-700 pb-2"
      >
        <span class="font-medium">Jane Smith</span>
        <span class="text-green-600 dark:text-green-400 font-semibold">+5</span>
      </div>
    </div>
  </div>
</section>
</file>

<file path="src/routes/classes/+page.svelte">
<script lang="ts">
  import { gradebookStore } from '$lib/stores/gradebook';
  import ClassList from '$lib/components/ClassList.svelte';
  import StudentRoster from '$lib/components/StudentRoster.svelte';
  import ImportWizard from '$lib/components/ImportWizard.svelte';
  import { onMount } from 'svelte';
  import { page } from '$app/stores';
  import { goto } from '$app/navigation';
  import { isAuthenticated } from '$lib/stores/auth';
  
  // State variables with $state
  let showImportWizard = $state(false);
  let selectedClassId = $state(null);
  let isLoading = $state(true);
  let error = $state(null);
  
  // Reactive values with $derived
  let selectedClass = $derived(
    selectedClassId ? $gradebookStore.categories.find((c) => c.id === selectedClassId) : null
  );
  
  $effect(() => {
    const initializeData = async () => {
      try {
        await gradebookStore.ensureDataLoaded();
        isLoading = false;
      } catch (e) {
        error = e instanceof Error ? e.message : 'An error occurred';
        isLoading = false;
      }
    };
    
    initializeData();
  });
  
  function handleClassSelect(classId: string | null) {
    selectedClassId = classId;
  }
  
  function handleImportComplete() {
    showImportWizard = false;
  }
  
  function handleLogin() {
    goto('/auth/login?redirect=/classes');
  }
</script>

<div class="container mx-auto px-4 py-8">
  {#if isLoading}
    <div class="flex justify-center items-center h-64">
      <div class="text-gray-400">Loading classes...</div>
    </div>
  {:else if !$isAuthenticated}
    <div class="flex justify-center items-center flex-col h-64">
      <div class="bg-gray-800 border border-gray-700 rounded-lg p-8 max-w-md text-center">
        <h2 class="text-xl font-bold text-gray-100 mb-4">Authentication Required</h2>
        <p class="text-gray-400 mb-6">
          You need to be logged in to access classes. Row Level Security (RLS) policies 
          require authentication to view and create classes.
        </p>
        <button
          onclick={handleLogin}
          class="px-4 py-2 bg-dark-purple text-white rounded-lg hover:bg-dark-purple-hover transition-all duration-200"
        >
          Sign In
        </button>
      </div>
    </div>
  {:else if error}
    <div class="flex justify-center items-center h-64 flex-col">
      <div class="bg-gray-800 border border-red-800 rounded-lg p-8 max-w-lg">
        <h2 class="text-xl font-bold text-red-400 mb-4">Error Loading Classes</h2>
        <p class="text-gray-300 mb-6">{error}</p>
        <div class="flex justify-end">
          <button
            onclick={() => location.reload()}
            class="px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-all duration-200"
          >
            Retry
          </button>
        </div>
      </div>
    </div>
  {:else}
    <div class="flex justify-between items-center mb-8">
      <h1 class="text-3xl font-bold text-gray-100">Classes</h1>
      {#if $isAuthenticated}
        <button
          onclick={() => showImportWizard = true}
          class="px-4 py-2 bg-dark-purple text-white rounded-lg hover:bg-dark-purple-hover transition-all duration-200"
        >
          Import New Class
        </button>
      {:else}
        <button
          onclick={handleLogin}
          class="px-4 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700 transition-all duration-200"
        >
          Sign In to Create Classes
        </button>
      {/if}
    </div>
    
    <div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
      <div class="lg:col-span-1">
        {#if $gradebookStore.categories.length > 0}
          <ClassList 
            classes={$gradebookStore.categories}
            selectedClassId={selectedClassId}
            onSelectClass={handleClassSelect}
          />
        {:else}
          <div class="bg-gray-800 border border-gray-700 rounded-lg p-6">
            <p class="text-gray-400 text-center">No classes found</p>
            {#if $isAuthenticated}
              <p class="text-gray-500 text-center mt-2 text-sm">
                Use the "Import New Class" button to create your first class
              </p>
            {:else}
              <p class="text-gray-500 text-center mt-2 text-sm">
                Sign in to create and manage classes
              </p>
            {/if}
          </div>
        {/if}
      </div>
      
      <div class="lg:col-span-2">
        {#if selectedClass}
          <StudentRoster selectedClass={selectedClass} />
        {:else}
          <div class="bg-gray-800 border border-gray-700 rounded-lg p-8 text-center">
            <p class="text-gray-400">Select a class to view its students</p>
          </div>
        {/if}
      </div>
    </div>
  {/if}
  
  {#if showImportWizard}
    <ImportWizard 
      onClose={() => showImportWizard = false}
      onComplete={handleImportComplete}
    />
  {/if}
</div>
</file>

<file path="src/routes/dashboard/+page.svelte">
<script lang="ts">
  import { onMount } from 'svelte';
  import { authStore } from '$lib/stores/auth';
  import { filesActions, fileStats } from '$lib/stores/files';
  

  // Current date
  const today = new Date();
  const formattedDate = today.toLocaleDateString('en-US', {
    weekday: 'long',
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  });
  
  // Dashboard stats
  let totalStudents = $state(25);
  let totalClasses = $state(4);
  let totalLessons = $state(32);
  
  // File stats from store
  let fileStatsData = $derived($fileStats);
  
  let recentUploads = $state([
    { name: 'Lesson Plan - Week 12.pdf', size: '1.2 MB', date: '2 hours ago' },
    { name: 'Math Quiz - Fractions.docx', size: '450 KB', date: '5 hours ago' },
    { name: 'Science Project Guidelines.pdf', size: '2.8 MB', date: 'Yesterday' },
    { name: 'Student Progress Report.xlsx', size: '1.5 MB', date: 'Yesterday' }
  ]);
  
  let recentMessages = $state([
    { from: 'Emily Johnson', message: 'When is the science project due?', time: '10:45 AM' },
    { from: 'Michael Smith', message: 'I submitted my math homework', time: '9:30 AM' },
    { from: 'Sarah Williams', message: 'Can we review the test questions?', time: 'Yesterday' }
  ]);
  
  let upcomingLessons = $state([
    { title: 'Algebra Fundamentals', class: 'Math 101', time: 'Today, 2:00 PM' },
    { title: 'Cell Structure & Function', class: 'Biology', time: 'Tomorrow, 10:30 AM' },
    { title: 'Essay Writing Workshop', class: 'English', time: 'Wed, 1:15 PM' }
  ]);
  
  // Chart data
  let chartLoaded = $state(false);
  
  onMount(async () => {
    // Load file data
    await filesActions.ensureDataLoaded();
    
    // Simulate chart loading
    setTimeout(() => {
      chartLoaded = true;
    }, 500);
  });
</script>

<div class="min-h-screen">
  <div class="container mx-auto px-4 py-8">
    <!-- Header -->
    <div class="mb-8">
      <div class="flex items-center gap-3">
        <div class="text-purple">
          <svg class="w-10 h-10" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <path d="M12 2L2 7l10 5 10-5-10-5zM2 17l10 5 10-5M2 12l10 5 10-5"></path>
          </svg>
        </div>
        <div>
          <h1 class="text-3xl font-bold text-highlight">Dashboard</h1>
          <p class="text-text-base">Today, {formattedDate}</p>
        </div>
      </div>
    </div>
    
    <!-- Stats Row -->
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-6">
      <!-- Students -->
      <div class="card-dark">
        <div class="flex items-center gap-3 mb-2">
          <div class="w-10 h-10 rounded-lg bg-purple-bg flex items-center justify-center text-purple">
            <svg class="w-5 h-5" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M17 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"></path>
              <circle cx="9" cy="7" r="4"></circle>
              <path d="M23 21v-2a4 4 0 0 0-3-3.87"></path>
              <path d="M16 3.13a4 4 0 0 1 0 7.75"></path>
            </svg>
          </div>
          <span class="text-text-base">Students</span>
        </div>
        
        <div class="text-3xl font-bold text-highlight">{totalStudents}</div>
      </div>
      
      <!-- Classes -->
      <div class="card-dark">
        <div class="flex items-center gap-3 mb-2">
          <div class="w-10 h-10 rounded-lg bg-purple-bg flex items-center justify-center text-purple">
            <svg class="w-5 h-5" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M4 19.5A2.5 2.5 0 0 1 6.5 17H20"></path>
              <path d="M6.5 2H20v20H6.5A2.5 2.5 0 0 1 4 19.5v-15A2.5 2.5 0 0 1 6.5 2z"></path>
            </svg>
          </div>
          <span class="text-text-base">Classes</span>
        </div>
        
        <div class="text-3xl font-bold text-highlight">{totalClasses}</div>
      </div>
      
      <!-- Lessons -->
      <div class="card-dark">
        <div class="flex items-center gap-3 mb-2">
          <div class="w-10 h-10 rounded-lg bg-purple-bg flex items-center justify-center text-purple">
            <svg class="w-5 h-5" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M12 8v4l3 3m6-3a9 9 0 1 1-18 0 9 9 0 0 1 18 0z"></path>
            </svg>
          </div>
          <span class="text-text-base">Lessons</span>
        </div>
        
        <div class="text-3xl font-bold text-highlight">{totalLessons}</div>
      </div>
      
      <!-- Files -->
      <div class="card-dark">
        <div class="flex items-center gap-3 mb-2">
          <div class="w-10 h-10 rounded-lg bg-purple-bg flex items-center justify-center text-purple">
            <svg class="w-5 h-5" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"></path>
              <polyline points="14 2 14 8 20 8"></polyline>
              <line x1="16" y1="13" x2="8" y2="13"></line>
              <line x1="16" y1="17" x2="8" y2="17"></line>
              <polyline points="10 9 9 9 8 9"></polyline>
            </svg>
          </div>
          <span class="text-text-base">Files</span>
        </div>
        
        <div class="text-3xl font-bold text-highlight">{fileStatsData?.totalFiles ?? 0}</div>
      </div>
    </div>
    
    <!-- Main Content -->
    <div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
      <!-- Recent Files -->
      <div class="card-dark lg:col-span-2">
        <h2 class="text-xl font-bold text-highlight mb-4">Recent Files</h2>
        
        <div class="overflow-x-auto">
          <table class="w-full">
            <thead class="text-left border-b border-border">
              <tr>
                <th class="pb-3 text-text-base font-medium">Name</th>
                <th class="pb-3 text-text-base font-medium">Size</th>
                <th class="pb-3 text-text-base font-medium">Uploaded</th>
                <th class="pb-3 text-text-base font-medium"></th>
              </tr>
            </thead>
            <tbody>
              {#each recentUploads as file}
                <tr class="border-b border-border/50 hover:bg-surface/50 transition-colors">
                  <td class="py-3 text-highlight">
                    <div class="flex items-center gap-2">
                      <svg class="w-5 h-5 text-purple" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"></path>
                        <polyline points="14 2 14 8 20 8"></polyline>
                      </svg>
                      {file.name}
                    </div>
                  </td>
                  <td class="py-3 text-text-base">{file.size}</td>
                  <td class="py-3 text-text-base">{file.date}</td>
                  <td class="py-3 text-right">
                    <button class="text-purple hover:text-purple-hover transition-colors">
                      <svg class="w-5 h-5" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"></path>
                        <polyline points="7 10 12 15 17 10"></polyline>
                        <line x1="12" y1="15" x2="12" y2="3"></line>
                      </svg>
                    </button>
                  </td>
                </tr>
              {/each}
            </tbody>
          </table>
        </div>
        
        <div class="mt-4 flex justify-end">
          <button class="text-purple hover:text-purple-hover transition-colors text-sm flex items-center gap-1">
            View all files
            <svg class="w-4 h-4" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <polyline points="9 18 15 12 9 6"></polyline>
            </svg>
          </button>
        </div>
      </div>
      
      <!-- Upcoming Lessons -->
      <div class="card-dark">
        <h2 class="text-xl font-bold text-highlight mb-4">Upcoming Lessons</h2>
        
        <div class="space-y-4">
          {#each upcomingLessons as lesson}
            <div class="p-3 bg-surface/50 rounded-lg">
              <div class="font-medium text-highlight">{lesson.title}</div>
              <div class="flex justify-between mt-1">
                <span class="text-sm text-purple">{lesson.class}</span>
                <span class="text-sm text-text-base">{lesson.time}</span>
              </div>
            </div>
          {/each}
        </div>
        
        <div class="mt-4 flex justify-center">
          <button class="btn btn-primary">
            <svg class="w-4 h-4 mr-2" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M12 5v14M5 12h14"></path>
            </svg>
            Add New Lesson
          </button>
        </div>
      </div>
    </div>
    
    <!-- Bottom Row -->
    <div class="grid grid-cols-1 lg:grid-cols-3 gap-6 mt-6">
      <!-- Recent Messages -->
      <div class="card-dark lg:col-span-2">
        <h2 class="text-xl font-bold text-highlight mb-4">Recent Messages</h2>
        
        <div class="space-y-4">
          {#each recentMessages as message}
            <div class="p-4 bg-surface/50 rounded-lg">
              <div class="flex justify-between mb-2">
                <span class="font-medium text-highlight">{message.from}</span>
                <span class="text-sm text-text-base">{message.time}</span>
              </div>
              <p class="text-text-base">{message.message}</p>
            </div>
          {/each}
        </div>
        
        <div class="mt-4 flex justify-end">
          <button class="text-purple hover:text-purple-hover transition-colors text-sm flex items-center gap-1">
            Open Chat
            <svg class="w-4 h-4" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <polyline points="9 18 15 12 9 6"></polyline>
            </svg>
          </button>
        </div>
      </div>
      
      <!-- Storage Usage -->
      <div class="card-dark">
        <h2 class="text-xl font-bold text-highlight mb-4">Storage Usage</h2>
        
        <div class="flex flex-col items-center justify-center h-[calc(100%-2rem)]">
          <div class="relative w-32 h-32 mb-4">
            <svg class="w-full h-full" viewBox="0 0 36 36">
              <path
                d="M18 2.0845 a 15.9155 15.9155 0 0 1 0 31.831 a 15.9155 15.9155 0 0 1 0 -31.831"
                fill="none"
                stroke="#374151"
                stroke-width="3"
                stroke-dasharray="100, 100"
              />
              <path
                d="M18 2.0845 a 15.9155 15.9155 0 0 1 0 31.831 a 15.9155 15.9155 0 0 1 0 -31.831"
                fill="none"
                stroke="url(#gradient-storage)"
                stroke-width="3"
                stroke-dasharray="65, 100"
                class="animate-pulse-subtle"
              />
              <defs>
                <linearGradient id="gradient-storage" x1="0%" y1="0%" x2="100%" y2="0%">
                  <stop offset="0%" stop-color="#8B5CF6" />
                  <stop offset="100%" stop-color="#A78BFA" />
                </linearGradient>
              </defs>
            </svg>
            <div class="absolute inset-0 flex items-center justify-center flex-col">
              <span class="text-2xl font-bold text-highlight">65%</span>
              <span class="text-xs text-text-base">Used</span>
            </div>
          </div>
          
          <div class="text-center">
            <p class="text-text-base mb-1">6.5 GB of 10 GB used</p>
            <button class="text-sm text-purple hover:text-purple-hover transition-colors">
              Upgrade Storage
            </button>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>
</file>

<file path="src/routes/files/+page.svelte">
<script lang="ts">
  import { onMount } from 'svelte';
  import { authStore } from '$lib/stores/auth';
  
  // File storage state
  let files = $state([
    { id: '1', name: 'Lesson Plan - Week 12.pdf', type: 'pdf', size: '1.2 MB', modified: '2025-05-10T14:30:00', folder: 'Lesson Plans' },
    { id: '2', name: 'Math Quiz - Fractions.docx', type: 'docx', size: '450 KB', modified: '2025-05-09T10:15:00', folder: 'Assessments' },
    { id: '3', name: 'Science Project Guidelines.pdf', type: 'pdf', size: '2.8 MB', modified: '2025-05-08T16:45:00', folder: 'Projects' },
    { id: '4', name: 'Student Progress Report.xlsx', type: 'xlsx', size: '1.5 MB', modified: '2025-05-08T09:20:00', folder: 'Reports' },
    { id: '5', name: 'Reading Comprehension Worksheet.pdf', type: 'pdf', size: '890 KB', modified: '2025-05-07T13:10:00', folder: 'Worksheets' },
    { id: '6', name: 'Classroom Rules Poster.png', type: 'image', size: '3.2 MB', modified: '2025-05-06T11:30:00', folder: 'Resources' },
    { id: '7', name: 'Parent Conference Notes.docx', type: 'docx', size: '320 KB', modified: '2025-05-05T15:45:00', folder: 'Meetings' },
    { id: '8', name: 'Geometry Lesson Slides.pptx', type: 'pptx', size: '4.5 MB', modified: '2025-05-04T10:00:00', folder: 'Presentations' }
  ]);
  
  let folders = $state([
    { id: '1', name: 'Lesson Plans', files: 12, size: '24.5 MB' },
    { id: '2', name: 'Assessments', files: 8, size: '12.3 MB' },
    { id: '3', name: 'Projects', files: 5, size: '18.7 MB' },
    { id: '4', name: 'Reports', files: 10, size: '15.2 MB' },
    { id: '5', name: 'Worksheets', files: 15, size: '22.8 MB' },
    { id: '6', name: 'Resources', files: 7, size: '35.6 MB' },
    { id: '7', name: 'Meetings', files: 4, size: '8.2 MB' },
    { id: '8', name: 'Presentations', files: 6, size: '28.4 MB' }
  ]);
  
  // UI state
  let currentView = $state('grid'); // 'grid' or 'list'
  let searchQuery = $state('');
  let selectedFolder = $state('All Files');
  let sortBy = $state('name'); // 'name', 'modified', 'size'
  let sortDirection = $state('asc'); // 'asc' or 'desc'
  let isUploading = $state(false);
  let uploadProgress = $state(0);
  let showNewFolderModal = $state(false);
  let newFolderName = $state('');
  
  // Filtered and sorted files
  let filteredFiles = $derived(getFilteredFiles());
  
  function getFilteredFiles() {
    let result = [...files];
    
    // Filter by folder
    if (selectedFolder !== 'All Files') {
      result = result.filter(file => file.folder === selectedFolder);
    }
    
    // Filter by search query
    if (searchQuery) {
      const query = searchQuery.toLowerCase();
      result = result.filter(file => 
        file.name.toLowerCase().includes(query) || 
        file.type.toLowerCase().includes(query)
      );
    }
    
    // Sort files
    result.sort((a, b) => {
      let comparison = 0;
      
      if (sortBy === 'name') {
        comparison = a.name.localeCompare(b.name);
      } else if (sortBy === 'modified') {
        comparison = new Date(b.modified).getTime() - new Date(a.modified).getTime();
      } else if (sortBy === 'size') {
        // Convert size strings to comparable numbers (rough approximation)
        const sizeA = parseFileSize(a.size);
        const sizeB = parseFileSize(b.size);
        comparison = sizeA - sizeB;
      }
      
      return sortDirection === 'asc' ? comparison : -comparison;
    });
    
    return result;
  }
  
  function parseFileSize(sizeStr: string): number {
    const value = parseFloat(sizeStr);
    if (sizeStr.includes('KB')) return value * 1024;
    if (sizeStr.includes('MB')) return value * 1024 * 1024;
    if (sizeStr.includes('GB')) return value * 1024 * 1024 * 1024;
    return value;
  }
  
  function toggleSort(column: string) {
    if (sortBy === column) {
      sortDirection = sortDirection === 'asc' ? 'desc' : 'asc';
    } else {
      sortBy = column;
      sortDirection = 'asc';
    }
  }
  
  function getFileIcon(fileType: string) {
    switch (fileType) {
      case 'pdf':
        return `<svg class="w-8 h-8 text-red-500" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"></path>
                  <polyline points="14 2 14 8 20 8"></polyline>
                  <path d="M9 15h6"></path>
                  <path d="M9 11h6"></path>
                </svg>`;
      case 'docx':
        return `<svg class="w-8 h-8 text-blue-500" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"></path>
                  <polyline points="14 2 14 8 20 8"></polyline>
                  <line x1="16" y1="13" x2="8" y2="13"></line>
                  <line x1="16" y1="17" x2="8" y2="17"></line>
                  <polyline points="10 9 9 9 8 9"></polyline>
                </svg>`;
      case 'xlsx':
        return `<svg class="w-8 h-8 text-green-500" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"></path>
                  <polyline points="14 2 14 8 20 8"></polyline>
                  <line x1="8" y1="13" x2="16" y2="13"></line>
                  <line x1="8" y1="17" x2="16" y2="17"></line>
                  <line x1="8" y1="9" x2="10" y2="9"></line>
                </svg>`;
      case 'pptx':
        return `<svg class="w-8 h-8 text-orange-500" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"></path>
                  <polyline points="14 2 14 8 20 8"></polyline>
                  <rect x="8" y="12" width="8" height="6" rx="1"></rect>
                </svg>`;
      case 'image':
        return `<svg class="w-8 h-8 text-purple" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <rect x="3" y="3" width="18" height="18" rx="2" ry="2"></rect>
                  <circle cx="8.5" cy="8.5" r="1.5"></circle>
                  <polyline points="21 15 16 10 5 21"></polyline>
                </svg>`;
      default:
        return `<svg class="w-8 h-8 text-gray-400" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"></path>
                  <polyline points="14 2 14 8 20 8"></polyline>
                </svg>`;
    }
  }
  
  function formatDate(dateString: string) {
    const date = new Date(dateString);
    return date.toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'short',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  }
  
  function simulateUpload() {
    if (isUploading) return;
    
    isUploading = true;
    uploadProgress = 0;
    
    const interval = setInterval(() => {
      uploadProgress += 5;
      
      if (uploadProgress >= 100) {
        clearInterval(interval);
        setTimeout(() => {
          isUploading = false;
          
          // Add a new mock file
          const newFile = {
            id: (files.length + 1).toString(),
            name: 'New Uploaded File.pdf',
            type: 'pdf',
            size: '2.4 MB',
            modified: new Date().toISOString(),
            folder: selectedFolder === 'All Files' ? 'Resources' : selectedFolder
          };
          
          files = [...files, newFile];
        }, 500);
      }
    }, 100);
  }
  
  function createNewFolder() {
    if (!newFolderName.trim()) return;
    
    const newFolder = {
      id: (folders.length + 1).toString(),
      name: newFolderName.trim(),
      files: 0,
      size: '0 KB'
    };
    
    folders = [...folders, newFolder];
    newFolderName = '';
    showNewFolderModal = false;
  }
</script>

<div class="min-h-screen">
  <div class="container mx-auto px-4 py-8">
    <!-- Header -->
    <div class="mb-8">
      <h1 class="text-3xl font-bold text-highlight mb-2">File Storage</h1>
      <p class="text-text-base">Organize and manage your teaching materials</p>
    </div>
    
    <!-- Actions Bar -->
    <div class="flex flex-wrap gap-4 mb-6">
      <div class="flex-1">
        <div class="relative">
          <input 
            type="text" 
            bind:value={searchQuery}
            placeholder="Search files..."
            class="input w-full pl-10"
          />
          <svg class="w-5 h-5 text-muted absolute left-3 top-1/2 transform -translate-y-1/2" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <circle cx="11" cy="11" r="8"></circle>
            <line x1="21" y1="21" x2="16.65" y2="16.65"></line>
          </svg>
        </div>
      </div>
      
      <div class="flex gap-2">
        <button 
          class="btn btn-primary"
          onclick={simulateUpload}
          disabled={isUploading}
        >
          <svg class="w-5 h-5 mr-2" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"></path>
            <polyline points="17 8 12 3 7 8"></polyline>
            <line x1="12" y1="3" x2="12" y2="15"></line>
          </svg>
          {isUploading ? 'Uploading...' : 'Upload'}
        </button>
        
        <button 
          class="btn btn-secondary"
          onclick={() => showNewFolderModal = true}
        >
          <svg class="w-5 h-5 mr-2" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <path d="M22 19a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h5l2 3h9a2 2 0 0 1 2 2z"></path>
            <line x1="12" y1="11" x2="12" y2="17"></line>
            <line x1="9" y1="14" x2="15" y2="14"></line>
          </svg>
          New Folder
        </button>
        
        <div class="flex border border-border rounded-lg overflow-hidden">
          <button 
            class={`p-2 ${currentView === 'grid' ? 'bg-purple text-white' : 'bg-surface text-text-base hover:bg-accent hover:text-text-hover'}`}
            onclick={() => currentView = 'grid'}
            title="Grid view"
          >
            <svg class="w-5 h-5" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <rect x="3" y="3" width="7" height="7"></rect>
              <rect x="14" y="3" width="7" height="7"></rect>
              <rect x="14" y="14" width="7" height="7"></rect>
              <rect x="3" y="14" width="7" height="7"></rect>
            </svg>
          </button>
          <button 
            class={`p-2 ${currentView === 'list' ? 'bg-purple text-white' : 'bg-surface text-text-base hover:bg-accent hover:text-text-hover'}`}
            onclick={() => currentView = 'list'}
            title="List view"
          >
            <svg class="w-5 h-5" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <line x1="8" y1="6" x2="21" y2="6"></line>
              <line x1="8" y1="12" x2="21" y2="12"></line>
              <line x1="8" y1="18" x2="21" y2="18"></line>
              <line x1="3" y1="6" x2="3.01" y2="6"></line>
              <line x1="3" y1="12" x2="3.01" y2="12"></line>
              <line x1="3" y1="18" x2="3.01" y2="18"></line>
            </svg>
          </button>
        </div>
      </div>
    </div>
    
    {#if isUploading}
      <div class="card-dark mb-6">
        <div class="flex items-center gap-3 mb-2">
          <svg class="w-5 h-5 text-purple animate-pulse" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"></path>
            <polyline points="17 8 12 3 7 8"></polyline>
            <line x1="12" y1="3" x2="12" y2="15"></line>
          </svg>
          <span class="text-highlight">Uploading file...</span>
          <span class="text-text-base ml-auto">{uploadProgress}%</span>
        </div>
        
        <div class="w-full bg-surface rounded-full h-2 overflow-hidden">
          <div class="bg-purple h-full transition-all duration-300" style={`width: ${uploadProgress}%`}></div>
        </div>
      </div>
    {/if}
    
    <!-- Main Content -->
    <div class="flex flex-col lg:flex-row gap-6">
      <!-- Sidebar -->
      <div class="lg:w-64 flex-shrink-0">
        <div class="card-dark">
          <h3 class="text-lg font-medium text-highlight mb-4">Folders</h3>
          
          <div class="space-y-1">
            <button 
              class={`w-full text-left px-3 py-2 rounded-lg flex items-center gap-2 transition-colors ${selectedFolder === 'All Files' ? 'bg-purple-bg text-highlight' : 'hover:bg-surface text-text-base hover:text-text-hover'}`}
              onclick={() => selectedFolder = 'All Files'}
            >
              <svg class="w-5 h-5" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M3 6l9-4 9 4v12l-9 4-9-4V6z"></path>
                <path d="M3 6l9 4 9-4"></path>
                <path d="M12 10v10"></path>
              </svg>
              All Files
            </button>
            
            {#each folders as folder}
              <button 
                class={`w-full text-left px-3 py-2 rounded-lg flex items-center gap-2 transition-colors ${selectedFolder === folder.name ? 'bg-purple-bg text-highlight' : 'hover:bg-surface text-text-base hover:text-text-hover'}`}
                onclick={() => selectedFolder = folder.name}
              >
                <svg class="w-5 h-5" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <path d="M22 19a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h5l2 3h9a2 2 0 0 1 2 2z"></path>
                </svg>
                <div class="flex-1 flex justify-between items-center">
                  <span>{folder.name}</span>
                  <span class="text-xs text-muted">{folder.files}</span>
                </div>
              </button>
            {/each}
          </div>
          
          <div class="mt-6 pt-6 border-t border-border">
            <div class="text-sm text-text-base mb-2">Storage</div>
            <div class="w-full bg-surface rounded-full h-2 mb-2">
              <div class="bg-purple h-full" style="width: 65%"></div>
            </div>
            <div class="flex justify-between text-xs">
              <span class="text-text-base">6.5 GB used</span>
              <span class="text-text-base">10 GB total</span>
            </div>
          </div>
        </div>
      </div>
      
      <!-- Files Display -->
      <div class="flex-1">
        <div class="card-dark">
          <div class="flex justify-between items-center mb-6">
            <h2 class="text-xl font-bold text-highlight">{selectedFolder}</h2>
            
            <div class="flex items-center gap-2">
              <span class="text-sm text-text-base">Sort by:</span>
              <select 
                bind:value={sortBy}
                class="bg-surface border border-border rounded-lg text-text-hover text-sm py-1 px-2"
              >
                <option value="name">Name</option>
                <option value="modified">Date</option>
                <option value="size">Size</option>
              </select>
              
              <button 
                onclick={() => sortDirection = sortDirection === 'asc' ? 'desc' : 'asc'}
                class="p-1 text-text-base hover:text-text-hover"
                title={sortDirection === 'asc' ? 'Ascending' : 'Descending'}
              >
                <svg class="w-5 h-5" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  {#if sortDirection === 'asc'}
                    <path d="M3 4h13M3 8h9M3 12h5M7 20V8"></path>
                    <path d="M18 20l3-3-3-3"></path>
                    <path d="M21 17h-8"></path>
                  {:else}
                    <path d="M3 4h13M3 8h9M3 12h5M7 20V8"></path>
                    <path d="M18 8l3 3-3 3"></path>
                    <path d="M21 11h-8"></path>
                  {/if}
                </svg>
              </button>
            </div>
          </div>
          
          {#if filteredFiles.length === 0}
            <div class="flex flex-col items-center justify-center py-12">
              <svg class="w-16 h-16 text-muted mb-4" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5">
                <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"></path>
                <polyline points="14 2 14 8 20 8"></polyline>
                <line x1="12" y1="18" x2="12" y2="12"></line>
                <line x1="9" y1="15" x2="15" y2="15"></line>
              </svg>
              <h3 class="text-lg font-medium text-highlight mb-2">No files found</h3>
              <p class="text-text-base text-center max-w-md">
                {searchQuery 
                  ? `No files matching "${searchQuery}" in ${selectedFolder}` 
                  : `This folder is empty. Upload files to get started.`}
              </p>
            </div>
          {:else if currentView === 'grid'}
            <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
              {#each filteredFiles as file}
                <div class="bg-surface/50 rounded-lg p-4 hover:bg-surface transition-colors cursor-pointer group">
                  <div class="flex justify-center mb-3">
                    {@html getFileIcon(file.type)}
                  </div>
                  <div class="text-center">
                    <div class="font-medium text-highlight mb-1 truncate" title={file.name}>{file.name}</div>
                    <div class="flex justify-between text-xs text-text-base">
                      <span>{file.size}</span>
                      <span>{formatDate(file.modified).split(',')[0]}</span>
                    </div>
                  </div>
                  <div class="absolute top-2 right-2 opacity-0 group-hover:opacity-100 transition-opacity">
                    <button class="p-1 text-text-base hover:text-text-hover">
                      <svg class="w-4 h-4" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <circle cx="12" cy="12" r="1"></circle>
                        <circle cx="19" cy="12" r="1"></circle>
                        <circle cx="5" cy="12" r="1"></circle>
                      </svg>
                    </button>
                  </div>
                </div>
              {/each}
            </div>
          {:else}
            <div class="overflow-x-auto">
              <table class="w-full">
                <thead class="text-left border-b border-border">
                  <tr>
                    <th class="pb-3 text-text-base font-medium">
                      <button 
                        class="flex items-center gap-1"
                        onclick={() => toggleSort('name')}
                      >
                        Name
                        {#if sortBy === 'name'}
                          <svg class="w-4 h-4" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                            {#if sortDirection === 'asc'}
                              <polyline points="18 15 12 9 6 15"></polyline>
                            {:else}
                              <polyline points="6 9 12 15 18 9"></polyline>
                            {/if}
                          </svg>
                        {/if}
                      </button>
                    </th>
                    <th class="pb-3 text-text-base font-medium">Type</th>
                    <th class="pb-3 text-text-base font-medium">
                      <button 
                        class="flex items-center gap-1"
                        onclick={() => toggleSort('size')}
                      >
                        Size
                        {#if sortBy === 'size'}
                          <svg class="w-4 h-4" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                            {#if sortDirection === 'asc'}
                              <polyline points="18 15 12 9 6 15"></polyline>
                            {:else}
                              <polyline points="6 9 12 15 18 9"></polyline>
                            {/if}
                          </svg>
                        {/if}
                      </button>
                    </th>
                    <th class="pb-3 text-text-base font-medium">
                      <button 
                        class="flex items-center gap-1"
                        onclick={() => toggleSort('modified')}
                      >
                        Modified
                        {#if sortBy === 'modified'}
                          <svg class="w-4 h-4" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                            {#if sortDirection === 'asc'}
                              <polyline points="18 15 12 9 6 15"></polyline>
                            {:else}
                              <polyline points="6 9 12 15 18 9"></polyline>
                            {/if}
                          </svg>
                        {/if}
                      </button>
                    </th>
                    <th class="pb-3 text-text-base font-medium text-right">Actions</th>
                  </tr>
                </thead>
                <tbody>
                  {#each filteredFiles as file}
                    <tr class="border-b border-border/50 hover:bg-surface/50 transition-colors">
                      <td class="py-3 text-highlight">
                        <div class="flex items-center gap-2">
                          {@html getFileIcon(file.type)}
                          <span>{file.name}</span>
                        </div>
                      </td>
                      <td class="py-3 text-text-base uppercase text-xs">{file.type}</td>
                      <td class="py-3 text-text-base">{file.size}</td>
                      <td class="py-3 text-text-base">{formatDate(file.modified)}</td>
                      <td class="py-3 text-right">
                        <div class="flex justify-end gap-2">
                          <button class="p-1 text-text-base hover:text-purple transition-colors" title="Download">
                            <svg class="w-5 h-5" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                              <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"></path>
                              <polyline points="7 10 12 15 17 10"></polyline>
                              <line x1="12" y1="15" x2="12" y2="3"></line>
                            </svg>
                          </button>
                          <button class="p-1 text-text-base hover:text-purple transition-colors" title="Share">
                            <svg class="w-5 h-5" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                              <circle cx="18" cy="5" r="3"></circle>
                              <circle cx="6" cy="12" r="3"></circle>
                              <circle cx="18" cy="19" r="3"></circle>
                              <line x1="8.59" y1="13.51" x2="15.42" y2="17.49"></line>
                              <line x1="15.41" y1="6.51" x2="8.59" y2="10.49"></line>
                            </svg>
                          </button>
                          <button class="p-1 text-text-base hover:text-error transition-colors" title="Delete">
                            <svg class="w-5 h-5" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                              <polyline points="3 6 5 6 21 6"></polyline>
                              <path d="M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"></path>
                            </svg>
                          </button>
                        </div>
                      </td>
                    </tr>
                  {/each}
                </tbody>
              </table>
            </div>
          {/if}
        </div>
      </div>
    </div>
  </div>
</div>

<!-- New Folder Modal -->
{#if showNewFolderModal}
  <div class="fixed inset-0 bg-bg-base/80 backdrop-blur-sm flex items-center justify-center z-50">
    <div class="bg-card border border-border rounded-lg p-6 w-full max-w-md">
      <h3 class="text-xl font-bold text-highlight mb-4">Create New Folder</h3>
      
      <div class="mb-4">
        <label for="folder-name" class="block text-sm font-medium text-text-base mb-2">Folder Name</label>
        <input 
          id="folder-name"
          type="text" 
          bind:value={newFolderName}
          placeholder="Enter folder name"
          class="input w-full"
        />
      </div>
      
      <div class="flex justify-end gap-3">
        <button 
          class="btn btn-secondary"
          onclick={() => showNewFolderModal = false}
        >
          Cancel
        </button>
        <button 
          class="btn btn-primary"
          onclick={createNewFolder}
          disabled={!newFolderName.trim()}
        >
          Create Folder
        </button>
      </div>
    </div>
  </div>
{/if}
</file>

<file path="src/routes/gradebook/+page.svelte">
<script lang="ts">
  import { gradebookStore } from '$lib/stores/gradebook';
  import { onMount } from 'svelte';
  import LoadingBounce from '$lib/components/LoadingBounce.svelte';
  import Handsontable from '$lib/components/Handsontable.svelte';

  // State variables using $state
  let categoryId = $state('');
  let assignmentName = $state('');
  let maxPoints = $state(100);
  let newStudentName = $state('');
  let newClassName = $state('');
  let showNewClassModal = $state(false);
  let showNewAssignmentModal = $state(false);
  let hotInstance = $state<any>(null);
  let showStudentModal = $state(false);
  
  // Reactive values using $derived
  let selectedCategory = $derived($gradebookStore.getSelectedCategory);
  let categoryStudents = $derived($gradebookStore.getStudentsInSelectedCategory);
  let categoryAssignments = $derived($gradebookStore.getAssignmentsForSelectedCategory);
  let allGrades = $derived($gradebookStore.grades || []);
  
  // Create reactive data and headers for Handsontable
  let hotData = $derived(createTableData());
  let columnHeaders = $derived(createColumnHeaders());
  
  // Table functions
  function createTableData() {
    if (!categoryStudents || categoryStudents.length === 0) {
      return [];
    }
    
    return categoryStudents.map((student, index) => {
      // Start with student number and name
      const row = [index + 1, student.name];
      
      // Add grades for each assignment
      if (categoryAssignments && categoryAssignments.length > 0) {
        categoryAssignments.forEach(assignment => {
          const grade = allGrades.find(
            g => g.studentId === student.id && g.assignmentId === assignment.id
          );
          row.push(grade ? grade.points : null);
        });
      }
      
      // Add average at the end
      try {
        const average = gradebookStore.studentAverageInCategory(student.id, categoryId || '');
        row.push(average);
      } catch (err) {
        console.error('Error calculating average:', err);
        row.push(0);
      }
      
      return row;
    });
  }
  
  function createColumnHeaders() {
    // Start with # and Student columns
    const headers = ['#', 'Name', 'Average'];
    
    // Add assignment columns
    if (categoryAssignments && categoryAssignments.length > 0) {
      categoryAssignments.forEach(assignment => {
        headers.push(`${assignment.name} (${assignment.maxPoints}pts)`);
      });
    }
    
    return headers;
  }
  
  function getGradeColor(value) {
    if (value === null || value === undefined) return 'rgba(139, 92, 246, 0.1)'; // Default purple
    
    if (value >= 90) return 'rgba(52, 211, 153, 0.2)'; // Green for A
    if (value >= 80) return 'rgba(96, 165, 250, 0.2)'; // Blue for B
    if (value >= 70) return 'rgba(251, 191, 36, 0.2)'; // Yellow for C
    if (value >= 60) return 'rgba(249, 115, 22, 0.2)'; // Orange for D
    return 'rgba(239, 68, 68, 0.2)'; // Red for F
  }
  
  // Handle table events
  function handleAfterChange(event) {
    const { changes, source } = event.detail;
    
    if (source === 'edit' && changes) {
      for (const [row, col, oldValue, newValue] of changes) {
        // Skip the first two columns (# and Name) and the Average column
        if (col <= 2) continue;
        
        // Get the corresponding student and assignment
        const student = categoryStudents[row];
        // Adjust column index to match assignments array (subtract 3 to account for #, Name, and Average columns)
        const assignmentIndex = col - 3;
        const assignment = categoryAssignments[assignmentIndex];
        
        if (student && assignment) {
          // Record the grade
          gradebookStore.recordGrade(student.id, assignment.id, parseFloat(newValue) || 0);
        }
      }
    }
  }
  
  function handleTableInit(event) {
    hotInstance = event.detail.hotInstance;
  }
  
  onMount(async () => {
    // Ensure data is loaded when gradebook is accessed
    await gradebookStore.ensureDataLoaded();
  });

  // Handle initial category selection with $effect
  $effect(() => {
    if ($gradebookStore.categories?.length > 0 && !categoryId) {
      gradebookStore.selectCategory($gradebookStore.categories[0].id);
      categoryId = $gradebookStore.categories[0].id;
    }
  });

  function handleAddAssignment() {
    if (categoryId && assignmentName.trim()) {
      gradebookStore.addAssignmentToCategory(assignmentName.trim(), maxPoints || 0, categoryId);
      assignmentName = '';
      maxPoints = 100;
      showNewAssignmentModal = false;
    }
  }

  async function handleAddStudent() {
    if (newStudentName.trim() && categoryId) {
      const studentId = await gradebookStore.addGlobalStudent(newStudentName.trim());
      if (studentId) {
        gradebookStore.assignStudentToCategory(studentId, categoryId);
        newStudentName = '';
        showStudentModal = false;
      }
    }
  }

  function handleAddClass() {
    if (newClassName.trim()) {
      gradebookStore.addCategory(newClassName.trim());
      newClassName = '';
      showNewClassModal = false;
    }
  }

  // Function to toggle the new class modal
  function toggleNewClassModal() {
    showNewClassModal = !showNewClassModal;
    if (showNewClassModal) {
      newClassName = '';
    }
  }
  
  // Simple function to check if we can render the grid
  function hasData() {
    return categoryStudents && categoryStudents.length > 0;
  }
</script>

<div class="min-h-screen">
  <div class="container mx-auto px-4 py-8">
    <!-- Header -->
    <div class="mb-8">
      <div class="flex items-center gap-3">
        <div class="text-purple">
          <svg class="w-10 h-10" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <path d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"></path>
          </svg>
        </div>
        <div>
          <h1 class="text-3xl font-bold text-highlight">Gradebook</h1>
          <p class="text-text-base">Manage student grades and assignments</p>
        </div>
      </div>
    </div>

    {#if $gradebookStore.isLoading}
      <div class="flex items-center justify-center min-h-[500px]">
        <LoadingBounce />
      </div>
    {:else}
      <!-- Action Bar -->
      <div class="flex flex-wrap gap-4 mb-6">
        <div class="flex-1">
          <div class="card-dark p-4">
            <label for="class-selector" class="block text-sm font-medium text-text-base mb-2">Select Class</label>
            <div class="flex gap-2">
              <select 
                id="class-selector" 
                class="select w-full"
                bind:value={categoryId}
              >
                <option value="" disabled>Select a class</option>
                {#each $gradebookStore.categories as category}
                  <option value={category.id}>{category.name}</option>
                {/each}
              </select>
              <button
                onclick={toggleNewClassModal}
                class="btn btn-primary"
                aria-label="Create new class"
              >
                <svg class="w-5 h-5" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <path d="M12 5v14M5 12h14"></path>
                </svg>
              </button>
            </div>
          </div>
        </div>
        
        {#if selectedCategory}
          <div class="flex gap-2">
            <button 
              class="btn btn-primary"
              onclick={() => showNewAssignmentModal = true}
            >
              <svg class="w-5 h-5 mr-2" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M11 4H4a2 2 0 00-2 2v14a2 2 0 002 2h14a2 2 0 002-2v-7"></path>
                <path d="M18.5 2.5a2.121 2.121 0 013 3L12 15l-4 1 1-4 9.5-9.5z"></path>
              </svg>
              New Assignment
            </button>
            
            <button 
              class="btn btn-secondary"
              onclick={() => showStudentModal = true}
            >
              <svg class="w-5 h-5 mr-2" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M20 21v-2a4 4 0 00-4-4H8a4 4 0 00-4 4v2"></path>
                <circle cx="12" cy="7" r="4"></circle>
              </svg>
              Add Student
            </button>
          </div>
        {/if}
      </div>

      {#if selectedCategory}
        <div class="card-dark mb-6">
          <div class="flex justify-between items-center mb-6">
            <div>
              <h2 class="text-xl font-bold text-highlight">{selectedCategory.name}</h2>
              <p class="text-text-base text-sm mt-1">
                {categoryStudents.length} student{categoryStudents.length !== 1 ? 's' : ''} • 
                {categoryAssignments.length} assignment{categoryAssignments.length !== 1 ? 's' : ''}
              </p>
            </div>
            
            <div class="flex gap-2">
              <button class="btn btn-sm btn-secondary">
                <svg class="w-4 h-4 mr-1" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <path d="M21 15v4a2 2 0 01-2 2H5a2 2 0 01-2-2v-4"></path>
                  <polyline points="7 10 12 15 17 10"></polyline>
                  <line x1="12" y1="15" x2="12" y2="3"></line>
                </svg>
                Export
              </button>
              <button class="btn btn-sm btn-secondary">
                <svg class="w-4 h-4 mr-1" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <path d="M12 3v12M5 8l7-5 7 5"></path>
                  <path d="M5 21h14a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v11a2 2 0 002 2z"></path>
                </svg>
                Import
              </button>
            </div>
          </div>
          
          {#if hasData() && categoryAssignments.length > 0}
            <!-- Excel-like Gradebook Table -->
            <div class="overflow-hidden border border-border rounded-lg">
              <Handsontable
                data={hotData}
                colHeaders={columnHeaders}
                settings={{
                  rowHeaders: true,
                  stretchH: 'all',
                  manualColumnResize: true,
                  contextMenu: true,
                  copyPaste: true,
                  fillHandle: true,
                  fixedColumnsStart: 2,
                  licenseKey: 'non-commercial-and-evaluation',
                  columns: [
                    { // # Column
                      type: 'numeric',
                      readOnly: true,
                      width: 40,
                      className: 'htCenter text-text-base font-medium'
                    },
                    { // Name Column
                      type: 'text',
                      readOnly: true,
                      width: 180,
                      className: 'htLeft text-highlight font-medium'
                    },
                    { // Average Column
                      type: 'numeric',
                      readOnly: true,
                      numericFormat: { pattern: '0.0' },
                      width: 80,
                      className: 'htCenter font-bold',
                      renderer: function(instance, td, row, col, prop, value) {
                        td.style.backgroundColor = getGradeColor(value);
                        td.innerHTML = value ? `${value}%` : '—';
                        
                        // Add color classes based on grade
                        if (value >= 90) td.className += ' text-green-400';
                        else if (value >= 80) td.className += ' text-blue-400';
                        else if (value >= 70) td.className += ' text-yellow-400';
                        else if (value >= 60) td.className += ' text-orange-400';
                        else if (value) td.className += ' text-red-400';
                        
                        return td;
                      }
                    },
                    ...categoryAssignments.map(assignment => ({
                      type: 'numeric',
                      numericFormat: { pattern: '0.0' },
                      width: 100,
                      className: 'htCenter',
                      validator: function(value, callback) {
                        callback(value === null || value === '' || (value >= 0 && value <= assignment.maxPoints));
                      },
                      allowInvalid: false,
                      renderer: function(instance, td, row, col, prop, value) {
                        // Calculate percentage for background color
                        const percentage = value !== null ? (value / assignment.maxPoints) * 100 : 0;
                        td.style.backgroundColor = getGradeColor(percentage);
                        
                        // Add a subtle progress bar at the bottom of the cell
                        if (value !== null) {
                          td.innerHTML = `
                            <div class="relative w-full h-full flex items-center justify-center">
                              <span>${value}</span>
                              <div class="absolute bottom-0 left-0 right-0 h-1 bg-surface">
                                <div class="${percentage >= 90 ? 'bg-green-500' : 
                                  percentage >= 80 ? 'bg-blue-500' : 
                                  percentage >= 70 ? 'bg-yellow-500' : 
                                  percentage >= 60 ? 'bg-orange-500' : 
                                  'bg-red-500'}" 
                                  style="width: ${percentage}%"></div>
                              </div>
                            </div>
                          `;
                        } else {
                          td.innerHTML = '';
                        }
                        
                        return td;
                      }
                    }))
                  ]
                }}
                height={400}
                on:init={handleTableInit}
                on:afterChange={handleAfterChange}
              />
            </div>
            
            <div class="mt-4 text-sm text-text-base">
              <p>
                <span class="font-medium">Pro Tip:</span> This gradebook supports Excel-like features:
                <span class="text-highlight">Select multiple cells</span> with click and drag, 
                <span class="text-highlight">Copy/paste</span> with Ctrl+C/Ctrl+V, 
                <span class="text-highlight">Fill values</span> by dragging cell corners, and 
                <span class="text-highlight">Right-click</span> for more options.
              </p>
            </div>
          {:else if hasData()}
            <div class="bg-surface/30 rounded-lg p-6 text-center">
              <svg class="w-16 h-16 mx-auto text-muted mb-4" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5">
                <path d="M11 4H4a2 2 0 00-2 2v14a2 2 0 002 2h14a2 2 0 002-2v-7"></path>
                <path d="M18.5 2.5a2.121 2.121 0 013 3L12 15l-4 1 1-4 9.5-9.5z"></path>
              </svg>
              <h3 class="text-xl font-bold text-highlight mb-2">No Assignments Yet</h3>
              <p class="text-text-base mb-6">
                You have students in this class, but no assignments have been created.
              </p>
              <button 
                class="btn btn-primary"
                onclick={() => showNewAssignmentModal = true}
              >
                <svg class="w-5 h-5 mr-2" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <path d="M11 4H4a2 2 0 00-2 2v14a2 2 0 002 2h14a2 2 0 002-2v-7"></path>
                  <path d="M18.5 2.5a2.121 2.121 0 013 3L12 15l-4 1 1-4 9.5-9.5z"></path>
                </svg>
                Create First Assignment
              </button>
            </div>
          {:else}
            <div class="flex flex-col items-center justify-center py-16 bg-surface/30 rounded-lg">
              <svg class="w-16 h-16 text-muted mb-4" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5">
                <path d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"></path>
              </svg>
              <h3 class="text-xl font-bold text-highlight mb-2">No Students Yet</h3>
              <p class="text-text-base text-center max-w-md mb-6">
                Add students to this class to start tracking grades. You can add students individually or import a list.
              </p>
              <button 
                class="btn btn-primary"
                onclick={() => showStudentModal = true}
              >
                <svg class="w-5 h-5 mr-2" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <path d="M20 21v-2a4 4 0 00-4-4H8a4 4 0 00-4 4v2"></path>
                  <circle cx="12" cy="7" r="4"></circle>
                </svg>
                Add First Student
              </button>
            </div>
          {/if}
        </div>
        
        {#if categoryAssignments.length > 0}
          <div class="card-dark mb-6">
            <h3 class="text-lg font-bold text-highlight mb-4">Assignment Summary</h3>
            
            <div class="overflow-x-auto">
              <table class="w-full">
                <thead class="text-left border-b border-border">
                  <tr>
                    <th class="pb-3 text-text-base font-medium">Name</th>
                    <th class="pb-3 text-text-base font-medium">Max Points</th>
                    <th class="pb-3 text-text-base font-medium">Average</th>
                    <th class="pb-3 text-text-base font-medium text-right">Actions</th>
                  </tr>
                </thead>
                <tbody>
                  {#each categoryAssignments as assignment}
                    <tr class="border-b border-border/50 hover:bg-surface/50 transition-colors">
                      <td class="py-3 text-highlight">{assignment.name}</td>
                      <td class="py-3 text-text-base">{assignment.maxPoints}</td>
                      <td class="py-3">
                        {#if categoryStudents.length > 0}
                          {@const grades = allGrades.filter(g => g.assignmentId === assignment.id)}
                          {@const total = grades.reduce((sum, g) => sum + g.points, 0)}
                          {@const avg = grades.length > 0 ? (total / grades.length / assignment.maxPoints * 100).toFixed(1) : '—'}
                          <div class="flex items-center gap-2">
                            <div class="w-24 h-2 bg-surface rounded-full overflow-hidden">
                              <div 
                                class="h-full bg-purple" 
                                style={`width: ${avg === '—' ? '0' : avg}%`}
                              ></div>
                            </div>
                            <span class="text-text-base">{avg}%</span>
                          </div>
                        {:else}
                          <span class="text-text-base">—</span>
                        {/if}
                      </td>
                      <td class="py-3 text-right">
                        <div class="flex justify-end gap-2">
                          <button class="p-1 text-text-base hover:text-purple transition-colors" aria-label="Edit assignment">
                            <svg class="w-5 h-5" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                              <path d="M11 4H4a2 2 0 00-2 2v14a2 2 0 002 2h14a2 2 0 002-2v-7"></path>
                              <path d="M18.5 2.5a2.121 2.121 0 013 3L12 15l-4 1 1-4 9.5-9.5z"></path>
                            </svg>
                          </button>
                          <button class="p-1 text-text-base hover:text-error transition-colors" aria-label="Delete assignment">
                            <svg class="w-5 h-5" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                              <polyline points="3 6 5 6 21 6"></polyline>
                              <path d="M19 6v14a2 2 0 01-2 2H7a2 2 0 01-2-2V6m3 0V4a2 2 0 012-2h4a2 2 0 012 2v2"></path>
                            </svg>
                          </button>
                        </div>
                      </td>
                    </tr>
                  {/each}
                </tbody>
              </table>
            </div>
          </div>
        {/if}
        
        {#if categoryStudents.length > 0}
          <div class="card-dark">
            <h3 class="text-lg font-bold text-highlight mb-4">Students</h3>
            
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
              {#each categoryStudents as student, index}
                <div class="bg-surface/50 rounded-lg p-4 hover:bg-surface transition-colors">
                  <div class="flex items-center gap-3">
                    <div class="w-10 h-10 rounded-full bg-purple-bg text-purple flex items-center justify-center font-medium">
                      {student.name.charAt(0)}
                    </div>
                    <div>
                      <div class="font-medium text-highlight">{student.name}</div>
                      {#if categoryAssignments.length > 0}
                        {@const avg = gradebookStore.studentAverageInCategory(student.id, categoryId)}
                        <div class="text-sm">
                          <span class={`${avg >= 90 ? 'text-green-400' : avg >= 80 ? 'text-blue-400' : avg >= 70 ? 'text-yellow-400' : avg >= 60 ? 'text-orange-400' : 'text-red-400'}`}>
                            {avg}%
                          </span>
                          <span class="text-text-base ml-1">average</span>
                        </div>
                      {/if}
                    </div>
                  </div>
                </div>
              {/each}
            </div>
          </div>
        {/if}
      {:else}
        <div class="card-dark p-8 text-center">
          <svg class="w-16 h-16 mx-auto text-muted mb-4" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5">
            <path d="M22 19a2 2 0 01-2 2H4a2 2 0 01-2-2V5a2 2 0 012-2h5l2 3h9a2 2 0 012 2z"></path>
          </svg>
          <h3 class="text-xl font-bold text-highlight mb-2">No Class Selected</h3>
          <p class="text-text-base mb-6">Please select a class from the dropdown above or create a new one to view grades.</p>
          <button
            onclick={toggleNewClassModal}
            class="btn btn-primary"
          >
            <svg class="w-5 h-5 mr-2" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M12 5v14M5 12h14"></path>
            </svg>
            Create New Class
          </button>
        </div>
      {/if}
    {/if}
  </div>
</div>

<!-- New Class Modal -->
{#if showNewClassModal}
  <div class="fixed inset-0 bg-bg-base/80 backdrop-blur-sm flex items-center justify-center z-50">
    <div class="bg-card border border-border rounded-lg p-6 w-full max-w-md">
      <h3 class="text-xl font-bold text-highlight mb-4">Create New Class</h3>
      
      <div class="mb-6">
        <label for="new-class-name" class="block text-sm font-medium text-text-base mb-2">Class Name</label>
        <input
          type="text"
          id="new-class-name"
          bind:value={newClassName}
          placeholder="Class name (e.g. Math 101)"
          class="input w-full"
        />
        <p class="text-xs text-text-base mt-1">You'll be able to add students and assignments after creating the class.</p>
      </div>
      
      <div class="flex gap-3">
        <button
          type="button"
          onclick={toggleNewClassModal}
          class="btn btn-secondary flex-1"
        >
          Cancel
        </button>
        <button
          type="button"
          onclick={handleAddClass}
          class="btn btn-primary flex-1"
          disabled={!newClassName.trim()}
        >
          Create Class
        </button>
      </div>
    </div>
  </div>
{/if}

<!-- New Assignment Modal -->
{#if showNewAssignmentModal}
  <div class="fixed inset-0 bg-bg-base/80 backdrop-blur-sm flex items-center justify-center z-50">
    <div class="bg-card border border-border rounded-lg p-6 w-full max-w-md">
      <h3 class="text-xl font-bold text-highlight mb-4">Add New Assignment</h3>
      
      <div class="mb-4">
        <label for="assignment-name" class="block text-sm font-medium text-text-base mb-2">Assignment Name</label>
        <input
          type="text"
          id="assignment-name"
          bind:value={assignmentName}
          placeholder="e.g. Midterm Exam"
          class="input w-full"
        />
      </div>
      
      <div class="mb-6">
        <label for="max-points" class="block text-sm font-medium text-text-base mb-2">Maximum Points</label>
        <input
          type="number"
          id="max-points"
          bind:value={maxPoints}
          min="1"
          class="input w-full"
        />
      </div>
      
      <div class="flex gap-3">
        <button
          type="button"
          onclick={() => showNewAssignmentModal = false}
          class="btn btn-secondary flex-1"
        >
          Cancel
        </button>
        <button
          type="button"
          onclick={handleAddAssignment}
          class="btn btn-primary flex-1"
          disabled={!assignmentName.trim() || maxPoints <= 0}
        >
          Add Assignment
        </button>
      </div>
    </div>
  </div>
{/if}

<!-- Add Student Modal -->
{#if showStudentModal}
  <div class="fixed inset-0 bg-bg-base/80 backdrop-blur-sm flex items-center justify-center z-50">
    <div class="bg-card border border-border rounded-lg p-6 w-full max-w-md">
      <h3 class="text-xl font-bold text-highlight mb-4">Add Student to {selectedCategory?.name}</h3>
      
      <div class="mb-6">
        <label for="student-name" class="block text-sm font-medium text-text-base mb-2">Student Name</label>
        <input
          type="text"
          id="student-name"
          bind:value={newStudentName}
          placeholder="e.g. John Smith"
          class="input w-full"
        />
      </div>
      
      <div class="flex gap-3">
        <button
          type="button"
          onclick={() => showStudentModal = false}
          class="btn btn-secondary flex-1"
        >
          Cancel
        </button>
        <button
          type="button"
          onclick={handleAddStudent}
          class="btn btn-primary flex-1"
          disabled={!newStudentName.trim()}
        >
          Add Student
        </button>
      </div>
    </div>
  </div>
{/if}
</file>

<file path="src/routes/jeopardy/+page.svelte">
<script lang="ts">
  import { jeopardyStore } from '$lib/stores/jeopardy';
  import { goto } from '$app/navigation';
  import LoadingBounce from '$lib/components/LoadingBounce.svelte';

  const { getGames, createGame, deleteGame } = jeopardyStore;

  let newGameName = $state('');
  let isLoading = $state(true);
  let showCreateModal = $state(false);

  $effect(async () => {
    await jeopardyStore.ensureDataLoaded();
    isLoading = false;
  });

  function handleCreateGame(e: Event) {
    e.preventDefault();
    if (newGameName.trim()) {
      const gameId = createGame(newGameName.trim());
      newGameName = '';
      showCreateModal = false;
      goto(`/jeopardy/editor/${gameId}`);
    }
  }

  function handlePlayGame(gameId: string) {
    goto(`/jeopardy/play/${gameId}`);
  }

  function handleEditGame(gameId: string) {
    goto(`/jeopardy/editor/${gameId}`);
  }

  function handleDeleteGame(gameId: string) {
    if (confirm('Are you sure you want to delete this game?')) {
      deleteGame(gameId);
    }
  }
</script>

<div class="container mx-auto px-4 py-8">
  {#if isLoading}
    <div class="flex justify-center items-center h-64">
      <LoadingBounce />
    </div>
  {:else}
    <!-- Page Header -->
    <div class="mb-8">
      <h1 class="text-3xl font-bold text-dark-highlight mb-1">Jeopardy Games</h1>
      <p class="text-dark-text">Create and manage your educational Jeopardy games</p>
    </div>

    <!-- Create New Game Card -->
    <div class="card-dark mb-8">
      <div class="flex items-center justify-between">
        <div>
          <h2 class="text-xl font-semibold text-gray-200">Create a New Game</h2>
          <p class="text-gray-400 text-sm mt-1">Start fresh with a blank Jeopardy game</p>
        </div>
        <button
          onclick={() => showCreateModal = true}
          class="btn-primary"
        >
          Create Game
        </button>
      </div>
    </div>

    <!-- Games Grid -->
    {#if $getGames.length > 0}
      <div class="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
        {#each $getGames as game (game.id)}
          <div class="card-dark hover:border-dark-purple transition-all duration-300">
            <div class="mb-4">
              <h3 class="text-xl font-semibold text-gray-200">{game.name}</h3>
              <div class="text-gray-400 text-sm mt-2">
                <div class="flex justify-between">
                  <span>Categories:</span>
                  <span class="text-gray-300">{game.categories.length}</span>
                </div>
                <div class="flex justify-between">
                  <span>Teams:</span>
                  <span class="text-gray-300">{game.teams.length}</span>
                </div>
                <div class="flex justify-between">
                  <span>Last Modified:</span>
                  <span class="text-gray-300">{new Date(game.lastModified).toLocaleDateString()}</span>
                </div>
              </div>
            </div>
            
            <div class="flex gap-2">
              <button
                onclick={() => handlePlayGame(game.id)}
                class="flex-1 py-2 px-3 bg-dark-purple text-white rounded-lg hover:bg-dark-purple-hover transition-all duration-200"
              >
                Play
              </button>
              <button
                onclick={() => handleEditGame(game.id)}
                class="flex-1 py-2 px-3 bg-dark-purple-bg text-dark-purple-light rounded-lg hover:bg-dark-purple-hover hover:text-white transition-all duration-200"
              >
                Edit
              </button>
              <button
                onclick={() => handleDeleteGame(game.id)}
                class="py-2 px-3 bg-dark-error text-white rounded-lg hover:bg-dark-error-hover transition-all duration-200"
                aria-label="Delete game"
              >
                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                </svg>
              </button>
            </div>
          </div>
        {/each}
      </div>
    {:else}
      <div class="text-center py-12">
        <div class="text-gray-400">
          <svg class="w-24 h-24 mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z"></path>
          </svg>
          <p class="text-xl mb-2">No games yet</p>
          <p>Create your first Jeopardy game to get started!</p>
        </div>
      </div>
    {/if}
  {/if}

  <!-- Create Game Modal -->
  {#if showCreateModal}
    <div class="fixed inset-0 bg-black/50 flex items-center justify-center z-50">
      <div class="bg-gradient-card border border-dark-border rounded-lg p-6 w-full max-w-md mx-4 shadow-dark-dropdown">
        <h2 class="text-xl font-bold text-gray-200 mb-4">Create New Game</h2>
        <form onsubmit={handleCreateGame}>
          <div class="mb-4">
            <label for="gameName" class="block text-sm font-medium text-gray-300 mb-2">
              Game Name
            </label>
            <input
              id="gameName"
              type="text"
              bind:value={newGameName}
              placeholder="Enter game name"
              class="w-full px-3 py-2 bg-surface text-highlight border border-border rounded-lg focus:outline-none focus:border-purple"
              required
            />
          </div>
          <div class="flex gap-3">
            <button
              type="button"
              onclick={() => { showCreateModal = false; newGameName = ''; }}
              class="flex-1 py-2 px-4 bg-gray-600 text-white rounded-lg hover:bg-gray-700 transition-all duration-200"
            >
              Cancel
            </button>
            <button
              type="submit"
              class="flex-1 py-2 px-4 bg-dark-purple text-white rounded-lg hover:bg-dark-purple-hover transition-all duration-200"
            >
              Create
            </button>
          </div>
        </form>
      </div>
    </div>
  {/if}
</div>
</file>

<file path="src/routes/jeopardy/editor/[gameId]/+page.svelte">
<script lang="ts">
  import { page } from '$app/stores';
  import { jeopardyStore } from '$lib/stores/jeopardy';
  import { goto } from '$app/navigation';
  import LoadingBounce from '$lib/components/LoadingBounce.svelte';
  import type { Question } from '$lib/types/jeopardy';

  const {
    getGames,
    getActiveGame,
    addCategory,
    deleteCategory,
    addQuestion,
    updateQuestion,
    deleteQuestion,
    addTeam,
    deleteTeam,
    updateGameSettings,
    setActiveGame,
    importGameData,
    exportGameData,
    getGameTemplates,
    applyGameTemplate
  } = jeopardyStore;

  let gameId = $page.params.gameId;
  let isLoading = $state(true);
  let activeTab = $state('categories');
  let showTemplateModal = $state(false);
  
  // Category management
  let newCategoryName = $state('');
  
  // Question management
  interface EditingQuestionState {
    categoryId: string;
    questionId: string;
    text: string;
    answer: string;
    pointValue: number;
    isDoubleJeopardy: boolean;
    timeLimit: number;
  }
  
  let editingQuestion = $state<EditingQuestionState>({
    categoryId: '',
    questionId: '',
    text: '',
    answer: '',
    pointValue: 100,
    isDoubleJeopardy: false,
    timeLimit: 30
  });
  
  // Point value dropdown state
  let pointValueOption = $state('100'); // '100', '200', '300', '400', '500', 'other'
  let customPointValue = $state(100);
  
  // Team management
  let newTeamName = $state('');
  let newTeamColor = $state('#3B82F6');
  
  $effect(() => {
    const loadData = async () => {
      console.log('🎮 Loading jeopardy data for game:', gameId);
      await jeopardyStore.ensureDataLoaded();
      setActiveGame(gameId);
      console.log('🎮 Active game set, loading complete');
      isLoading = false;
    };
    loadData();
  });

  function handleAddCategory(e: Event) {
    e.preventDefault();
    console.log('🎮 Adding category:', newCategoryName, 'to game:', $getActiveGame?.id);
    if (newCategoryName.trim() && $getActiveGame) {
      addCategory($getActiveGame.id, newCategoryName.trim());
      console.log('🎮 Category added successfully');
      newCategoryName = '';
    } else {
      console.log('🎮 Category add failed - missing name or game');
    }
  }

  function handleAddTeam(e: Event) {
    e.preventDefault();
    if (newTeamName.trim() && $getActiveGame) {
      addTeam($getActiveGame.id, newTeamName.trim());
      newTeamName = '';
    }
  }

  function startEditingQuestion(categoryId: string, question?: Question) {
    if (question) {
      editingQuestion = {
        categoryId,
        questionId: question.id,
        text: question.text,
        answer: question.answer,
        pointValue: question.pointValue,
        isDoubleJeopardy: question.isDoubleJeopardy || false,
        timeLimit: question.timeLimit || 30
      };
      
      // Set dropdown state based on existing point value
      const standardValues = ['100', '200', '300', '400', '500'];
      if (standardValues.includes(question.pointValue.toString())) {
        pointValueOption = question.pointValue.toString();
      } else {
        pointValueOption = 'other';
        customPointValue = question.pointValue;
      }
    } else {
      editingQuestion = {
        categoryId,
        questionId: '',
        text: '',
        answer: '',
        pointValue: 100,
        isDoubleJeopardy: false,
        timeLimit: 30
      };
      
      // Reset dropdown state
      pointValueOption = '100';
      customPointValue = 100;
    }
  }

  function handlePointValueChange() {
    if (pointValueOption === 'other') {
      editingQuestion.pointValue = customPointValue;
    } else {
      editingQuestion.pointValue = parseInt(pointValueOption);
    }
  }

  function handleSaveQuestion(e: Event) {
    e.preventDefault();
    if (editingQuestion.text.trim() && editingQuestion.answer.trim()) {
      if (editingQuestion.questionId) {
        updateQuestion(
          editingQuestion.categoryId,
          editingQuestion.questionId,
          {
            text: editingQuestion.text,
            answer: editingQuestion.answer,
            pointValue: editingQuestion.pointValue,
            isDoubleJeopardy: editingQuestion.isDoubleJeopardy,
            timeLimit: editingQuestion.timeLimit
          }
        );
      } else {
        addQuestion(
          editingQuestion.categoryId,
          {
            text: editingQuestion.text,
            answer: editingQuestion.answer,
            pointValue: editingQuestion.pointValue,
            isAnswered: false,
            isDoubleJeopardy: editingQuestion.isDoubleJeopardy,
            timeLimit: editingQuestion.timeLimit
          }
        );
      }
      cancelEditingQuestion();
    }
  }

  function cancelEditingQuestion() {
    editingQuestion = {
      categoryId: '',
      questionId: '',
      text: '',
      answer: '',
      pointValue: 100,
      isDoubleJeopardy: false,
      timeLimit: 30
    };
  }

  function handleExportGame() {
    if ($getActiveGame) {
      exportGameData($getActiveGame.id);
    }
  }

  async function handleImportGame(event: Event) {
    const target = event.target as HTMLInputElement;
    const file = target.files?.[0];
    if (file && $getActiveGame) {
      const text = await file.text();
      try {
        const data = JSON.parse(text);
        importGameData($getActiveGame.id, data);
      } catch (error) {
        alert('Invalid JSON file');
      }
    }
  }

  function handleApplyTemplate(template: any) {
    if ($getActiveGame) {
      applyGameTemplate($getActiveGame.id, template);
      showTemplateModal = false;
    }
  }
</script>

<div class="container mx-auto px-4 py-8">
  {#if isLoading}
    <div class="flex justify-center items-center h-64">
      <LoadingBounce />
    </div>
  {:else if $getActiveGame}
    <!-- Header -->
    <div class="mb-8">
      <div class="flex items-center gap-4 mb-2">
        <button
          onclick={() => goto('/jeopardy')}
          class="text-dark-purple hover:text-dark-purple-hover transition-colors"
          aria-label="Back to Jeopardy games"
        >
          <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18"></path>
          </svg>
        </button>
        <h1 class="text-3xl font-bold text-dark-highlight">Edit: {$getActiveGame.name}</h1>
      </div>
      <p class="text-dark-text">Configure categories, questions, teams, and game settings</p>
    </div>

    <!-- Tab Navigation -->
    <div class="tabs mb-6">
      <button
        onclick={() => activeTab = 'categories'}
        class="px-4 py-2 {activeTab === 'categories' ? 'bg-dark-purple text-white' : 'bg-dark-purple-bg text-dark-purple-light'} rounded-lg mr-2 hover:bg-dark-purple-hover hover:text-white transition-all duration-200"
      >
        Categories & Questions
      </button>
      <button
        onclick={() => activeTab = 'teams'}
        class="px-4 py-2 {activeTab === 'teams' ? 'bg-dark-purple text-white' : 'bg-dark-purple-bg text-dark-purple-light'} rounded-lg mr-2 hover:bg-dark-purple-hover hover:text-white transition-all duration-200"
      >
        Teams
      </button>
      <button
        onclick={() => activeTab = 'settings'}
        class="px-4 py-2 {activeTab === 'settings' ? 'bg-dark-purple text-white' : 'bg-dark-purple-bg text-dark-purple-light'} rounded-lg mr-2 hover:bg-dark-purple-hover hover:text-white transition-all duration-200"
      >
        Settings
      </button>
      <button
        onclick={() => activeTab = 'import-export'}
        class="px-4 py-2 {activeTab === 'import-export' ? 'bg-dark-purple text-white' : 'bg-dark-purple-bg text-dark-purple-light'} rounded-lg hover:bg-dark-purple-hover hover:text-white transition-all duration-200"
      >
        Import/Export
      </button>
    </div>

    <!-- Tab Content -->
    {#if activeTab === 'categories'}
      <div class="space-y-6">
        <!-- Add Category -->
        <div class="card-dark">
          <h3 class="text-lg font-semibold text-gray-200 mb-4">Add Category</h3>
          <form onsubmit={handleAddCategory} class="flex gap-3">
            <input
              type="text"
              bind:value={newCategoryName}
              placeholder="Category name"
              class="flex-1 px-3 py-2 bg-surface text-highlight border border-border rounded-lg focus:outline-none focus:border-purple"
              required
            />
            <button type="submit" class="btn-primary">Add Category</button>
          </form>
        </div>

        <!-- Jeopardy Board Preview -->
        {#if $getActiveGame.categories.length > 0}
          <div class="card-dark mb-6">
            <h3 class="text-lg font-semibold text-gray-200 mb-4">Game Board Preview</h3>
            <div class="grid gap-4 max-w-6xl mx-auto" style="grid-template-columns: repeat({$getActiveGame.categories.length}, minmax(0, 1fr));">
              {#each $getActiveGame.categories as category (category.id)}
                <div class="space-y-4">
                  <!-- Category Header -->
                  <div class="card-dark text-center py-3 relative group">
                    <h4 class="text-lg font-bold text-gray-200">{category.name}</h4>
                    <button
                      onclick={() => deleteCategory(category.id)}
                      class="absolute top-2 right-2 text-dark-error hover:text-dark-error-hover transition-colors opacity-0 group-hover:opacity-100"
                      aria-label="Delete category"
                    >
                      <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                      </svg>
                    </button>
                  </div>
                  
                  <!-- Questions sorted by point value -->
                  {#each category.questions.sort((a, b) => a.pointValue - b.pointValue) as question (question.id)}
                    <div class="relative group">
                      <button class="w-full card-dark py-6 text-center cursor-pointer hover:border-purple transition-all duration-200"
                           onclick={() => startEditingQuestion(category.id, question)}
                           type="button">
                        <div class="text-xl font-bold text-purple-light">${question.pointValue}</div>
                        {#if question.isDoubleJeopardy}
                          <div class="text-xs text-purple mt-1">Daily Double</div>
                        {/if}
                      </button>
                      <button
                        onclick={() => deleteQuestion(category.id, question.id)}
                        class="absolute top-2 right-2 text-dark-error hover:text-dark-error-hover transition-colors opacity-0 group-hover:opacity-100"
                        aria-label="Delete question"
                      >
                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                        </svg>
                      </button>
                    </div>
                  {/each}
                  
                  <!-- Add Question Button -->
                  <button
                    onclick={() => startEditingQuestion(category.id)}
                    class="w-full py-4 border-2 border-dashed border-gray-600 text-gray-400 hover:border-purple hover:text-purple transition-all duration-200 rounded-lg"
                  >
                    + Add Question
                  </button>
                </div>
              {/each}
            </div>
          </div>
        {/if}
      </div>
    {/if}

    {#if activeTab === 'teams'}
      <div class="space-y-6">
        <!-- Add Team -->
        <div class="card-dark">
          <h3 class="text-lg font-semibold text-gray-200 mb-4">Add Team</h3>
          <form onsubmit={handleAddTeam} class="flex gap-3">
            <input
              type="text"
              bind:value={newTeamName}
              placeholder="Team name"
              class="flex-1 px-3 py-2 bg-surface text-highlight border border-border rounded-lg focus:outline-none focus:border-purple"
              required
            />
            <input
              type="color"
              bind:value={newTeamColor}
              class="w-20 h-10 bg-dark-bg border border-dark-border rounded-lg cursor-pointer"
            />
            <button type="submit" class="btn-primary">Add Team</button>
          </form>
        </div>

        <!-- Teams List -->
        <div class="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
          {#each $getActiveGame.teams as team}
            <div class="card-dark flex items-center justify-between">
              <div class="flex items-center gap-3">
                <div class="w-4 h-4 rounded" style="background-color: {team.color}"></div>
                <span class="text-gray-200 font-medium">{team.name}</span>
              </div>
              <button
                onclick={() => deleteTeam(team.id)}
                class="text-dark-error hover:text-dark-error-hover transition-colors"
                aria-label={`Delete team ${team.name}`}
              >
                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                </svg>
              </button>
            </div>
          {/each}
        </div>
      </div>
    {/if}

    {#if activeTab === 'settings'}
      <div class="card-dark">
        <h3 class="text-lg font-semibold text-gray-200 mb-4">Game Settings</h3>
        <form onsubmit={(e) => e.preventDefault()} class="space-y-4">
          <div>
            <label class="flex items-center gap-3">
              <input
                type="checkbox"
                checked={$getActiveGame.settings?.useTimer || false}
                onchange={(e) => updateGameSettings($getActiveGame.id, { ...$getActiveGame.settings, useTimer: e.currentTarget.checked })}
                class="w-4 h-4 text-dark-purple bg-dark-bg border-gray-600 rounded focus:ring-dark-purple"
              />
              <span class="text-gray-200">Use Timer</span>
            </label>
          </div>
          
          {#if $getActiveGame.settings?.useTimer}
            <div>
              <label for="timer-size" class="block text-sm font-medium text-gray-300 mb-2">Timer Size</label>
              <select
                id="timer-size"
                value={$getActiveGame.settings?.timerSize || 'large'}
                onchange={(e) => updateGameSettings($getActiveGame.id, { ...$getActiveGame.settings, timerSize: e.currentTarget.value })}
                class="w-full px-3 py-2 bg-surface text-highlight border border-border rounded-lg focus:outline-none focus:border-purple"
              >
                <option value="small">Small</option>
                <option value="medium">Medium</option>
                <option value="large">Large</option>
              </select>
            </div>
            
            <div>
              <label for="default-time-limit" class="block text-sm font-medium text-gray-300 mb-2">Default Time Limit (seconds)</label>
              <input
                id="default-time-limit"
                type="number"
                value={$getActiveGame.settings?.defaultTimeLimit || 30}
                onchange={(e) => updateGameSettings($getActiveGame.id, { ...$getActiveGame.settings, defaultTimeLimit: parseInt(e.currentTarget.value) })}
                min="10"
                max="300"
                class="w-full px-3 py-2 bg-surface text-highlight border border-border rounded-lg focus:outline-none focus:border-purple"
              />
            </div>
            
            <div>
              <label for="reading-time" class="block text-sm font-medium text-gray-300 mb-2">Reading Time (seconds)</label>
              <input
                id="reading-time"
                type="number"
                value={$getActiveGame.settings?.readingTime || 5}
                onchange={(e) => updateGameSettings($getActiveGame.id, { ...$getActiveGame.settings, readingTime: parseInt(e.currentTarget.value) })}
                min="0"
                max="30"
                class="w-full px-3 py-2 bg-surface text-highlight border border-border rounded-lg focus:outline-none focus:border-purple"
              />
            </div>
            
            <div>
              <label class="flex items-center gap-3">
                <input
                  type="checkbox"
                  checked={$getActiveGame.settings?.autoShowAnswer || false}
                  onchange={(e) => updateGameSettings($getActiveGame.id, { ...$getActiveGame.settings, autoShowAnswer: e.currentTarget.checked })}
                  class="w-4 h-4 text-dark-purple bg-dark-bg border-gray-600 rounded focus:ring-dark-purple"
                />
                <span class="text-gray-200">Auto Show Answer When Timer Expires</span>
              </label>
            </div>
          {/if}
        </form>
      </div>
    {/if}

    {#if activeTab === 'import-export'}
      <div class="space-y-6">
        <!-- Export -->
        <div class="card-dark">
          <h3 class="text-lg font-semibold text-gray-200 mb-4">Export Game</h3>
          <p class="text-gray-400 mb-4">Download your game configuration as a JSON file</p>
          <button onclick={handleExportGame} class="btn-primary">
            Export Game
          </button>
        </div>

        <!-- Import -->
        <div class="card-dark">
          <h3 class="text-lg font-semibold text-gray-200 mb-4">Import Game Data</h3>
          <p class="text-gray-400 mb-4">Upload a JSON file to replace current game data</p>
          <input
            type="file"
            accept=".json"
            onchange={handleImportGame}
            class="block w-full text-sm text-gray-400 file:mr-4 file:py-2 file:px-4 file:rounded-lg file:border-0 file:text-sm file:font-semibold file:bg-dark-purple file:text-white hover:file:bg-dark-purple-hover"
          />
        </div>

        <!-- Templates -->
        <div class="card-dark">
          <h3 class="text-lg font-semibold text-gray-200 mb-4">Apply Template</h3>
          <p class="text-gray-400 mb-4">Choose a pre-made template to apply to your game</p>
          <button onclick={() => showTemplateModal = true} class="btn-primary">
            Browse Templates
          </button>
        </div>
      </div>
    {/if}
  {/if}

  <!-- Question Editor Modal -->
  {#if editingQuestion.categoryId}
    <div class="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4">
      <div class="bg-gradient-card border border-dark-border rounded-lg p-6 w-full max-w-2xl max-h-[90vh] overflow-y-auto shadow-dark-dropdown">
        <h2 class="text-xl font-bold text-gray-200 mb-4">
          {editingQuestion.questionId ? 'Edit Question' : 'Add Question'}
        </h2>
        <form onsubmit={handleSaveQuestion} class="space-y-4">
          <div>
            <label for="question-text" class="block text-sm font-medium text-gray-300 mb-2">Question Text</label>
            <textarea
              id="question-text"
              bind:value={editingQuestion.text}
              rows="3"
              class="w-full px-3 py-2 bg-surface text-highlight border border-border rounded-lg focus:outline-none focus:border-purple"
              required
            ></textarea>
          </div>
          
          <div>
            <label for="question-answer" class="block text-sm font-medium text-gray-300 mb-2">Answer</label>
            <input
              id="question-answer"
              type="text"
              bind:value={editingQuestion.answer}
              class="w-full px-3 py-2 bg-surface text-highlight border border-border rounded-lg focus:outline-none focus:border-purple"
              required
            />
          </div>
          
          <div class="grid gap-4 md:grid-cols-2">
            <div>
              <label for="point-value" class="block text-sm font-medium text-gray-300 mb-2">Point Value</label>
              <select
                id="point-value"
                bind:value={pointValueOption}
                onchange={handlePointValueChange}
                class="w-full px-3 py-2 bg-surface text-highlight border border-border rounded-lg focus:outline-none focus:border-purple"
              >
                <option value="100">100</option>
                <option value="200">200</option>
                <option value="300">300</option>
                <option value="400">400</option>
                <option value="500">500</option>
                <option value="other">Other</option>
              </select>
              
              {#if pointValueOption === 'other'}
                <input
                  type="number"
                  bind:value={customPointValue}
                  onchange={handlePointValueChange}
                  min="1"
                  class="w-full px-3 py-2 bg-surface text-highlight border border-border rounded-lg focus:outline-none focus:border-purple mt-2"
                  placeholder="Enter custom point value"
                />
              {/if}
            </div>
            
            <div>
              <label for="time-limit" class="block text-sm font-medium text-gray-300 mb-2">Time Limit (seconds)</label>
              <input id="time-limit"
                type="number"
                bind:value={editingQuestion.timeLimit}
                min="10"
                max="300"
                class="w-full px-3 py-2 bg-surface text-highlight border border-border rounded-lg focus:outline-none focus:border-purple"
              />
            </div>
          </div>
          
          <div>
            <label class="flex items-center gap-3">
              <input
                type="checkbox"
                bind:checked={editingQuestion.isDoubleJeopardy}
                class="w-4 h-4 text-dark-purple bg-dark-bg border-gray-600 rounded focus:ring-dark-purple"
              />
              <span class="text-gray-200">Daily Double</span>
            </label>
          </div>
          
          <div class="flex gap-3">
            <button
              type="button"
              onclick={cancelEditingQuestion}
              class="flex-1 py-2 px-4 bg-gray-600 text-white rounded-lg hover:bg-gray-700 transition-all duration-200"
            >
              Cancel
            </button>
            <button
              type="submit"
              class="flex-1 py-2 px-4 bg-dark-purple text-white rounded-lg hover:bg-dark-purple-hover transition-all duration-200"
            >
              Save Question
            </button>
          </div>
        </form>
      </div>
    </div>
  {/if}

  <!-- Template Modal -->
  {#if showTemplateModal}
    <div class="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4">
      <div class="bg-gradient-card border border-dark-border rounded-lg p-6 w-full max-w-2xl max-h-[90vh] overflow-y-auto shadow-dark-dropdown">
        <h2 class="text-xl font-bold text-gray-200 mb-4">Choose a Template</h2>
        <div class="grid gap-4">
          {#each getGameTemplates() as template}
            <div class="card-dark hover:border-dark-purple transition-all duration-300">
              <h3 class="text-lg font-semibold text-gray-200 mb-2">{template.name}</h3>
              <p class="text-gray-400 text-sm mb-3">{template.description}</p>
              <div class="text-gray-400 text-sm mb-3">
                <span>Categories: {template.categories.length}</span>
                <span class="mx-2">•</span>
                <span>Questions: {template.categories.reduce((sum, cat) => sum + cat.questions.length, 0)}</span>
              </div>
              <button
                onclick={() => handleApplyTemplate(template)}
                class="btn-primary"
              >
                Apply Template
              </button>
            </div>
          {/each}
        </div>
        <div class="mt-4">
          <button
            onclick={() => showTemplateModal = false}
            class="w-full py-2 px-4 bg-gray-600 text-white rounded-lg hover:bg-gray-700 transition-all duration-200"
          >
            Cancel
          </button>
        </div>
      </div>
    </div>
  {/if}
</div>
</file>

<file path="src/routes/jeopardy/play/[gameId]/+page.svelte">
<script lang="ts">
  import { page } from '$app/stores';
  import { jeopardyStore } from '$lib/stores/jeopardy';
  import { goto } from '$app/navigation';
  import { onMount } from 'svelte';
  import JeopardyTimer from '$lib/components/JeopardyTimer.svelte';
  import LoadingBounce from '$lib/components/LoadingBounce.svelte';
  import type { Question } from '$lib/types/jeopardy';

  const {
    getActiveGame,
    getActiveQuestion,
    getLeadingTeam,
    wagerAmount,
    setActiveGame,
    markQuestionAnswered,
    setActiveQuestion,
    setWagerAmount,
    updateTeamScore,
    resetAllScores,
    resetGameBoard
  } = jeopardyStore;

  let gameId = $page.params.gameId;
  let isLoading = $state(true);
  let showAnswer = $state(false);
  let selectedTeamId = '';
  let wagerInputValue = $state('0');
  
  onMount(async () => {
    await jeopardyStore.ensureDataLoaded();
    setActiveGame(gameId);
    isLoading = false;
  });

  function handleSelectQuestion(categoryId: string, questionId: string) {
    const category = $getActiveGame?.categories.find(c => c.id === categoryId);
    const question = category?.questions.find(q => q.id === questionId);
    if (question && !question.isAnswered) {
      setActiveQuestion({
        ...question,
        categoryId,
        categoryName: category?.name || ''
      });
      showAnswer = false;
      selectedTeamId = '';
      wagerInputValue = question.pointValue.toString();
    }
  }

  function handleWagerSubmit() {
    const amount = parseInt(wagerInputValue) || 0;
    setWagerAmount(amount);
  }

  function handleAwardPoints(teamId: string, points: number) {
    if ($getActiveQuestion) {
      updateTeamScore(teamId, points);
      markQuestionAnswered($getActiveQuestion.categoryId, $getActiveQuestion.id);
      setActiveQuestion(null);
    }
  }

  function handleBackToBoard() {
    setActiveQuestion(null);
    showAnswer = false;
    selectedTeamId = '';
  }

  function handleResetScores() {
    if (confirm('Are you sure you want to reset all team scores?')) {
      resetAllScores();
    }
  }

  function handleResetBoard() {
    if (confirm('Are you sure you want to reset the entire game board?')) {
      resetGameBoard();
    }
  }
</script>

<div class="min-h-screen bg-gradient-dark">
  {#if isLoading}
    <div class="flex justify-center items-center h-screen">
      <LoadingBounce />
    </div>
  {:else if $getActiveGame}
    {#if !$getActiveQuestion}
      <!-- Game Board View -->
      <div class="container mx-auto px-4 py-8">
        <!-- Header -->
        <div class="mb-6 flex justify-between items-center">
          <div class="flex items-center gap-4">
            <button
              onclick={() => goto('/jeopardy')}
              class="text-gray-400 hover:text-gray-200 transition-colors"
              title="Back to Games"
              aria-label="Back to Games"
            >
              <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18"></path>
              </svg>
            </button>
            <h1 class="text-2xl font-bold text-dark-highlight">{$getActiveGame.name}</h1>
          </div>
          <div class="flex gap-2">
            <button
              onclick={handleResetScores}
              class="px-3 py-1 bg-gray-600 text-white rounded-lg hover:bg-gray-700 transition-all duration-200 text-sm"
            >
              Reset Scores
            </button>
            <button
              onclick={handleResetBoard}
              class="px-3 py-1 bg-gray-600 text-white rounded-lg hover:bg-gray-700 transition-all duration-200 text-sm"
            >
              Reset Board
            </button>
            <a
              href="/jeopardy/editor/{gameId}"
              class="px-3 py-1 bg-dark-purple-bg text-dark-purple-light rounded-lg hover:bg-dark-purple-hover hover:text-white transition-all duration-200 text-sm"
            >
              Edit Game
            </a>
          </div>
        </div>

        <!-- Team Scores -->
        <div class="mb-8 flex flex-wrap gap-4 justify-center">
          {#each $getActiveGame.teams as team (team.id)}
            <div 
              class="card-dark px-6 py-3 {$getLeadingTeam?.id === team.id ? 'border-dark-purple ring-2 ring-dark-purple' : ''}"
              style="border-color: {team.color};"
            >
              <div class="text-gray-400 text-sm">{team.name}</div>
              <div class="text-2xl font-bold text-gray-200">${team.score}</div>
            </div>
          {/each}
        </div>

        <!-- Game Board -->
        <div class="grid gap-4 max-w-6xl mx-auto" style="grid-template-columns: repeat({$getActiveGame.categories.length}, minmax(0, 1fr));">
          {#each $getActiveGame.categories as category (category.id)}
            <div class="space-y-4">
              <div class="card-dark text-center py-3">
                <h3 class="text-lg font-bold text-gray-200">{category.name}</h3>
              </div>
              {#each category.questions.sort((a, b) => a.pointValue - b.pointValue) as question (question.id)}
                <button
                  onclick={() => handleSelectQuestion(category.id, question.id)}
                  disabled={question.isAnswered}
                  class="w-full card-dark py-8 text-center transition-all duration-200 
                         {question.isAnswered 
                           ? 'opacity-30 cursor-not-allowed' 
                           : 'hover:border-dark-purple hover:shadow-dark-glow cursor-pointer'}"
                >
                  {#if question.isAnswered}
                    <span class="text-gray-600">-</span>
                  {:else}
                    <span class="text-2xl font-bold text-dark-purple-light">
                      ${question.pointValue}
                    </span>
                  {/if}
                </button>
              {/each}
            </div>
          {/each}
        </div>
      </div>
    {:else}
      <!-- Question View -->
      <div class="container mx-auto px-4 py-8 flex flex-col h-screen">
        {#if $getActiveGame?.settings?.useTimer && $getActiveGame?.settings?.timerSize !== 'small'}
          <JeopardyTimer 
            readingTime={$getActiveGame.settings.readingTime || 5}
            totalTime={$getActiveQuestion.timeLimit || $getActiveGame.settings.defaultTimeLimit || 30}
            size={$getActiveGame.settings.timerSize || 'large'}
            onTimeExpired={() => {
              if ($getActiveGame.settings?.autoShowAnswer) {
                showAnswer = true;
              }
            }}
            onReadingComplete={() => {
              // Reading phase complete, main timer starts
            }}
          />
        {/if}
        
        <div class="flex-1 flex items-center justify-center">
          <div class="w-full max-w-4xl">
            <div class="card-dark p-10 text-center relative">
              {#if $getActiveGame?.settings?.useTimer && $getActiveGame?.settings?.timerSize === 'small'}
                <JeopardyTimer 
                  readingTime={$getActiveGame.settings.readingTime || 5}
                  totalTime={$getActiveQuestion.timeLimit || $getActiveGame.settings.defaultTimeLimit || 30}
                  size="small"
                  position="corner"
                  onTimeExpired={() => {
                    if ($getActiveGame.settings?.autoShowAnswer) {
                      showAnswer = true;
                    }
                  }}
                  onReadingComplete={() => {
                    // Reading phase complete, main timer starts
                  }}
                />
              {/if}
              
              {#if $getActiveQuestion.isDoubleJeopardy}
                <div class="absolute top-4 left-4 bg-dark-purple text-white px-3 py-1 rounded-lg font-bold">
                  Daily Double
                </div>
              {/if}
              
              <div class="mb-8">
                <div class="text-lg text-gray-400 mb-2">{$getActiveQuestion.categoryName}</div>
                <div class="text-4xl font-bold text-dark-purple-light">${$getActiveQuestion.pointValue}</div>
              </div>
              
              <div class="text-2xl md:text-3xl text-gray-200 font-medium mb-8">
                {$getActiveQuestion.text}
              </div>
              
              {#if showAnswer}
                <div class="text-xl md:text-2xl text-dark-highlight font-medium mb-8 border-t border-dark-border pt-6">
                  {$getActiveQuestion.answer}
                </div>
              {/if}
              
              <div class="flex justify-center gap-4">
                <button
                  onclick={() => showAnswer = !showAnswer}
                  class="px-6 py-3 bg-dark-purple-bg text-dark-purple-light rounded-lg hover:bg-dark-purple-hover hover:text-white transition-all duration-200"
                >
                  {showAnswer ? 'Hide Answer' : 'Show Answer'}
                </button>
                <button
                  onclick={handleBackToBoard}
                  class="px-6 py-3 bg-gray-600 text-white rounded-lg hover:bg-gray-700 transition-all duration-200"
                >
                  Back to Board
                </button>
              </div>
            </div>
            
            {#if $getActiveQuestion.isDoubleJeopardy}
              <div class="card-dark mt-6 p-6">
                <h3 class="text-lg font-semibold text-gray-200 mb-4 text-center">Daily Double Wager</h3>
                <div class="flex items-center justify-center gap-3">
                  <input
                    type="number"
                    bind:value={wagerInputValue}
                    min="0"
                    max={Math.max($getActiveQuestion.pointValue * 2, 1000)}
                    class="w-32 px-3 py-2 bg-dark-bg text-gray-200 border border-dark-border rounded-lg focus:outline-none focus:border-dark-purple text-center"
                  />
                  <button
                    onclick={handleWagerSubmit}
                    class="px-4 py-2 bg-dark-purple text-white rounded-lg hover:bg-dark-purple-hover transition-all duration-200"
                  >
                    Set Wager
                  </button>
                </div>
                <p class="text-center text-gray-400 text-sm mt-2">
                  Current wager: <span class="text-gray-200 font-medium">${$wagerAmount}</span>
                </p>
              </div>
            {/if}
            
            <!-- Team Scoring -->
            <div class="card-dark mt-6 p-6">
              <h3 class="text-lg font-semibold text-gray-200 mb-4 text-center">Award Points</h3>
              <div class="grid grid-cols-2 gap-3" style="grid-template-columns: repeat(min({$getActiveGame.teams.length}, 4), minmax(0, 1fr));">
                {#each $getActiveGame.teams as team (team.id)}
                  <div class="text-center">
                    <button
                      onclick={() => handleAwardPoints(team.id, $getActiveQuestion.isDoubleJeopardy ? $wagerAmount : $getActiveQuestion.pointValue)}
                      class="w-full px-4 py-2 rounded-lg transition-all duration-200 hover:scale-105"
                      style="background-color: {team.color}; color: white;"
                    >
                      +${$getActiveQuestion.isDoubleJeopardy ? $wagerAmount : $getActiveQuestion.pointValue}
                    </button>
                    <button
                      onclick={() => handleAwardPoints(team.id, -($getActiveQuestion.isDoubleJeopardy ? $wagerAmount : $getActiveQuestion.pointValue))}
                      class="w-full mt-2 px-4 py-2 bg-dark-error text-white rounded-lg hover:bg-dark-error-hover transition-all duration-200"
                    >
                      -${$getActiveQuestion.isDoubleJeopardy ? $wagerAmount : $getActiveQuestion.pointValue}
                    </button>
                    <div class="mt-2 text-gray-400 text-sm">{team.name}</div>
                  </div>
                {/each}
              </div>
            </div>
          </div>
        </div>
      </div>
    {/if}
  {:else}
    <div class="flex justify-center items-center h-screen">
      <div class="text-center">
        <p class="text-gray-400 mb-4">Game not found</p>
        <button
          onclick={() => goto('/jeopardy')}
          class="btn-primary"
        >
          Back to Games
        </button>
      </div>
    </div>
  {/if}
</div>
</file>

<file path="src/routes/lesson-planner/+page.svelte">
<script lang="ts">
  // Lesson planner logic here (future editable)
</script>

<div class="p-6">
  <section class="max-w-7xl mx-auto space-y-6">
    <h1 class="text-3xl font-bold text-dark-highlight mb-6">Lesson Planner</h1>

    <div class="bg-dark-surface rounded-lg shadow-dark-card border border-dark-border p-6">
      <p class="text-dark-text mb-6">
        Plan and schedule lessons for your classes. You can outline objectives, assign resources, and
        track progress.
      </p>

      <!-- Placeholder Lesson Plan Table -->
      <div class="overflow-x-auto">
        <table class="min-w-full text-sm text-left border border-dark-border">
          <thead class="bg-dark-bg">
            <tr>
              <th class="p-3 font-semibold text-dark-highlight">Date</th>
              <th class="p-3 font-semibold text-dark-highlight">Subject</th>
              <th class="p-3 font-semibold text-dark-highlight">Topic</th>
              <th class="p-3 font-semibold text-dark-highlight">Resources</th>
            </tr>
          </thead>
          <tbody>
            <tr class="border-t border-dark-border">
              <td class="p-3 text-dark-text">2025-05-06</td>
              <td class="p-3 text-dark-text">Science</td>
              <td class="p-3 text-dark-text">Photosynthesis</td>
              <td class="p-3 text-dark-text">Diagram, video</td>
            </tr>
          </tbody>
        </table>
      </div>
    </div>
  </section>
</div>
</file>

<file path="src/routes/log-entries/+page.svelte">
<script lang="ts">
  import { logEntriesStore } from '$lib/stores/log-entries';
  import type { LogEntry, LogEntryFilters } from '$lib/types/log-entries';
  import LogEntriesForm from '$lib/components/LogEntriesForm.svelte';
  import LogEntriesSearch from '$lib/components/LogEntriesSearch.svelte';
  import LogEntriesList from '$lib/components/LogEntriesList.svelte';
  import LogEntriesDetails from '$lib/components/LogEntriesDetails.svelte';
  import LoadingBounce from '$lib/components/LoadingBounce.svelte';
  
  let showNewLogForm = $state(false);
  let showDetailsView = $state(false);
  let editMode = $state(false);
  let selectedLogId = $state<string | null>(null);
  
  // Current filtered logs
  let filteredLogs = $state<LogEntry[]>([]);
  let isLoading = $state(true);
  
  // Use $effect instead of subscribe
  $effect(() => {
    const state = $logEntriesStore;
    filteredLogs = state.logs.sort((a, b) => 
      new Date(b.date).getTime() - new Date(a.date).getTime()
    );
  });
  
  function handleFilter(filters: LogEntryFilters) {
    filteredLogs = logEntriesStore.filterLogs(filters).sort((a, b) => 
      new Date(b.date).getTime() - new Date(a.date).getTime()
    );
  }
  
  function handleSelectLog(logId: string) {
    selectedLogId = logId;
    showDetailsView = true;
  }
  
  function handleListDelete(logId: string) {
    logEntriesStore.deleteLog(logId);
    // No need to update filteredLogs as we're now using a subscription
  }
  
  function handleRestoreLog(log: LogEntry) {
    logEntriesStore.addLog(log);
  }
  
  function handleBulkDelete(logIds: string[]) {
    logIds.forEach(id => {
      logEntriesStore.deleteLog(id);
    });
  }
  
  function handleCloseDetails() {
    showDetailsView = false;
    selectedLogId = null;
  }
  
  function handleEditLog() {
    editMode = true;
    showDetailsView = false;
    showNewLogForm = true;
  }
  
  function handleDeleteLog() {
    showDetailsView = false;
    selectedLogId = null;
  }
  
  function handleSaveLog(logEntry: Omit<LogEntry, 'id'>) {
    console.log("Saving log entry:", logEntry);
    if (editMode && selectedLogId) {
      logEntriesStore.updateLog(selectedLogId, logEntry);
    } else {
      logEntriesStore.addLog(logEntry as LogEntry);
    }
    showNewLogForm = false;
    editMode = false;
    selectedLogId = null;
    
    // Force refresh of filtered logs
    filteredLogs = logEntriesStore.getLogs().sort((a, b) => 
      new Date(b.date).getTime() - new Date(a.date).getTime()
    );
  }
  
  $effect(() => {
    async function initializeData() {
      try {
        // Dynamically import supabase client
        const { initializeDB } = await import('$lib/supabaseClient');
        
        // Initialize database tables and functions
        await initializeDB();
      } catch (err) {
        console.warn("Could not initialize Supabase DB:", err);
      }
      
      // Initialize the log entries store
      logEntriesStore.init();
      
      setTimeout(() => {
        isLoading = false;
      }, 500);
    }
    
    initializeData();
  });
</script>

<div class="container mx-auto px-4 py-8">
  <!-- Page Header -->
  <div class="flex justify-between items-center mb-6">
    <div>
      <h1 class="text-3xl font-bold text-highlight">Log Entries</h1>
      <p class="text-muted">Track and manage student interactions</p>
    </div>
    <button
      class="px-4 py-2 bg-purple text-white rounded-lg hover:bg-purple-hover transition-colors"
      onclick={() => {
        editMode = false;
        selectedLogId = null;
        showNewLogForm = true;
      }}
    >
      + New Entry
    </button>
  </div>
  
  {#if isLoading}
    <div class="flex items-center justify-center h-64">
      <LoadingBounce />
    </div>
  {:else}
    <!-- Search and Filter Bar -->
    <LogEntriesSearch onfilter={handleFilter} />

    <!-- Main Content -->
    <div class="mt-6">
      {#if filteredLogs.length === 0}
        <div class="text-center py-12">
          <p class="text-muted">No log entries found</p>
        </div>
      {:else}
        <LogEntriesList 
          logs={filteredLogs} 
          onselect={handleSelectLog}
          ondelete={handleListDelete}
          onrestore={handleRestoreLog}
          onbulkdelete={handleBulkDelete}
        />
      {/if}
    </div>
  {/if}
  
  <!-- New/Edit Log Form Modal -->
  {#if showNewLogForm}
    <div class="fixed inset-0 bg-bg-base bg-opacity-80 z-50 flex items-center justify-center p-4">
      <div class="bg-surface rounded-xl shadow-dropdown max-w-3xl w-full max-h-[90vh] overflow-y-auto">
        <div class="p-6 border-b border-border">
          <h2 class="text-xl font-semibold text-highlight">
            {editMode ? 'Edit' : 'New'} Log Entry
          </h2>
        </div>
        <div class="p-6">
          <LogEntriesForm
            {editMode}
            log={editMode && selectedLogId ? logEntriesStore.getLog(selectedLogId) : undefined}
            onsave={handleSaveLog}
            oncancel={() => {
              showNewLogForm = false;
              editMode = false;
              selectedLogId = null;
            }}
          />
        </div>
      </div>
    </div>
  {/if}
  
  <!-- Log Details View Modal -->
  {#if showDetailsView && selectedLogId}
    <LogEntriesDetails
      logId={selectedLogId}
      onclose={handleCloseDetails}
      onedit={handleEditLog}
      ondelete={handleDeleteLog}
    />
  {/if}
</div>
</file>

<file path="src/routes/scattergories/+page.svelte">
<script lang="ts">
	import { scattergories, timeFormatted, isPlaying, canStart } from '$lib/stores/scattergories';
	import GameTimer from './components/GameTimer.svelte';
	import LetterDisplay from './components/LetterDisplay.svelte';
	import CategoryList from './components/CategoryList.svelte';
	import GameControls from './components/GameControls.svelte';
	import CategoryManager from './components/CategoryManager.svelte';

	let showCategoryManager = $state(false);
	let newCategoryText = $state('');

	function handleAddCategory() {
		if (newCategoryText.trim()) {
			scattergories.addCustomCategory(newCategoryText);
			newCategoryText = '';
		}
	}

	function handleKeyPress(event: KeyboardEvent) {
		if (event.key === 'Enter') {
			handleAddCategory();
		}
	}
</script>

<svelte:head>
	<title>Scattergories - Teacher Dashboard</title>
</svelte:head>

<div class="min-h-screen bg-base-100 p-4">
	<div class="max-w-6xl mx-auto">
		<!-- Header -->
		<div class="text-center mb-8">
			<h1 class="text-4xl font-bold text-primary mb-2">Scattergories</h1>
			<p class="text-lg text-base-content/70">Generate categories and race against time!</p>
		</div>

		<!-- Main Game Layout -->
		<div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
			<!-- Left Panel - Game Controls -->
			<div class="lg:col-span-1 space-y-6">
				<!-- Letter Display -->
				<LetterDisplay />

				<!-- Timer -->
				<GameTimer />

				<!-- Game Controls -->
				<GameControls />
			</div>

			<!-- Right Panel - Categories -->
			<div class="lg:col-span-2">
				<!-- Category Controls -->
				<div class="card bg-base-200 shadow-lg mb-6">
					<div class="card-body p-4">
						<div class="space-y-4">
							<!-- Top Row - Category Count & Mode -->
							<div class="flex flex-wrap items-center justify-between gap-4">
								<div class="flex items-center gap-4">
									<div class="flex items-center gap-2">
										<span class="text-sm font-medium">Categories:</span>
										<div class="join">
											<button
												class="btn btn-sm join-item"
												onclick={() => scattergories.setNumberOfWords($scattergories.numberOfWords - 1)}
												disabled={$scattergories.numberOfWords <= 1}
											>
												-
											</button>
											<span class="btn btn-sm join-item no-animation cursor-default">
												{$scattergories.numberOfWords}
											</span>
											<button
												class="btn btn-sm join-item"
												onclick={() => scattergories.setNumberOfWords($scattergories.numberOfWords + 1)}
												disabled={$scattergories.numberOfWords >= 30}
											>
												+
											</button>
										</div>
									</div>
									
									<button
										class="btn btn-sm btn-outline"
										onclick={() => scattergories.toggleKidFriendly()}
									>
										{$scattergories.isKidFriendly ? 'Kid-Friendly' : 'Regular'} Mode
									</button>
								</div>

								<button
									class="btn btn-sm btn-outline"
									onclick={() => showCategoryManager = !showCategoryManager}
								>
									Manage Categories
								</button>
							</div>
							
							<!-- Quick Add Row -->
							<div class="flex gap-2">
								<input
									type="text"
									placeholder="Add a category..."
									class="input input-bordered input-sm flex-1"
									bind:value={newCategoryText}
									onkeydown={handleKeyPress}
								/>
								<button
									class="btn btn-primary btn-sm"
									onclick={handleAddCategory}
									disabled={!newCategoryText.trim()}
								>
									Add
								</button>
							</div>
						</div>
					</div>
				</div>

				<!-- Category List -->
				<CategoryList />
			</div>
		</div>

		<!-- Category Manager Modal -->
		{#if showCategoryManager}
			<CategoryManager onclose={() => showCategoryManager = false} />
		{/if}
	</div>

	<!-- Pause Overlay -->
	{#if $scattergories.gameState === 'paused'}
		<div class="fixed inset-0 bg-black/50 flex items-center justify-center z-50 animate-fade-in">
			<div class="bg-base-100 p-8 rounded-2xl shadow-2xl text-center animate-bounce-in">
				<div class="text-6xl mb-4">⏸️</div>
				<h3 class="text-3xl font-bold mb-4">Game Paused</h3>
				<p class="text-lg text-base-content/70 mb-6">Click Resume to continue playing</p>
				<button class="btn btn-primary btn-lg" onclick={() => scattergories.startGame()}>
					▶️ Resume Game
				</button>
			</div>
		</div>
	{/if}

	<!-- Game Over Modal -->
	{#if $scattergories.gameState === 'game-over'}
		<div class="modal modal-open">
			<div class="modal-box">
				<h3 class="text-2xl font-bold text-center mb-4">Time's Up! 🎉</h3>
				<p class="text-center mb-6">How did you do with letter <strong class="text-3xl text-primary">{$scattergories.currentLetter}</strong>?</p>
				<div class="modal-action justify-center">
					<button class="btn btn-primary" onclick={() => scattergories.resetGame()}>
						Play Again
					</button>
				</div>
			</div>
		</div>
	{/if}
</div>

<style>
	:global(.modal-open .modal-box) {
		animation: scale-up 0.3s ease;
	}

	@keyframes scale-up {
		from {
			transform: scale(0.8);
			opacity: 0;
		}
		to {
			transform: scale(1);
			opacity: 1;
		}
	}

	.animate-fade-in {
		animation: fade-in 0.3s ease;
	}

	.animate-bounce-in {
		animation: bounce-in 0.5s ease;
	}

	@keyframes fade-in {
		from {
			opacity: 0;
		}
		to {
			opacity: 1;
		}
	}

	@keyframes bounce-in {
		0% {
			transform: scale(0.3);
			opacity: 0;
		}
		50% {
			transform: scale(1.05);
		}
		70% {
			transform: scale(0.9);
		}
		100% {
			transform: scale(1);
			opacity: 1;
		}
	}
</style>
</file>

<file path="src/routes/scattergories/components/CategoryList.svelte">
<script lang="ts">
	import { scattergories } from '$lib/stores/scattergories';
</script>

<div class="card bg-base-100 shadow-xl border-2 border-base-300">
	<div class="card-body p-6">
		<div class="flex items-center justify-between mb-6">
			<h3 class="text-2xl font-bold">
				📝 Categories
				{#if $scattergories.gameState === 'playing' || $scattergories.gameState === 'paused' || $scattergories.gameState === 'game-over'}
					<span class="text-lg font-normal text-primary ml-2">
						({$scattergories.currentCategories.length} selected)
					</span>
				{/if}
			</h3>
		</div>
		
		{#if $scattergories.gameState === 'ready'}
			<!-- Show all available categories when not playing -->
			<div class="max-h-96 overflow-y-auto">
				{#if $scattergories.categories.length === 0}
					<div class="text-center py-8 text-base-content/60">
						<p class="mb-4">No categories available</p>
						<p class="text-sm">Add some categories to get started!</p>
					</div>
				{:else}
					<div class="grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-3">
						{#each $scattergories.categories as category (category.id)}
							<div 
								class="flex items-center justify-between p-4 rounded-xl border-2 transition-all duration-200 hover:shadow-md {category.isCustom ? 'bg-primary/10 border-primary/40 hover:bg-primary/20' : 'border-base-300 hover:bg-base-200 hover:border-base-400'}"
							>
								<div class="flex items-center gap-2">
									<span class="text-sm font-medium">
										{category.category}
									</span>
									{#if category.isCustom}
										<span class="badge badge-primary badge-sm">★</span>
									{/if}
								</div>
								{#if category.isCustom}
									<button
										class="btn btn-xs btn-circle btn-error btn-outline hover:btn-error"
										onclick={() => scattergories.removeCategory(category.id)}
										title="Remove custom category"
									>
										×
									</button>
								{/if}
							</div>
						{/each}
					</div>
					
					<div class="mt-4 text-xs text-base-content/60 text-center">
						{$scattergories.numberOfWords} categories will be randomly selected when you start the game
					</div>
				{/if}
			</div>
		{:else}
			<!-- Show selected categories during/after game -->
			<div class="space-y-2">
				{#each $scattergories.currentCategories as category, index (category.id)}
					<div 
						class="flex items-center p-3 rounded-lg bg-base-200 hover:bg-base-300 transition-colors"
						style="animation-delay: {index * 50}ms"
						class:animate-slide-in={$scattergories.gameState === 'playing'}
					>
						<div class="flex-shrink-0 w-8 h-8 bg-primary text-primary-content rounded-full flex items-center justify-center text-sm font-bold mr-3">
							{index + 1}
						</div>
						<div class="flex-1">
							<span class="text-base font-medium">{category.category}</span>
							{#if category.isCustom}
								<span class="text-xs text-primary ml-2">★</span>
							{/if}
						</div>
					</div>
				{/each}
			</div>
			
			{#if $scattergories.gameState === 'playing'}
				<div class="mt-6 p-4 bg-primary/10 rounded-lg text-center">
					<div class="text-lg font-bold text-primary mb-2">
						Letter: {$scattergories.currentLetter}
					</div>
					<div class="text-sm text-base-content/70">
						Find items in each category that start with <strong>{$scattergories.currentLetter}</strong>
					</div>
				</div>
			{/if}
		{/if}
	</div>
</div>

<style>
	@keyframes slide-in {
		from {
			transform: translateX(-20px);
			opacity: 0;
		}
		to {
			transform: translateX(0);
			opacity: 1;
		}
	}

	.animate-slide-in {
		animation: slide-in 0.5s ease-out forwards;
	}
</style>
</file>

<file path="src/routes/scattergories/components/CategoryManager.svelte">
<script lang="ts">
	import { scattergories } from '$lib/stores/scattergories';
	
	interface Props {
		onclose: () => void;
	}
	
	let { onclose }: Props = $props();
	let newCategory = $state('');
	
	function handleAddCategory() {
		if (newCategory.trim()) {
			scattergories.addCustomCategory(newCategory.trim());
			newCategory = '';
		}
	}
	
	function handleKeyPress(event: KeyboardEvent) {
		if (event.key === 'Enter') {
			handleAddCategory();
		} else if (event.key === 'Escape') {
			onclose();
		}
	}
</script>

<div class="modal modal-open">
	<div class="modal-box max-w-2xl max-h-[80vh] overflow-y-auto">
		<div class="flex items-center justify-between mb-4">
			<h3 class="text-xl font-bold">Edit Categories</h3>
			<button class="btn btn-sm btn-circle btn-ghost" onclick={onclose}>✕</button>
		</div>
		
		<!-- Quick Actions -->
		<div class="mb-4">
			<div class="flex flex-wrap gap-2 mb-3">
				<button
					class="btn btn-sm btn-outline"
					onclick={() => scattergories.toggleKidFriendly()}
				>
					Make {$scattergories.isKidFriendly ? 'Adult' : 'Child'}-Friendly
				</button>
				<button
					class="btn btn-sm btn-outline btn-warning"
					onclick={() => scattergories.removeAllCategories()}
				>
					Remove All
				</button>
			</div>
			<div class="join w-full">
				<input
					type="text"
					placeholder="Enter category name..."
					class="input input-bordered input-sm join-item flex-1"
					bind:value={newCategory}
					onkeydown={handleKeyPress}
				/>
				<button
					class="btn btn-primary btn-sm join-item"
					onclick={handleAddCategory}
					disabled={!newCategory.trim()}
				>
					+
				</button>
			</div>
		</div>
		
		<!-- Category List -->
		<div class="mb-4">
			<div class="text-sm text-base-content/70 mb-2">
				{$scattergories.categories.length} total ({$scattergories.customCategories.length} custom)
			</div>
			
			<div class="max-h-60 overflow-y-auto border border-base-300 rounded">
				{#if $scattergories.categories.length === 0}
					<div class="p-4 text-center text-base-content/60">
						<p class="text-sm">No categories available</p>
					</div>
				{:else}
					<div class="divide-y divide-base-300">
						{#each $scattergories.categories as category (category.id)}
							<div class="flex items-center justify-between p-2 hover:bg-base-50 text-sm">
								<div class="flex items-center gap-2">
									<span>{category.category}</span>
									{#if category.isCustom}
										<span class="text-xs text-primary">★</span>
									{/if}
								</div>
								{#if category.isCustom}
									<button
										class="btn btn-xs btn-ghost text-error hover:bg-error hover:text-error-content"
										onclick={() => scattergories.removeCategory(category.id)}
									>
										×
									</button>
								{/if}
							</div>
						{/each}
					</div>
				{/if}
			</div>
		</div>
		
		<!-- Close Button -->
		<div class="modal-action mt-6">
			<button class="btn btn-primary w-full" onclick={onclose}>Done</button>
		</div>
	</div>
	<button class="modal-backdrop" onclick={onclose} aria-label="Close modal"></button>
</div>
</file>

<file path="src/routes/scattergories/components/GameControls.svelte">
<script lang="ts">
	import { scattergories, canStart } from '$lib/stores/scattergories';
	
	function getPlayButtonText() {
		switch ($scattergories.gameState) {
			case 'ready': return 'Start Game';
			case 'playing': return 'Pause';
			case 'paused': return 'Resume';
			case 'game-over': return 'Play Again';
			default: return 'Start';
		}
	}
	
	function handlePlayButton() {
		switch ($scattergories.gameState) {
			case 'ready':
			case 'paused':
				scattergories.startGame();
				break;
			case 'playing':
				scattergories.pauseGame();
				break;
			case 'game-over':
				scattergories.resetGame();
				break;
		}
	}
</script>

<div class="card bg-base-200 shadow-lg border-2 border-base-300">
	<div class="card-body p-6 text-center">
		<!-- Play Label -->
		<div class="mb-4">
			<div class="text-lg font-bold mb-2">
				{#if $scattergories.gameState === 'ready'}
					Click to Start
				{:else if $scattergories.gameState === 'playing'}
					Playing
				{:else if $scattergories.gameState === 'paused'}
					Paused
				{:else if $scattergories.gameState === 'game-over'}
					Game Over
				{/if}
			</div>
		</div>
		
		<div class="space-y-3">
			<!-- Main Play/Pause Button -->
			<button
				class="btn btn-lg w-full text-lg font-bold shadow-lg"
				class:btn-success={$scattergories.gameState === 'ready'}
				class:btn-warning={$scattergories.gameState === 'playing'}
				class:btn-info={$scattergories.gameState === 'paused'}
				class:btn-primary={$scattergories.gameState === 'game-over'}
				onclick={handlePlayButton}
				disabled={$scattergories.gameState === 'ready' && !$canStart}
			>
				{#if $scattergories.gameState === 'playing'}
					<svg class="w-6 h-6 mr-2" fill="currentColor" viewBox="0 0 24 24">
						<rect x="6" y="4" width="4" height="16"/>
						<rect x="14" y="4" width="4" height="16"/>
					</svg>
				{:else}
					<svg class="w-6 h-6 mr-2" fill="currentColor" viewBox="0 0 24 24">
						<path d="M8 5v14l11-7z"/>
					</svg>
				{/if}
				{getPlayButtonText()}
			</button>
			
			<!-- Reset Button -->
			{#if $scattergories.gameState !== 'ready'}
				<button
					class="btn btn-outline btn-sm w-full"
					onclick={() => scattergories.resetGame()}
				>
					<svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"/>
					</svg>
					Reset Game
				</button>
			{/if}
		</div>
		
		<!-- Game Status -->
		<div class="mt-4 text-sm opacity-70">
			{#if $scattergories.gameState === 'ready'}
				Ready to start!
			{:else if $scattergories.gameState === 'playing'}
				Game in progress...
			{:else if $scattergories.gameState === 'paused'}
				Game paused
			{:else if $scattergories.gameState === 'game-over'}
				Time's up!
			{/if}
		</div>
		
		{#if !$canStart && $scattergories.categories.length === 0}
			<div class="alert alert-warning mt-4 text-xs">
				<svg class="w-4 h-4" fill="currentColor" viewBox="0 0 24 24">
					<path d="M1 21h22L12 2 1 21zm12-3h-2v-2h2v2zm0-4h-2v-4h2v4z"/>
				</svg>
				Add some categories to start playing!
			</div>
		{/if}
	</div>
</div>
</file>

<file path="src/routes/scattergories/components/GameTimer.svelte">
<script lang="ts">
	import { scattergories, timeFormatted } from '$lib/stores/scattergories';
	
	let editingTime = $state(false);
	let tempMinutes = $state(3);
	
	function startEditing() {
		tempMinutes = Math.floor($scattergories.timeLimit / 60);
		editingTime = true;
	}
	
	function saveTime() {
		scattergories.setTimeLimit(tempMinutes);
		editingTime = false;
	}
	
	function cancelEdit() {
		editingTime = false;
	}

	$effect(() => {
		if ($scattergories.gameState !== 'ready') {
			editingTime = false;
		}
	});
</script>

<div class="card bg-base-200 shadow-lg border-2 border-base-300">
	<div class="card-body p-6">
		<div class="flex items-center justify-between mb-4">
			<h3 class="text-xl font-bold">Timer</h3>
			{#if $scattergories.gameState === 'ready' && !editingTime}
				<button
					class="btn btn-sm btn-outline btn-primary"
					onclick={startEditing}
				>
					⚙️ Change
				</button>
			{/if}
		</div>
		
		{#if editingTime}
			<div class="space-y-3">
				<div class="join w-full">
					<input
						type="number"
						class="input input-bordered join-item flex-1 text-center"
						bind:value={tempMinutes}
						min="1"
						max="60"
					/>
					<span class="btn join-item no-animation cursor-default">min</span>
				</div>
				<div class="flex gap-2">
					<button class="btn btn-primary btn-sm flex-1" onclick={saveTime}>
						Save
					</button>
					<button class="btn btn-outline btn-sm flex-1" onclick={cancelEdit}>
						Cancel
					</button>
				</div>
			</div>
		{:else}
			<div class="text-center">
				<div class="bg-base-100 rounded-2xl p-4 mb-3">
					<div 
						class="text-4xl lg:text-5xl font-mono font-black"
						class:text-error={$scattergories.timeRemaining <= 30 && $scattergories.gameState === 'playing'}
						class:animate-pulse={$scattergories.timeRemaining <= 10 && $scattergories.gameState === 'playing'}
					>
						{$timeFormatted}
					</div>
				</div>
				
				{#if $scattergories.gameState === 'playing' && $scattergories.timeRemaining <= 30}
					<div class="text-sm text-error font-bold animate-pulse">
						⚡ Hurry up! Time's running out!
					</div>
				{/if}
			</div>
		{/if}
		
		<!-- Progress Bar -->
		{#if $scattergories.gameState === 'playing'}
			<div class="mt-4">
				<progress 
					class="progress progress-primary w-full" 
					value={$scattergories.timeRemaining} 
					max={$scattergories.timeLimit}
					class:progress-error={$scattergories.timeRemaining <= 30}
				></progress>
			</div>
		{/if}
	</div>
</div>
</file>

<file path="src/routes/scattergories/components/LetterDisplay.svelte">
<script lang="ts">
	import { scattergories } from '$lib/stores/scattergories';
</script>

<div class="card bg-gradient-to-br from-primary to-primary-focus text-primary-content shadow-xl">
	<div class="card-body text-center p-6">
		<div class="flex items-center justify-between mb-4">
			<h3 class="text-xl font-bold">Letter</h3>
			{#if $scattergories.gameState === 'ready'}
				<button
					class="btn btn-sm btn-ghost text-primary-content hover:bg-primary-content hover:text-primary"
					onclick={() => scattergories.generateNewLetter()}
				>
					🎲 Re-roll
				</button>
			{/if}
		</div>
		
		<div class="min-h-[8rem] flex items-center justify-center mb-4">
			{#if $scattergories.currentLetter}
				<div class="w-24 h-24 lg:w-32 lg:h-32 bg-white bg-opacity-20 rounded-2xl flex items-center justify-center">
					<span class="text-5xl lg:text-7xl font-black animate-bounce-in">{$scattergories.currentLetter}</span>
				</div>
			{:else}
				<div class="text-2xl opacity-70 font-medium">Ready to start!</div>
			{/if}
		</div>
		
		{#if $scattergories.currentLetter}
			<p class="text-sm opacity-90 font-medium">
				Find items starting with <strong class="text-lg">{$scattergories.currentLetter}</strong>
			</p>
		{/if}
	</div>
</div>

<style>
	@keyframes bounce-in {
		0% {
			transform: scale(0.3);
			opacity: 0;
		}
		50% {
			transform: scale(1.05);
		}
		70% {
			transform: scale(0.9);
		}
		100% {
			transform: scale(1);
			opacity: 1;
		}
	}

	.animate-bounce-in {
		animation: bounce-in 0.6s ease-out;
	}
</style>
</file>

<file path="src/routes/settings/+page.svelte">
<script lang="ts">
  import { onMount } from 'svelte';
  import { gradebookStore } from '$lib/stores/gradebook';
  import { logEntriesStore } from '$lib/stores/log-entries';
  import { jeopardyStore } from '$lib/stores/jeopardy';
  import { get } from 'svelte/store';

  // Settings values
  let darkMode = $state(true);
  let useSupabase = $state(true);

  onMount(() => {
    // Load current settings for dark mode
    const storedDarkMode = localStorage.getItem('darkMode');
    if (storedDarkMode !== null) {
      darkMode = JSON.parse(storedDarkMode);
    }
    
    // Load current settings for data storage
    const storedUseSupabase = localStorage.getItem('useSupabase');
    if (storedUseSupabase !== null) {
      useSupabase = JSON.parse(storedUseSupabase);
    } else {
      // Get current state from gradebookStore
      useSupabase = get(gradebookStore.useSupabase) || true;
    }
  });

  function handleToggleDarkMode() {
    darkMode = !darkMode;
    localStorage.setItem('darkMode', JSON.stringify(darkMode));

    // Apply dark mode changes
    if (darkMode) {
      document.documentElement.classList.add('dark');
    } else {
      document.documentElement.classList.remove('dark');
    }

    // Set AG Grid theme mode
    document.documentElement.setAttribute('data-ag-theme-mode', darkMode ? 'dark' : 'light');
  }
  
  function handleToggleDataStorage() {
    useSupabase = !useSupabase;
    localStorage.setItem('useSupabase', JSON.stringify(useSupabase));
    
    // Update the gradebook store to use new setting
    gradebookStore.setUseSupabase(useSupabase);
    
    // Refresh to apply changes
    if (confirm('Storage setting changed. Reload page to apply changes?')) {
      window.location.reload();
    }
  }
  
  function handleClearData() {
    if (confirm('Are you sure you want to clear all data? This cannot be undone.')) {
      if (useSupabase) {
        // Clear from both Supabase and localStorage
        gradebookStore.clearAllData();
        logEntriesStore.clearAll();
        jeopardyStore.clearAllData();
      } else {
        // Clear localStorage only
        localStorage.clear();
        window.location.reload();
      }
    }
  }
</script>

<div class="max-w-4xl mx-auto">
  <h1 class="text-2xl font-bold text-white mb-8">Settings</h1>

  <div class="bg-dark-card border border-dark-border p-6 rounded-xl shadow-dark-card mb-8">
    <h2 class="text-xl font-semibold text-white mb-4">Display Settings</h2>

    <div class="flex items-center mb-6">
      <span class="mr-4 text-gray-300">Dark Mode:</span>
      <div class="relative inline-block w-12 mr-2 align-middle select-none">
        <input
          type="checkbox"
          id="toggle-dark-mode"
          checked={darkMode}
          onchange={handleToggleDarkMode}
          class="toggle-checkbox absolute block w-6 h-6 rounded-full bg-white border-4 appearance-none cursor-pointer"
        />
        <label
          for="toggle-dark-mode"
          class="toggle-label block overflow-hidden h-6 rounded-full bg-gray-700 cursor-pointer"
        ></label>
      </div>
      <span class="text-gray-300">{darkMode ? 'On' : 'Off'}</span>
    </div>

    <p class="text-dark-muted mb-6">
      Dark mode reduces eye strain in low-light environments and can help save battery on OLED
      displays.
    </p>
  </div>
  
  <div class="bg-dark-card border border-dark-border p-6 rounded-xl shadow-dark-card mb-8">
    <h2 class="text-xl font-semibold text-white mb-4">Storage Settings</h2>

    <div class="flex items-center mb-6">
      <span class="mr-4 text-gray-300">Use Supabase Database:</span>
      <div class="relative inline-block w-12 mr-2 align-middle select-none">
        <input
          type="checkbox"
          id="toggle-storage"
          checked={useSupabase}
          onchange={handleToggleDataStorage}
          class="toggle-checkbox absolute block w-6 h-6 rounded-full bg-white border-4 appearance-none cursor-pointer"
        />
        <label
          for="toggle-storage"
          class="toggle-label block overflow-hidden h-6 rounded-full bg-gray-700 cursor-pointer"
        ></label>
      </div>
      <span class="text-gray-300">{useSupabase ? 'On' : 'Off'}</span>
    </div>

    <p class="text-dark-muted mb-6">
      When enabled, data is stored in Supabase cloud database, making it accessible across devices.
      When disabled, data is stored only in your browser's local storage.
    </p>
  </div>

  <div class="bg-dark-card border border-dark-border p-6 rounded-xl shadow-dark-card">
    <h2 class="text-xl font-semibold text-white mb-4">Data Management</h2>

    <div class="space-y-4">
      <button
        onclick={handleClearData}
        class="py-2 px-4 bg-red-600 text-white font-medium rounded-lg hover:bg-red-700 transition focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-opacity-50"
      >
        Clear All Data
      </button>
    </div>

    <div class="mt-6 text-xs text-dark-muted">
      <p>
        Warning: Clearing data will remove all your data. This action cannot
        be undone.
      </p>
    </div>
  </div>

  <div class="bg-dark-card border border-dark-border p-6 rounded-xl shadow-dark-card mt-8">
    <h2 class="text-xl font-semibold text-white mb-4">About</h2>

    <p class="text-dark-muted mb-2">Teacher Dashboard v1.0.0</p>

    <p class="text-dark-muted mb-6">
      An all-in-one educational tool for teachers with gradebook, jeopardy, lesson planning, and
      classroom management features.
    </p>

    <div class="mt-6 text-xs text-dark-muted">
      <p>Current Storage: {useSupabase ? 'Supabase Database' : 'LocalStorage (Browser-based)'}</p>
      <p class="mt-1">
        {#if useSupabase}
          Data is stored in Supabase cloud database with browser localStorage as fallback.
          This makes your data accessible across devices when you're logged in.
        {:else}
          Data is stored in your browser. It will persist until you clear browser data or use the
          clear data button above.
        {/if}
      </p>
    </div>
  </div>
</div>

<style>
  .toggle-checkbox:checked {
    right: 0;
    border-color: #8b5cf6;
  }
  .toggle-checkbox:checked + .toggle-label {
    background-color: #8b5cf6;
  }
  .toggle-checkbox:focus + .toggle-label {
    box-shadow: 0 0 0 2px rgba(139, 92, 246, 0.5);
  }
  .toggle-label {
    transition: background-color 0.2s;
  }
</style>
</file>

<file path="src/routes/settings/profile/+page.svelte">
<script lang="ts">
  import ProfileForm from '$lib/components/auth/ProfileForm.svelte';
  import { authStore, user } from '$lib/stores/auth';
  import { goto } from '$app/navigation';
  
  // Redirect if not authenticated
  $effect(() => {
    if (!$authStore.user) {
      goto('/auth/login');
    }
  });
</script>

<div class="max-w-2xl mx-auto py-8 px-4">
  <h1 class="text-2xl font-bold text-white mb-8">Profile Settings</h1>
  
  {#if $user}
    <ProfileForm />
  {:else}
    <div class="bg-dark-card border border-dark-border p-6 rounded-xl">
      <p class="text-dark-muted">Loading profile...</p>
    </div>
  {/if}
</div>
</file>

<file path="src/routes/student/dashboard/+page.svelte">
<script lang="ts">
  import { authStore } from '$lib/stores/auth';
  import { jeopardyStore } from '$lib/stores/jeopardy';
  import { goto } from '$app/navigation';
  import { onMount } from 'svelte';
  
  let studentGames = $state<any[]>([]);
  let sharedGames = $state<any[]>([]);
  let enrolledClasses = $state<any[]>([]);
  let isLoading = $state(true);
  
  onMount(async () => {
    await loadStudentData();
  });
  
  async function loadStudentData() {
    isLoading = true;
    try {
      const { supabase } = await import('$lib/supabaseClient');
      const user = $authStore.user;
      
      if (!user) return;
      
      // Load student's own games
      const { data: ownGames } = await supabase
        .from('games')
        .select('*')
        .eq('user_id', user.id)
        .order('created_at', { ascending: false });
      
      if (ownGames) studentGames = ownGames;
      
      // Load games shared with student
      const { data: shared } = await supabase
        .from('shared_games')
        .select('*, games(*)')
        .eq('shared_with_id', user.id);
      
      if (shared) sharedGames = shared.map(s => s.games);
      
      // Load enrolled classes
      const { data: studentRecord } = await supabase
        .from('students')
        .select('id')
        .eq('auth_user_id', user.id)
        .single();
      
      if (studentRecord) {
        const { data: classes } = await supabase
          .from('class_students')
          .select('*, classes(*)')
          .eq('student_id', studentRecord.id);
        
        if (classes) enrolledClasses = classes.map(c => c.classes);
      }
    } catch (error) {
      console.error('Error loading student data:', error);
    } finally {
      isLoading = false;
    }
  }
  
  function createNewGame() {
    goto('/jeopardy/editor/new');
  }
  
  function playGame(gameId: string) {
    goto(`/jeopardy/play/${gameId}`);
  }
  
  function editGame(gameId: string) {
    goto(`/jeopardy/editor/${gameId}`);
  }
</script>

<div class="container mx-auto px-4 py-8">
  <div class="mb-8">
    <h1 class="text-3xl font-bold text-dark-highlight mb-2">Student Dashboard</h1>
    <p class="text-dark-text">Welcome back, {$authStore.user?.email}!</p>
  </div>
  
  {#if isLoading}
    <div class="flex justify-center py-12">
      <span class="loading loading-spinner loading-lg"></span>
    </div>
  {:else}
    <!-- Classes Section -->
    <div class="mb-12">
      <h2 class="text-2xl font-semibold text-dark-text mb-4">My Classes</h2>
      {#if enrolledClasses.length > 0}
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
          {#each enrolledClasses as cls}
            <div class="card-dark">
              <h3 class="text-lg font-medium text-dark-highlight">{cls.name}</h3>
              <p class="text-sm text-gray-400 mt-1">{cls.description || 'No description'}</p>
              <div class="mt-4">
                <span class="text-xs text-gray-500">
                  {cls.grade_level} • {cls.subject}
                </span>
              </div>
            </div>
          {/each}
        </div>
      {:else}
        <div class="text-center py-8 bg-dark-surface rounded-lg">
          <p class="text-gray-400">You're not enrolled in any classes yet.</p>
          <p class="text-sm text-gray-500 mt-2">Ask your teacher for a join code!</p>
        </div>
      {/if}
    </div>
    
    <!-- My Games Section -->
    <div class="mb-12">
      <div class="flex justify-between items-center mb-4">
        <h2 class="text-2xl font-semibold text-dark-text">My Jeopardy Games</h2>
        <button
          onclick={createNewGame}
          class="btn btn-primary"
        >
          Create New Game
        </button>
      </div>
      
      {#if studentGames.length > 0}
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
          {#each studentGames as game}
            <div class="card-dark">
              <h3 class="text-lg font-medium text-dark-highlight">{game.name}</h3>
              <p class="text-sm text-gray-400 mt-1">
                Created {new Date(game.created_at).toLocaleDateString()}
              </p>
              <div class="flex gap-2 mt-4">
                <button
                  onclick={() => editGame(game.id)}
                  class="btn btn-sm btn-secondary"
                >
                  Edit
                </button>
                <button
                  onclick={() => playGame(game.id)}
                  class="btn btn-sm btn-primary"
                >
                  Play
                </button>
              </div>
            </div>
          {/each}
        </div>
      {:else}
        <div class="text-center py-8 bg-dark-surface rounded-lg">
          <p class="text-gray-400">You haven't created any games yet.</p>
          <button
            onclick={createNewGame}
            class="btn btn-primary mt-4"
          >
            Create Your First Game
          </button>
        </div>
      {/if}
    </div>
    
    <!-- Shared Games Section -->
    <div class="mb-12">
      <h2 class="text-2xl font-semibold text-dark-text mb-4">Games Shared With Me</h2>
      {#if sharedGames.length > 0}
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
          {#each sharedGames as game}
            <div class="card-dark">
              <h3 class="text-lg font-medium text-dark-highlight">{game.name}</h3>
              <p class="text-sm text-gray-400 mt-1">
                Shared {new Date(game.created_at).toLocaleDateString()}
              </p>
              <div class="mt-4">
                <button
                  onclick={() => playGame(game.id)}
                  class="btn btn-sm btn-primary"
                >
                  Play
                </button>
              </div>
            </div>
          {/each}
        </div>
      {:else}
        <div class="text-center py-8 bg-dark-surface rounded-lg">
          <p class="text-gray-400">No games have been shared with you yet.</p>
        </div>
      {/if}
    </div>
  {/if}
</div>
</file>

<file path="src/routes/student/games/+page.svelte">
<script lang="ts">
  import { authStore } from '$lib/stores/auth';
  import { goto } from '$app/navigation';
  import { onMount } from 'svelte';
  
  interface Game {
    id: string;
    name: string;
    created_at: string;
    last_modified: string;
    is_public: boolean;
    settings: any;
  }
  
  let ownGames = $state<Game[]>([]);
  let sharedGames = $state<Game[]>([]);
  let isLoading = $state(true);
  let error = $state('');
  
  onMount(async () => {
    await loadGames();
  });
  
  async function loadGames() {
    isLoading = true;
    error = '';
    
    try {
      const { supabase } = await import('$lib/supabaseClient');
      const user = $authStore.user;
      
      if (!user) {
        error = 'Not authenticated';
        return;
      }
      
      // Load own games
      const { data: myGames, error: gamesError } = await supabase
        .from('games')
        .select('*')
        .eq('user_id', user.id)
        .order('created_at', { ascending: false });
      
      if (gamesError) throw gamesError;
      if (myGames) ownGames = myGames;
      
      // Load shared games
      const { data: shared, error: sharedError } = await supabase
        .from('shared_games')
        .select(`
          *,
          games (*)
        `)
        .eq('shared_with_id', user.id);
      
      if (sharedError) throw sharedError;
      if (shared) sharedGames = shared.map(s => s.games);
      
    } catch (err) {
      error = err instanceof Error ? err.message : 'Failed to load games';
    } finally {
      isLoading = false;
    }
  }
  
  function createGame() {
    goto('/jeopardy/editor/new');
  }
  
  function editGame(gameId: string) {
    goto(`/jeopardy/editor/${gameId}`);
  }
  
  function playGame(gameId: string) {
    goto(`/jeopardy/play/${gameId}`);
  }
  
  async function deleteGame(gameId: string) {
    if (!confirm('Are you sure you want to delete this game?')) return;
    
    try {
      const { supabase } = await import('$lib/supabaseClient');
      const { error } = await supabase
        .from('games')
        .delete()
        .eq('id', gameId);
      
      if (error) throw error;
      
      // Remove from local state
      ownGames = ownGames.filter(g => g.id !== gameId);
    } catch (err) {
      alert('Failed to delete game');
    }
  }
  
  async function togglePublic(game: Game) {
    try {
      const { supabase } = await import('$lib/supabaseClient');
      const { error } = await supabase
        .from('games')
        .update({ is_public: !game.is_public })
        .eq('id', game.id);
      
      if (error) throw error;
      
      // Update local state
      const index = ownGames.findIndex(g => g.id === game.id);
      if (index >= 0) {
        ownGames[index].is_public = !game.is_public;
      }
    } catch (err) {
      alert('Failed to update game visibility');
    }
  }
</script>

<div class="container mx-auto px-4 py-8">
  <div class="mb-8 flex justify-between items-center">
    <h1 class="text-3xl font-bold text-dark-highlight">My Jeopardy Games</h1>
    <button
      onclick={createGame}
      class="btn btn-primary"
    >
      Create New Game
    </button>
  </div>
  
  {#if isLoading}
    <div class="flex justify-center py-12">
      <span class="loading loading-spinner loading-lg"></span>
    </div>
  {:else if error}
    <div class="alert alert-error">
      <p>{error}</p>
    </div>
  {:else}
    <!-- Own Games -->
    <div class="mb-12">
      <h2 class="text-2xl font-semibold text-dark-text mb-4">Games I Created</h2>
      {#if ownGames.length > 0}
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {#each ownGames as game}
            <div class="card-dark p-6">
              <h3 class="text-lg font-medium text-dark-highlight mb-2">{game.name}</h3>
              <p class="text-sm text-gray-400 mb-4">
                Created {new Date(game.created_at).toLocaleDateString()}
              </p>
              
              <div class="flex items-center gap-2 mb-4">
                <label class="label cursor-pointer">
                  <input
                    type="checkbox"
                    checked={game.is_public}
                    onchange={() => togglePublic(game)}
                    class="checkbox checkbox-primary checkbox-sm"
                  />
                  <span class="label-text ml-2">Public</span>
                </label>
              </div>
              
              <div class="flex gap-2">
                <button
                  onclick={() => playGame(game.id)}
                  class="btn btn-sm btn-primary"
                >
                  Play
                </button>
                <button
                  onclick={() => editGame(game.id)}
                  class="btn btn-sm btn-secondary"
                >
                  Edit
                </button>
                <button
                  onclick={() => deleteGame(game.id)}
                  class="btn btn-sm btn-error"
                >
                  Delete
                </button>
              </div>
            </div>
          {/each}
        </div>
      {:else}
        <div class="text-center py-8 bg-dark-surface rounded-lg">
          <p class="text-gray-400">You haven't created any games yet.</p>
          <button
            onclick={createGame}
            class="btn btn-primary mt-4"
          >
            Create Your First Game
          </button>
        </div>
      {/if}
    </div>
    
    <!-- Shared Games -->
    <div>
      <h2 class="text-2xl font-semibold text-dark-text mb-4">Games Shared With Me</h2>
      {#if sharedGames.length > 0}
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {#each sharedGames as game}
            <div class="card-dark p-6">
              <h3 class="text-lg font-medium text-dark-highlight mb-2">{game.name}</h3>
              <p class="text-sm text-gray-400 mb-4">
                Shared on {new Date(game.created_at).toLocaleDateString()}
              </p>
              
              <button
                onclick={() => playGame(game.id)}
                class="btn btn-sm btn-primary"
              >
                Play
              </button>
            </div>
          {/each}
        </div>
      {:else}
        <div class="text-center py-8 bg-dark-surface rounded-lg">
          <p class="text-gray-400">No games have been shared with you yet.</p>
        </div>
      {/if}
    </div>
  {/if}
</div>
</file>

<file path="src/routes/test-sentry/+page.svelte">
<script lang="ts">
	import { onMount } from 'svelte';
	import { trackAsyncOperation, trackUserInteraction, trackDatabaseOperation } from '$lib/utils/performance';
	import * as Sentry from '@sentry/sveltekit';
	
	function throwTestError() {
		trackUserInteraction('click', 'error-button');
		throw new Error('This is a test error for Sentry!');
	}
	
	async function throwAsyncError() {
		trackUserInteraction('click', 'async-error-button');
		await new Promise(resolve => setTimeout(resolve, 100));
		throw new Error('This is an async test error for Sentry!');
	}
	
	function captureMessage() {
		trackUserInteraction('click', 'message-button');
		// You can manually capture messages/errors if needed
		import('@sentry/sveltekit').then(({ captureMessage }) => {
			captureMessage('Test message sent to Sentry', 'info');
		});
	}
	
	// Performance monitoring examples
	async function testSlowOperation() {
		trackUserInteraction('click', 'slow-operation-button');
		
		await trackAsyncOperation(
			'slow-api-call',
			async () => {
				// Simulate a slow API call
				await new Promise(resolve => setTimeout(resolve, 2000));
				return { success: true };
			},
			{ 'api.endpoint': '/test', 'api.type': 'simulation' }
		);
		
		alert('Slow operation completed! Check Sentry performance tab.');
	}
	
	async function testDatabaseOperation() {
		trackUserInteraction('click', 'db-operation-button');
		
		await trackDatabaseOperation(
			'users',
			'select',
			async () => {
				// Simulate database query
				await new Promise(resolve => setTimeout(resolve, 500));
				return [{ id: 1, name: 'Test User' }];
			}
		);
		
		alert('Database operation completed! Check Sentry performance tab.');
	}
	
	function testTransaction() {
		trackUserInteraction('click', 'transaction-button');
		
		// Create a custom transaction
		Sentry.startSpan({
			name: 'Custom User Transaction',
			op: 'ui.action',
			tags: {
				component: 'test-page',
				action: 'custom-transaction'
			}
		}, () => {
			// Simulate some work
			const start = Date.now();
			while (Date.now() - start < 100) {
				// Busy wait for 100ms
			}
			
			// Add breadcrumb
			Sentry.addBreadcrumb({
				message: 'Custom transaction completed',
				level: 'info',
				category: 'user-action'
			});
		});
		
		alert('Custom transaction completed! Check Sentry performance tab.');
	}
</script>

<div class="container mx-auto p-8">
	<h1 class="text-2xl font-bold mb-4">Sentry Test Page</h1>
	
	<div class="space-y-6">
		<div>
			<h2 class="text-xl font-semibold mb-3">Error Tracking</h2>
			<div class="space-y-2">
				<button
					onclick={throwTestError}
					class="bg-red-500 text-white px-4 py-2 rounded hover:bg-red-600 mr-2"
				>
					Throw Sync Error
				</button>
				
				<button
					onclick={throwAsyncError}
					class="bg-orange-500 text-white px-4 py-2 rounded hover:bg-orange-600 mr-2"
				>
					Throw Async Error
				</button>
				
				<button
					onclick={captureMessage}
					class="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600 mr-2"
				>
					Send Test Message
				</button>
			</div>
		</div>
		
		<div>
			<h2 class="text-xl font-semibold mb-3">Performance Monitoring</h2>
			<div class="space-y-2">
				<button
					onclick={testSlowOperation}
					class="bg-purple-500 text-white px-4 py-2 rounded hover:bg-purple-600 mr-2"
				>
					Test Slow API Call (2s)
				</button>
				
				<button
					onclick={testDatabaseOperation}
					class="bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600 mr-2"
				>
					Test Database Operation
				</button>
				
				<button
					onclick={testTransaction}
					class="bg-indigo-500 text-white px-4 py-2 rounded hover:bg-indigo-600 mr-2"
				>
					Test Custom Transaction
				</button>
			</div>
		</div>
	</div>
	
	<div class="mt-8 p-4 bg-gray-100 dark:bg-gray-800 rounded">
		<h3 class="font-semibold mb-2">What to Check in Sentry:</h3>
		<ul class="text-sm space-y-1">
			<li>🐛 <strong>Issues</strong> - Error tracking and debugging info</li>
			<li>⚡ <strong>Performance</strong> - Transaction traces and Web Vitals</li>
			<li>📹 <strong>Replays</strong> - Session recordings when errors occur</li>
			<li>🚀 <strong>Releases</strong> - Track deployments and related issues</li>
		</ul>
		<p class="text-sm mt-3">
			Visit your 
			<a href="https://sentry.io" target="_blank" class="text-blue-500 underline">
				Sentry dashboard
			</a> to see captured data.
		</p>
	</div>
</div>
</file>

<file path="start-goose.sh">
#!/bin/bash
# Goose startup script with proper environment configuration

export GOOSE_PROVIDER=openai
export GOOSE_MODEL=gpt-4o

# Start goose with the configured environment
goose session "$@"
</file>

<file path="supabase/migrations/001_add_user_roles.sql">
-- Migration: Add role field to app_users table
-- This migration adds a role field to distinguish between teachers and students

-- Step 1: Add role column with default value
ALTER TABLE app_users 
ADD COLUMN IF NOT EXISTS role TEXT DEFAULT 'teacher' 
CHECK (role IN ('teacher', 'student'));

-- Step 2: Create an enum type for better type safety (optional)
DO $$ 
BEGIN
    IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'user_role') THEN
        CREATE TYPE user_role AS ENUM ('teacher', 'student');
    END IF;
END $$;

-- Step 3: Add a join_code field for student class enrollment
ALTER TABLE classes
ADD COLUMN IF NOT EXISTS join_code TEXT UNIQUE;

-- Step 4: Generate join codes for existing classes
UPDATE classes 
SET join_code = CONCAT(
    SUBSTRING(MD5(RANDOM()::TEXT) FROM 1 FOR 3),
    '-',
    SUBSTRING(MD5(RANDOM()::TEXT) FROM 1 FOR 3)
)
WHERE join_code IS NULL;

-- Step 5: Create a table to track student-teacher relationships
CREATE TABLE IF NOT EXISTS student_teachers (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    student_id UUID REFERENCES app_users(id) ON DELETE CASCADE,
    teacher_id UUID REFERENCES app_users(id) ON DELETE CASCADE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    UNIQUE(student_id, teacher_id)
);

-- Step 6: Create index for performance
CREATE INDEX IF NOT EXISTS idx_app_users_role ON app_users(role);
CREATE INDEX IF NOT EXISTS idx_classes_join_code ON classes(join_code);
</file>

<file path="supabase/migrations/002_update_student_tables.sql">
-- noinspection SqlResolveForFile

-- noinspection SqlResolveForFile

-- noinspection SqlResolveForFile

-- noinspection SqlResolveForFile

-- noinspection SqlResolveForFile

-- Migration: Update student tables for authentication
-- This migration updates the students table to link with app_users

-- Step 1: Add auth_user_id to students table to link with app_users
ALTER TABLE students
ADD COLUMN IF NOT EXISTS auth_user_id UUID REFERENCES auth.users(id);

-- Step 2: Create index for performance
CREATE INDEX IF NOT EXISTS idx_students_auth_user_id ON students(auth_user_id);

-- Step 3: Add game sharing capability
CREATE TABLE IF NOT EXISTS shared_games (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    game_id UUID REFERENCES games(id) ON DELETE CASCADE,
    shared_with_id UUID REFERENCES app_users(id) ON DELETE CASCADE,
    permission TEXT DEFAULT 'view' CHECK (permission IN ('view', 'play', 'edit')),
    shared_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    UNIQUE(game_id, shared_with_id)
);

-- Step 4: Create index for performance
CREATE INDEX IF NOT EXISTS idx_shared_games_game_id ON shared_games(game_id);
CREATE INDEX IF NOT EXISTS idx_shared_games_shared_with_id ON shared_games(shared_with_id);

-- Step 5: Add is_public field to games for student discovery
ALTER TABLE games
ADD COLUMN IF NOT EXISTS is_public BOOLEAN DEFAULT FALSE,
ADD COLUMN IF NOT EXISTS owner_role TEXT DEFAULT 'teacher' CHECK (owner_role IN ('teacher', 'student'));
</file>

<file path="supabase/migrations/003_rls_policies.sql">
-- Migration: Create RLS policies for student access control
-- This migration sets up Row Level Security for students

-- Step 1: Enable RLS on all tables if not already enabled
ALTER TABLE app_users ENABLE ROW LEVEL SECURITY;
ALTER TABLE classes ENABLE ROW LEVEL SECURITY;
ALTER TABLE students ENABLE ROW LEVEL SECURITY;
ALTER TABLE games ENABLE ROW LEVEL SECURITY;
ALTER TABLE shared_games ENABLE ROW LEVEL SECURITY;
ALTER TABLE student_teachers ENABLE ROW LEVEL SECURITY;

-- Step 2: Policies for app_users
-- Users can view their own profile
CREATE POLICY "Users can view own profile" ON app_users
    FOR SELECT USING (auth.uid() = id);

-- Users can update their own profile
CREATE POLICY "Users can update own profile" ON app_users
    FOR UPDATE USING (auth.uid() = id);

-- Students can view their teachers
CREATE POLICY "Students can view their teachers" ON app_users
    FOR SELECT USING (
        id IN (
            SELECT teacher_id FROM student_teachers 
            WHERE student_id = auth.uid()
        )
    );

-- Step 3: Policies for classes
-- Teachers can manage their own classes
CREATE POLICY "Teachers can manage own classes" ON classes
    FOR ALL USING (
        user_id = auth.uid() AND
        EXISTS (SELECT 1 FROM app_users WHERE id = auth.uid() AND role = 'teacher')
    );

-- Students can view classes they're enrolled in
CREATE POLICY "Students can view enrolled classes" ON classes
    FOR SELECT USING (
        id IN (
            SELECT class_id FROM class_students cs
            JOIN students s ON s.id = cs.student_id
            WHERE s.auth_user_id = auth.uid()
        )
    );

-- Step 4: Policies for games
-- Users can manage their own games
CREATE POLICY "Users can manage own games" ON games
    FOR ALL USING (user_id = auth.uid());

-- Students can view public games
CREATE POLICY "Students can view public games" ON games
    FOR SELECT USING (
        is_public = TRUE OR
        id IN (
            SELECT game_id FROM shared_games 
            WHERE shared_with_id = auth.uid()
        )
    );

-- Students can create their own games
CREATE POLICY "Students can create games" ON games
    FOR INSERT WITH CHECK (
        EXISTS (SELECT 1 FROM app_users WHERE id = auth.uid() AND role = 'student') AND
        user_id = auth.uid()
    );

-- Step 5: Policies for shared_games
-- Users can see games shared with them
CREATE POLICY "Users can see shared games" ON shared_games
    FOR SELECT USING (shared_with_id = auth.uid());

-- Game owners can share their games
CREATE POLICY "Game owners can share games" ON shared_games
    FOR INSERT WITH CHECK (
        EXISTS (
            SELECT 1 FROM games 
            WHERE id = game_id AND user_id = auth.uid()
        )
    );

-- Step 6: Policies for student_teachers
-- Students can see their teacher relationships
CREATE POLICY "Students can see their teachers" ON student_teachers
    FOR SELECT USING (student_id = auth.uid());

-- Teachers can see their student relationships
CREATE POLICY "Teachers can see their students" ON student_teachers
    FOR SELECT USING (teacher_id = auth.uid());
</file>

<file path="supabase/migrations/004_remove_duplicate_jeopardy.sql">
-- Migration: Remove duplicate Jeopardy tables
-- This migration removes the old jeopardy_* tables and keeps the newer implementation

-- Step 1: Drop old Jeopardy tables (if they exist and have no data we need)
-- WARNING: Make sure to backup any needed data before running this!

-- Drop foreign key constraints first
ALTER TABLE jeopardy_questions DROP CONSTRAINT IF EXISTS jeopardy_questions_category_id_fkey;
ALTER TABLE jeopardy_categories DROP CONSTRAINT IF EXISTS jeopardy_categories_game_id_fkey;
ALTER TABLE jeopardy_teams DROP CONSTRAINT IF EXISTS jeopardy_teams_game_id_fkey;

-- Drop the tables
DROP TABLE IF EXISTS jeopardy_questions CASCADE;
DROP TABLE IF EXISTS jeopardy_categories CASCADE;
DROP TABLE IF EXISTS jeopardy_teams CASCADE;
DROP TABLE IF EXISTS jeopardy_games CASCADE;

-- Step 2: Add missing columns to the new tables if needed
-- Add user_id to teams table to track who created each team
ALTER TABLE teams
ADD COLUMN IF NOT EXISTS user_id UUID REFERENCES app_users(id);

-- Add is_daily_double to questions (equivalent to is_double_jeopardy)
ALTER TABLE questions
ADD COLUMN IF NOT EXISTS is_daily_double BOOLEAN DEFAULT FALSE;

-- Step 3: Create index for better performance
CREATE INDEX IF NOT EXISTS idx_games_is_public ON games(is_public);
CREATE INDEX IF NOT EXISTS idx_games_owner_role ON games(owner_role);
CREATE INDEX IF NOT EXISTS idx_teams_user_id ON teams(user_id);
</file>

<file path="svelte.config.js">
import { vitePreprocess } from '@sveltejs/vite-plugin-svelte';
import vercel from '@sveltejs/adapter-vercel';

/** @type {import('@sveltejs/kit').Config} */
const config = {
	preprocess: vitePreprocess(),
	kit: {
		adapter: vercel({
			runtime: 'nodejs20.x',
			split: false
		}),
		prerender: {
			handleHttpError: ({ status, path, referrer, message }) => {
				// Ignore 404 errors during prerendering
				if (status === 404) return;
				const referrerText = referrer ? ` - referrer: ${referrer}` : '';
				throw new Error(`${message} (status: ${status}, path: ${path}${referrerText})`);
			}
		}
	}
};

export default config;
</file>

<file path="tailwind.config.ts">
import type { Config } from 'tailwindcss';
import typographyPlugin from '@tailwindcss/typography';
import formsPlugin from '@tailwindcss/forms';
import daisyuiPlugin from 'daisyui';

const config: Config = {
  content: ['./src/**/*.{html,js,svelte,ts}'],
  darkMode: 'class',
  theme: {
    extend: {
      fontFamily: {
        sans: ['Inter', 'ui-sans-serif', 'system-ui', 'sans-serif'],
      },
      colors: {
        'bg-base': '#0B0F19',
        'bg-gradient': '#0D1120',
        'card': '#111827',
        'surface': '#1F2937',
        'accent': 'rgba(99, 102, 241, 0.1)',
        'accent-hover': '#6366F1',
        'purple': '#8B5CF6',
        'purple-light': '#A78BFA',
        'purple-bg': 'rgba(139, 92, 246, 0.08)',
        'purple-hover': '#7C3AED',
        'error': '#EF4444',
        'error-hover': '#DC2626',
        'text-base': '#9CA3AF',
        'text-hover': '#F9FAFB',
        'highlight': '#F9FAFB',
        'muted': '#4B5563',
        'border': '#1F2937',
        'separator': '#374151',
      },
      backgroundImage: {
        'gradient-radial': 'radial-gradient(50% 50% at 50% 50%, var(--tw-gradient-stops))',
        'gradient-conic': 'conic-gradient(from 180deg at 50% 50%, var(--tw-gradient-stops))',
      },
      boxShadow: {
        'card': '0 4px 6px -1px rgba(0, 0, 0, 0.3), 0 2px 4px -1px rgba(0, 0, 0, 0.2)',
        'themed-card': '0 8px 16px rgba(0, 0, 0, 0.4), 0 4px 6px rgba(0, 0, 0, 0.3)',
        'dropdown': '0 10px 20px rgba(0, 0, 0, 0.5), 0 6px 8px rgba(0, 0, 0, 0.4)',
        'glow': '0 0 20px rgba(139, 92, 246, 0.15)',
        'button': '0 2px 4px rgba(0, 0, 0, 0.3), inset 0 1px 0 rgba(255, 255, 255, 0.06)',
      },
      animation: {
        'gradient': 'gradient 8s ease infinite',
        'float': 'float 3s ease-in-out infinite',
        'pulse-subtle': 'pulse-subtle 2s ease-in-out infinite',
      },
      keyframes: {
        gradient: {
          '0%, 100%': { backgroundPosition: '0% 50%' },
          '50%': { backgroundPosition: '100% 50%' },
        },
        float: {
          '0%, 100%': { transform: 'translateY(0)' },
          '50%': { transform: 'translateY(-5px)' },
        },
        'pulse-subtle': {
          '0%, 100%': { opacity: '1' },
          '50%': { opacity: '0.8' },
        },
      },
    },
  },
  plugins: [daisyuiPlugin, typographyPlugin, formsPlugin],
  daisyui: {
    themes: ["dark", "light"],
    darkTheme: "dark",
    base: false,
    styled: true,
    utils: false,
    logs: false,
    rtl: false,
    prefix: "d-",
  },
};

export default config;
</file>

<file path="tsconfig.json">
{
  "extends": "./.svelte-kit/tsconfig.json",
  "compilerOptions": {
    "allowImportingTsExtensions": true,
    "allowJs": true,
    "checkJs": true,
    "esModuleInterop": true,
    "forceConsistentCasingInFileNames": true,
    "resolveJsonModule": true,
    "skipLibCheck": true,
    "sourceMap": true,
    "strict": true,
    "moduleResolution": "bundler"
  },
  "include": [
    "src/**/*",
    "src/**/*.svelte",
    "src/**/*.ts",
    "src/**/*.js",
    "src/**/*.d.ts",
    "svelte.config.js",
    "eslint.config.ts",
    "vite.config.ts"
  ],
  "exclude": ["node_modules", "dist", ".svelte-kit", "build", "coverage", "**/*.min.js"]
  // Path aliases are handled by https://svelte.dev/docs/kit/configuration#alias
  // except $lib which is handled by https://svelte.dev/docs/kit/configuration#files
  //
  // If you want to overwrite includes/excludes, make sure to copy over the relevant includes/excludes
  // from the referenced tsconfig.json - TypeScript does not merge them in
}
</file>

<file path="vercel.json">
{
  "version": 2,
  "buildCommand": "npm run build",
  "devCommand": "npm run dev",
  "installCommand": "npm install",
  "framework": "sveltekit",
  "regions": ["iad1"],
  "headers": [
    {
      "source": "/(.*)",
      "headers": [
        {
          "key": "Cache-Control",
          "value": "public, max-age=0, must-revalidate"
        }
      ]
    }
  ]
}
</file>

<file path="vite.config.ts">
import { sveltekit } from '@sveltejs/kit/vite';
import { defineConfig, loadEnv } from 'vite';
import { sentryVitePlugin } from "@sentry/vite-plugin";

export default defineConfig(({ mode }) => {
  // Load environment variables based on mode
  const env = loadEnv(mode, process.cwd(), '');
  
  return {
    plugins: [
      sveltekit(),
      // Add Sentry plugin for production builds
      mode === 'production' && sentryVitePlugin({
        org: "frank-cottone", // Replace with your Sentry org name
        project: "main", // Replace with your Sentry project name
        authToken: env.SENTRY_AUTH_TOKEN, // Add this to your .env
        telemetry: false,
        release: {
          name: process.env.SENTRY_RELEASE || `main@${process.env.VERCEL_GIT_COMMIT_SHA || process.env.GITHUB_SHA || Date.now()}`,
          cleanArtifacts: true,
          uploadLegacySourcemaps: {
            paths: ['./build'],
            ignore: ['node_modules'],
          },
          setCommits: {
            auto: true,
            ignoreMissing: true,
          },
        },
        sourcemaps: {
          assets: './build/**',
          ignore: ['node_modules'],
          filesToDeleteAfterUpload: './build/**/*.map',
        },
      })
    ].filter(Boolean),
    
    build: {
      sourcemap: true,
      rollupOptions: {
        output: {
          sourcemapExcludeSources: false
        }
      }
    },
    
    css: {
      devSourcemap: true
    },
    
    // optimizeDeps: {
    //   exclude: ['@ag-grid-community/core', '@ag-grid-community/client-side-row-model']
    // },
    
    define: {
      'import.meta.env.PUBLIC_SUPABASE_URL': JSON.stringify(env.PUBLIC_SUPABASE_URL || ''),
      'import.meta.env.PUBLIC_SUPABASE_ANON_KEY': JSON.stringify(env.PUBLIC_SUPABASE_ANON_KEY || ''),
    }
  };
});
</file>

<file path="vitest-setup.ts">
import '@testing-library/jest-dom/vitest';
import { vi } from 'vitest';

// Mock window.matchMedia
Object.defineProperty(window, 'matchMedia', {
  writable: true,
  value: vi.fn().mockImplementation(query => ({
    matches: false,
    media: query,
    onchange: null,
    addListener: vi.fn(), // deprecated
    removeListener: vi.fn(), // deprecated
    addEventListener: vi.fn(),
    removeEventListener: vi.fn(),
    dispatchEvent: vi.fn(),
  })),
});

// Mock IntersectionObserver
global.IntersectionObserver = vi.fn().mockImplementation(() => ({
  observe: vi.fn(),
  unobserve: vi.fn(),
  disconnect: vi.fn(),
}));

// Mock ResizeObserver
global.ResizeObserver = vi.fn().mockImplementation(() => ({
  observe: vi.fn(),
  unobserve: vi.fn(),
  disconnect: vi.fn(),
}));

// Mock localStorage
const localStorageMock = {
  getItem: vi.fn(),
  setItem: vi.fn(),
  removeItem: vi.fn(),
  clear: vi.fn(),
  length: 0,
  key: vi.fn(),
};
global.localStorage = localStorageMock as any;

// Mock sessionStorage
const sessionStorageMock = {
  getItem: vi.fn(),
  setItem: vi.fn(),
  removeItem: vi.fn(),
  clear: vi.fn(),
  length: 0,
  key: vi.fn(),
};
global.sessionStorage = sessionStorageMock as any;

// Reset mocks before each test
beforeEach(() => {
  vi.clearAllMocks();
  localStorageMock.getItem.mockReturnValue(null);
  sessionStorageMock.getItem.mockReturnValue(null);
});
</file>

<file path="vitest.config.ts">
import { defineConfig } from 'vitest/config';
import { sveltekit } from '@sveltejs/kit/vite';
import { svelteTesting } from '@testing-library/svelte/vite';

export default defineConfig({
  plugins: [
    sveltekit(), 
    svelteTesting()
  ],
  test: {
    globals: true,
    environment: 'jsdom',
    setupFiles: ['./vitest-setup.ts'],
    include: ['src/**/*.{test,spec}.{js,ts}'],
    exclude: ['node_modules', '.svelte-kit', 'dist'],
    coverage: {
      provider: 'v8',
      reporter: ['text', 'json', 'html', 'lcov'],
      reportsDirectory: './coverage',
      exclude: [
        'node_modules/**',
        'src/**/*.d.ts',
        'src/**/*.config.*',
        'src/**/*.test.*',
        'src/**/*.spec.*',
        'src/app.html',
        'coverage/**',
        'dist/**',
        'build/**',
        '.svelte-kit/**',
        '**/*.config.ts',
        'src/**/__mocks__/**'
      ],
      thresholds: {
        lines: 70,
        functions: 70,
        branches: 70,
        statements: 70
      }
    }
  }
});
</file>

</files>
