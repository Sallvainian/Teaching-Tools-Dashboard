name: Continuous Integration (Improved)

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  validate:
    name: Validation (Lint & Type Check)
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8
          
      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
          
      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
            
      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile
        
      # Run the combined validation command as specified in CLAUDE.md
      - name: Run pnpm validate (ESLint + TypeScript)
        run: pnpm validate
        
      # Individual steps for better error reporting
      - name: Run ESLint
        run: pnpm lint
        continue-on-error: true
        
      - name: Upload ESLint results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: eslint-results
          path: |
            eslint-output.txt
          if-no-files-found: ignore
          
      - name: Run TypeScript type checking
        run: pnpm check
        
      # Check for Svelte 5 compliance as mentioned in CLAUDE.md
      - name: Check for Svelte 5 compliance
        run: |
          echo "Checking for old Svelte 4 patterns..."
          # Check for old export let patterns
          if grep -r "export let" src/ --include="*.svelte" --exclude-dir=node_modules; then
            echo "❌ Found 'export let' - use \$props() instead (Svelte 5)"
            exit 1
          fi
          
          # Check for old reactive statements
          if grep -r "\$:" src/ --include="*.svelte" --exclude-dir=node_modules; then
            echo "⚠️ Found '\$:' reactive statements - consider using \$derived() instead (Svelte 5)"
            # Don't fail build as this might be acceptable in some cases
          fi
          
          # Check for createEventDispatcher
          if grep -r "createEventDispatcher" src/ --include="*.svelte" --include="*.ts" --exclude-dir=node_modules; then
            echo "❌ Found 'createEventDispatcher' - use callback props instead (Svelte 5)"
            exit 1
          fi
          
          echo "✅ Svelte 5 compliance check passed"
        continue-on-error: true

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8
          
      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
          
      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
            
      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile
        
      - name: Run unit tests with coverage
        run: pnpm test:coverage
        
      - name: Copy coverage for Qodana
        run: |
          mkdir -p .qodana
          cp -f coverage/lcov.info .qodana/ || true
          cp -f coverage/coverage-final.json .qodana/ || true
          cp -f coverage/coverage-summary.json .qodana/ || true
        
      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
          
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            coverage/
            test-results/
          if-no-files-found: ignore
          
      - name: Comment test coverage on PR
        if: github.event_name == 'pull_request'
        uses: romeovs/lcov-reporter-action@v0.3.1
        with:
          lcov-file: ./coverage/lcov.info
          github-token: ${{ secrets.GITHUB_TOKEN }}

  build:
    name: Build Project
    runs-on: ubuntu-latest
    needs: [validate, test]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8
          
      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
          
      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
            
      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile
        
      - name: Build project
        run: pnpm build
        
      - name: Check build output
        run: |
          if [ ! -d ".svelte-kit" ]; then
            echo "Build failed: .svelte-kit directory not found"
            exit 1
          fi
          echo "✅ Build completed successfully"
          
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-output
          path: |
            .svelte-kit/
            build/
          if-no-files-found: error

  check-database-compliance:
    name: Database Compliance Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Check for incorrect table names
        run: |
          echo "Checking for incorrect database table references..."
          
          # Check for the old incorrect table name
          if grep -r "observation_logs" src/ --include="*.ts" --include="*.svelte" --exclude-dir=node_modules; then
            echo "❌ Found 'observation_logs' - should be 'log_entries'"
            exit 1
          fi
          
          # Check for other potential issues mentioned in CLAUDE.md
          if grep -r "createItem" src/ --include="*.ts" --exclude-dir=node_modules; then
            echo "❌ Found 'createItem' - should be 'insertItem' for consistency"
            exit 1
          fi
          
          echo "✅ Database compliance check passed"
        continue-on-error: true

  security-check:
    name: Security Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Check for hardcoded secrets
        run: |
          echo "Checking for potential security issues..."
          
          # Check for hardcoded API keys (excluding dev environment)
          if grep -r "sk-" src/ --include="*.ts" --include="*.svelte" --exclude="supabaseClient.ts" --exclude-dir=node_modules; then
            echo "❌ Found potential hardcoded API keys"
            exit 1
          fi
          
          # Check for TODO security items
          if grep -r "TODO.*security\|FIXME.*security" src/ --include="*.ts" --include="*.svelte" --exclude-dir=node_modules; then
            echo "⚠️ Found security-related TODOs that should be addressed"
          fi
          
          echo "✅ Security check completed"
        continue-on-error: true