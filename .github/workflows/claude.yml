# @ai-context CLAUDE_WORKFLOW - GitHub integration for Claude AI code review and assistance
# @ai-dependencies GitHub Actions, Claude API, Anthropic SDK
# @ai-sideEffects Comments on issues and PRs, performs code reviews, security checks
# @ai-exports Claude AI responses on GitHub issues and pull requests

name: Claude Assistant
on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  issues:
    types: [opened, assigned]
  pull_request_review:
    types: [submitted]

jobs:
  claude-response:
    if: |
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review' && contains(github.event.review.body, '@claude')) ||
      (github.event_name == 'issues' && (contains(github.event.issue.body, '@claude') || contains(github.event.issue.title, '@claude')))
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - uses: anthropics/claude-code-action@beta
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          custom_instructions: |
            ## Security and Quality Checks
            
            When reviewing PRs, always perform these checks:
            
            ### 🔒 Security Checks
            - Check for hardcoded secrets (api_key, apiKey, api_secret, password, token, secret)
            - Exclude PUBLIC_ prefixed variables and test/mock files
            - Flag any sensitive data exposure risks
            
            ### 📦 Bundle Size Analysis
            - Monitor changes to bundle size
            - Warn if size increases by more than 10%
            - Suggest optimization strategies for large increases
            
            ### 🧪 Test Coverage
            - Ensure changed src/ files have corresponding .test.ts files
            - Remind to add tests for new functionality
            - Check that existing tests still pass
            
            ### 🚨 Code Quality
            - No console.log statements in production code
            - No large blocks of commented code
            - Follow TypeScript strict mode requirements
            - Use Svelte 5 runes ($state, $derived, $effect)
            - Check for proper error handling
            
            ### 📝 PR Checklist Validation
            - Ensure PR description follows template
            - Verify all checklist items are addressed
            - Check for breaking changes documentation
            
            When asked to fix issues, prioritize security > functionality > style.
