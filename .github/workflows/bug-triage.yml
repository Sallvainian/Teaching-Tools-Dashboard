name: Bug Triage and Analysis

on:
  issues:
    types: [opened, edited]
  issue_comment:
    types: [created]

permissions:
  issues: write
  contents: read

jobs:
  analyze-bug-report:
    name: Analyze Bug Report
    runs-on: ubuntu-latest
    if: contains(github.event.issue.labels.*.name, 'bug') || contains(github.event.issue.title, 'bug') || contains(github.event.issue.title, 'error') || contains(github.event.issue.title, 'issue')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Analyze issue content
        uses: actions/github-script@v7
        with:
          script: |
            const issue = context.issue;
            const issueBody = context.payload.issue.body || '';
            const issueTitle = context.payload.issue.title || '';
            
            // Keywords to look for
            const errorKeywords = ['error', 'exception', 'crash', 'fail', 'undefined', 'null', 'NaN'];
            const componentKeywords = ['svelte', 'component', 'store', 'route', 'page'];
            const featureKeywords = ['gradebook', 'jeopardy', 'auth', 'login', 'student', 'teacher'];
            
            // Analyze the issue
            let severity = 'low';
            let affectedAreas = [];
            let suggestedActions = [];
            
            // Check for error keywords
            for (const keyword of errorKeywords) {
              if (issueBody.toLowerCase().includes(keyword) || issueTitle.toLowerCase().includes(keyword)) {
                severity = 'high';
                break;
              }
            }
            
            // Check for component mentions
            for (const keyword of componentKeywords) {
              if (issueBody.toLowerCase().includes(keyword)) {
                affectedAreas.push(keyword);
              }
            }
            
            // Check for feature mentions
            for (const keyword of featureKeywords) {
              if (issueBody.toLowerCase().includes(keyword)) {
                affectedAreas.push(`feature:${keyword}`);
              }
            }
            
            // Check for stack traces
            if (issueBody.includes('at ') && issueBody.includes('(')) {
              severity = 'critical';
              suggestedActions.push('Stack trace detected - investigate error location');
            }
            
            // Check for console errors
            if (issueBody.toLowerCase().includes('console') || issueBody.toLowerCase().includes('devtools')) {
              suggestedActions.push('Check browser console for additional error details');
            }
            
            // Create analysis comment
            let comment = `## ü§ñ Automated Bug Analysis\n\n`;
            comment += `**Severity Assessment:** ${severity.toUpperCase()}\n\n`;
            
            if (affectedAreas.length > 0) {
              comment += `**Potentially Affected Areas:**\n`;
              affectedAreas.forEach(area => {
                comment += `- ${area}\n`;
              });
              comment += '\n';
            }
            
            if (suggestedActions.length > 0) {
              comment += `**Suggested Investigation Steps:**\n`;
              suggestedActions.forEach(action => {
                comment += `- ${action}\n`;
              });
              comment += '\n';
            }
            
            comment += `**Automated Checks to Run:**\n`;
            comment += `- [ ] Run \`pnpm lint\` to check for linting errors\n`;
            comment += `- [ ] Run \`pnpm check\` to check for TypeScript errors\n`;
            comment += `- [ ] Run \`pnpm test\` to ensure tests pass\n`;
            comment += `- [ ] Check browser console for errors\n`;
            comment += `- [ ] Verify issue reproduces in incognito/private mode\n\n`;
            
            comment += `**Helpful Commands:**\n`;
            comment += `\`\`\`bash\n`;
            comment += `# Install dependencies\n`;
            comment += `pnpm install --frozen-lockfile\n\n`;
            comment += `# Run development server\n`;
            comment += `pnpm dev\n\n`;
            comment += `# Run tests\n`;
            comment += `pnpm test\n\n`;
            comment += `# Check for TypeScript errors\n`;
            comment += `pnpm check\n`;
            comment += `\`\`\`\n`;
            
            // Add labels based on analysis
            const labels = ['needs-investigation'];
            if (severity === 'critical') labels.push('priority:critical');
            else if (severity === 'high') labels.push('priority:high');
            else labels.push('priority:low');
            
            if (affectedAreas.includes('auth')) labels.push('area:auth');
            if (affectedAreas.includes('gradebook')) labels.push('area:gradebook');
            if (affectedAreas.includes('jeopardy')) labels.push('area:jeopardy');
            
            // Post comment
            await github.rest.issues.createComment({
              issue_number: issue.number,
              owner: issue.owner,
              repo: issue.repo,
              body: comment
            });
            
            // Add labels
            await github.rest.issues.addLabels({
              issue_number: issue.number,
              owner: issue.owner,
              repo: issue.repo,
              labels: labels
            });

  check-reproduction:
    name: Check for Reproduction Steps
    runs-on: ubuntu-latest
    if: github.event_name == 'issues' && github.event.action == 'opened'
    
    steps:
      - name: Check for reproduction steps
        uses: actions/github-script@v7
        with:
          script: |
            const issue = context.issue;
            const issueBody = context.payload.issue.body || '';
            
            const hasSteps = issueBody.toLowerCase().includes('steps to reproduce') || 
                           issueBody.toLowerCase().includes('reproduction') ||
                           issueBody.includes('1.') ||
                           issueBody.includes('- [ ]');
            
            const hasVersion = issueBody.toLowerCase().includes('version') ||
                             issueBody.toLowerCase().includes('browser') ||
                             issueBody.toLowerCase().includes('environment');
            
            if (!hasSteps || !hasVersion) {
              let comment = `## ‚ÑπÔ∏è Additional Information Needed\n\n`;
              
              if (!hasSteps) {
                comment += `### Steps to Reproduce\n`;
                comment += `Please provide clear steps to reproduce this issue:\n`;
                comment += `1. Go to '...'\n`;
                comment += `2. Click on '...'\n`;
                comment += `3. See error\n\n`;
              }
              
              if (!hasVersion) {
                comment += `### Environment Information\n`;
                comment += `Please provide the following information:\n`;
                comment += `- Browser and version:\n`;
                comment += `- Operating System:\n`;
                comment += `- Node.js version (run \`node --version\`):\n`;
                comment += `- Are you running locally or on a deployed version?\n`;
              }
              
              await github.rest.issues.createComment({
                issue_number: issue.number,
                owner: issue.owner,
                repo: issue.repo,
                body: comment
              });
              
              await github.rest.issues.addLabels({
                issue_number: issue.number,
                owner: issue.owner,
                repo: issue.repo,
                labels: ['needs-reproduction']
              });
            }