name: Comprehensive Bug Scan

on:
  workflow_dispatch:
    inputs:
      create_issues:
        description: 'Create GitHub issues for found bugs'
        required: false
        type: boolean
        default: false
  schedule:
    - cron: '0 0 * * SUN'  # Weekly on Sunday

permissions:
  contents: read
  issues: write
  pull-requests: write
  security-events: write

jobs:
  comprehensive-scan:
    name: Run All Bug Detection Checks
    runs-on: ubuntu-latest
    outputs:
      lint_errors: ${{ steps.lint.outputs.errors }}
      type_errors: ${{ steps.typecheck.outputs.errors }}
      test_failures: ${{ steps.test.outputs.failures }}
      security_issues: ${{ steps.security.outputs.issues }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8
          
      - name: Install dependencies
        run: pnpm install
        
      - name: Run ESLint
        id: lint
        run: |
          echo "## ESLint Results" > lint-report.md
          
          # Run ESLint and capture output
          pnpm lint 2>&1 | tee eslint-output.txt || true
          
          # Count errors and warnings from output
          ERRORS=$(grep -c "error" eslint-output.txt || echo "0")
          WARNINGS=$(grep -c "warning" eslint-output.txt || echo "0")
          
          echo "errors=$ERRORS" >> $GITHUB_OUTPUT
          echo "warnings=$WARNINGS" >> $GITHUB_OUTPUT
          
          echo "- Errors: $ERRORS" >> lint-report.md
          echo "- Warnings: $WARNINGS" >> lint-report.md
          
          # Extract top issues
          echo "### Top Issues:" >> lint-report.md
          head -20 eslint-output.txt >> lint-report.md || echo "No issues found" >> lint-report.md
          
      - name: Run TypeScript Check
        id: typecheck
        run: |
          echo "## TypeScript Check Results" > typecheck-report.md
          pnpm check 2>&1 | tee typecheck-output.txt || true
          
          # Count errors
          ERRORS=$(grep -c "error TS" typecheck-output.txt || echo "0")
          echo "errors=$ERRORS" >> $GITHUB_OUTPUT
          
          echo "- Type Errors: $ERRORS" >> typecheck-report.md
          
          # Extract error summary
          echo "### Error Summary:" >> typecheck-report.md
          grep "error TS" typecheck-output.txt | sort | uniq -c | sort -nr | head -10 >> typecheck-report.md || true
          
      - name: Run Tests
        id: test
        run: |
          echo "## Test Results" > test-report.md
          
          # Run tests and capture output
          pnpm test 2>&1 | tee test-output.txt || true
          
          # Extract test counts from output
          PASSED=$(grep -oP '\d+(?= passed)' test-output.txt | tail -1 || echo "0")
          FAILED=$(grep -oP '\d+(?= failed)' test-output.txt | tail -1 || echo "0")
          
          if [ -z "$PASSED" ]; then PASSED="0"; fi
          if [ -z "$FAILED" ]; then FAILED="0"; fi
          
          echo "failures=$FAILED" >> $GITHUB_OUTPUT
          
          echo "- Passed: $PASSED" >> test-report.md
          echo "- Failed: $FAILED" >> test-report.md
          
          # Show failed test details if any
          if [ "$FAILED" -gt 0 ]; then
            echo "### Failed Tests:" >> test-report.md
            grep -A 5 "FAIL" test-output.txt | head -20 >> test-report.md || true
          fi
          
      - name: Security Scan
        id: security
        run: |
          echo "## Security Scan Results" > security-report.md
          
          # NPM Audit
          npm audit 2>&1 | tee audit-output.txt || true
          
          # Count vulnerabilities from output
          VULNERABILITIES=$(grep -oP '\d+(?= vulnerabilities)' audit-output.txt | head -1 || echo "0")
          if [ -z "$VULNERABILITIES" ]; then VULNERABILITIES="0"; fi
          
          echo "issues=$VULNERABILITIES" >> $GITHUB_OUTPUT
          
          echo "- NPM Vulnerabilities: $VULNERABILITIES" >> security-report.md
          
          # Extract critical/high vulnerabilities
          echo "### Vulnerability Summary:" >> security-report.md
          grep -E "(critical|high|moderate)" audit-output.txt | head -10 >> security-report.md || echo "No critical issues found" >> security-report.md
          
      - name: Performance Analysis
        run: |
          echo "## Performance Analysis" > performance-report.md
          
          # Bundle size check
          pnpm build
          echo "### Bundle Size:" >> performance-report.md
          du -sh .svelte-kit/output/client/* | sort -hr | head -10 >> performance-report.md
          
          # Find large dependencies
          echo "### Large Dependencies:" >> performance-report.md
          du -sh node_modules/* | sort -hr | head -20 >> performance-report.md
          
      - name: Code Quality Metrics
        run: |
          echo "## Code Quality Metrics" > quality-report.md
          
          # Complexity analysis
          echo "### File Complexity (lines of code):" >> quality-report.md
          find src -name "*.svelte" -o -name "*.ts" | xargs wc -l | sort -nr | head -20 >> quality-report.md
          
          # TODO/FIXME comments
          echo "### Technical Debt (TODO/FIXME):" >> quality-report.md
          grep -rn "TODO\|FIXME\|HACK\|XXX" src --include="*.ts" --include="*.svelte" | wc -l >> quality-report.md
          
      - name: Upload all reports
        uses: actions/upload-artifact@v4
        with:
          name: bug-scan-reports
          path: |
            *-report.md
            eslint-results.json
            test-results.json
            npm-audit.json
            
  generate-report:
    name: Generate Comprehensive Report
    runs-on: ubuntu-latest
    needs: comprehensive-scan
    
    steps:
      - name: Download reports
        uses: actions/download-artifact@v4
        with:
          name: bug-scan-reports
          
      - name: Generate comprehensive report
        run: |
          echo "# üêõ Comprehensive Bug Scan Report" > SCAN_REPORT.md
          echo "Date: $(date)" >> SCAN_REPORT.md
          echo "" >> SCAN_REPORT.md
          
          echo "## Summary" >> SCAN_REPORT.md
          echo "| Check | Issues Found |" >> SCAN_REPORT.md
          echo "|-------|-------------|" >> SCAN_REPORT.md
          echo "| ESLint Errors | ${{ needs.comprehensive-scan.outputs.lint_errors }} |" >> SCAN_REPORT.md
          echo "| TypeScript Errors | ${{ needs.comprehensive-scan.outputs.type_errors }} |" >> SCAN_REPORT.md
          echo "| Test Failures | ${{ needs.comprehensive-scan.outputs.test_failures }} |" >> SCAN_REPORT.md
          echo "| Security Issues | ${{ needs.comprehensive-scan.outputs.security_issues }} |" >> SCAN_REPORT.md
          echo "" >> SCAN_REPORT.md
          
          # Append all individual reports
          for report in *-report.md; do
            echo "---" >> SCAN_REPORT.md
            cat "$report" >> SCAN_REPORT.md
            echo "" >> SCAN_REPORT.md
          done
          
          echo "## Recommended Actions" >> SCAN_REPORT.md
          echo "" >> SCAN_REPORT.md
          
          # Generate recommendations based on findings
          if [[ "${{ needs.comprehensive-scan.outputs.lint_errors }}" -gt 0 ]]; then
            echo "1. **Fix ESLint Errors**: Run \`pnpm lint:fix\` to auto-fix issues" >> SCAN_REPORT.md
          fi
          
          if [[ "${{ needs.comprehensive-scan.outputs.type_errors }}" -gt 0 ]]; then
            echo "2. **Fix TypeScript Errors**: Review and fix type errors in the codebase" >> SCAN_REPORT.md
          fi
          
          if [[ "${{ needs.comprehensive-scan.outputs.test_failures }}" -gt 0 ]]; then
            echo "3. **Fix Failing Tests**: Run \`pnpm test\` locally and fix failing tests" >> SCAN_REPORT.md
          fi
          
          if [[ "${{ needs.comprehensive-scan.outputs.security_issues }}" -gt 0 ]]; then
            echo "4. **Address Security Issues**: Run \`pnpm audit fix\` to fix vulnerabilities" >> SCAN_REPORT.md
          fi
          
      - name: Upload final report
        uses: actions/upload-artifact@v4
        with:
          name: comprehensive-bug-report
          path: SCAN_REPORT.md
          
      - name: Create issue if requested
        if: github.event.inputs.create_issues == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('SCAN_REPORT.md', 'utf8');
            
            // Create main issue
            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `üêõ Bug Scan Report - ${new Date().toISOString().split('T')[0]}`,
              body: report,
              labels: ['bug', 'automated', 'needs-triage']
            });
            
            console.log(`Created issue #${issue.data.number}`);
            
      - name: Post summary to PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('SCAN_REPORT.md', 'utf8');
            
            // Truncate report for PR comment
            const summary = report.split('\n').slice(0, 50).join('\n');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary + '\n\n[View full report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})'
            });